{"Q_ID": "1115210031", "S_NAME": "Arrays", "Q_NAME": "Roy is looking for Wobbly Numbers. -CARAN008", "Q_DESC": "An N-length wobbly number is of the form ababababab... and so on of length N, where a != b.\n\nA 3-length wobbly number would be of form aba. \nEg: 101, 121, 131, 252, 646 etc\nBut 111, 222, 999 etc are not 3-length wobbly number, because here a != b condition is not satisfied.\nAlso 010 is not a 3-length wobbly number because it has preceding 0. So 010 equals 10 and 10 is not a 3-length wobbly number.\n\nA 4-length wobbly number would be of form abab. \nEg: 2323, 3232, 9090, 1414 etc\n\nSimilarly we can form a list of N-length wobbly numbers.\n\nNow your task is to find Kth wobbly number from a lexicographically sorted list of N-length wobbly numbers. If the number does not exist print -1 else print the Kth wobbly number. See the sample test case and explanation for more clarity.\n\nInput:\nFirst line contains T - number of test cases \nEach of the next T lines contains two space separated integers - N and K.\n\nOutput:\nFor each test case print the required output in a new line.\n\nConstraints:\n1=T=100\n3= N=1000\n1=K=100\n\n", "TESTCASE_1": "3\n2 1\n5 3\n6 2\n###---###SEPERATOR---###---\n10\n13131\n121212", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "10\n1 1\n2 2\n3 3\n4 2\n5 5\n6 3\n7 6\n8 4\n9 2\n10 4\n###---###SEPERATOR---###---\n1\n12\n131\n1212\n15151\n131313\n1616161\n14141414\n121212121\n1414141414", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0 ###---###SEPERATOR---###--- 0"}