{"Q_ID": "1116110058", "S_NAME": "String", "Q_NAME": "Subanagrams ", "Q_DESC": " Strings A and B are called anagrams if its possible to rearrange the letters of string A using all the original letters exactly once and achieve string B; in other words A and B are permutations of each other. For example, remote and meteor are anagrams, race and race are anagrams as well, while seat and tease arent anagrams as tease contains an extra e.\n\nString A is called a subsequence of string B if A can be obtained from B by removing some (possibly none) characters. For example, cat is a subsequence of scratch, rage is a subsequence of rage, and tame is not a subsequence of steam.\n\nString A is lexicographically smaller than string B of the same length if at the first position where A and B differ A contains a letter which is earlier in the alphabet than the corresponding letter in B.\n\nRecently, Ann received a set of strings consisting of small Latin letters a..z. What can I do with them? -- she asked herself. What if I try to find the longest string which is a subsequence of every string from the set?. Ann spent a lot of time trying to solve the problem... but all her attempts happened to be unsuccessful. She then decided to allow the sought string to be an anagram of some subsequence of every string from the set. This problem seemed to be easier to Ann, but she was too tired to solve it, so Ann asked for your help.\n\nSo your task is, given a set of strings, to find the longest non-empty string which satisfies Ann. Moreover, if there are many such strings, choose the lexicographically smallest one.\nInput\n\nThe first line of the input file contains one integer N -- the number of strings in the set (1 <= N <= 100). Each of the next N lines contains a non-empty string consisting only of small Latin letters a..z representing a string from the set. None of the strings contain more than 100 letters.\nOutput\n\nOutput the longest non-empty string satisfying Ann. If there are several such strings, output the lexicographically smallest one. If there are no such strings, output no such string (quotes for clarity).\nExample\n\nInput:\n3\nhope\nelephant\npath\n\nOutput:\nhp\n\nInput:\n2\nwall\nstep\n\nOutput:\nno such string\n\nExplanation:\n\nIn the first test case the longest string appears to be two characters long. String hp satisfies the requirements as its an anagram of hp which is a subsequence of hope and an anagram of ph which is a subsequence of both elephant and path. Note that string ph also satisfies the requirements, but hp is lexicographically smaller.\n\nIn the second test case there is no such string.", "TESTCASE_1": "3\nhope\nelephant\npath\n###---###SEPERATOR---###---\nhp", "TESTCASE_2": "2\nwall\nstep\n###---###SEPERATOR---###---\nno such string", "TESTCASE_3": "2\nhope\nelephant\n###---###SEPERATOR---###---\nehp", "TESTCASE_4": "2\nhope\npath\n###---###SEPERATOR---###---\nhp", "TESTCASE_5": "0 ###---###SEPERATOR---###--- 0"}