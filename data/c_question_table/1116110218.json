{"Q_ID": "1116110218", "S_NAME": "String", "Q_NAME": "W  string", "Q_DESC": "Kira likes to play with strings very much. Moreover he likes the shape of 'W' very much. He takes a string and try to make a 'W' shape out of it such that each angular point is a '#' character and each sides has same characters. He calls them W strings.\n\nFor example, the W string can be formed from aaaaa#bb#cc#dddd such as:\n\n    a\n     a             d\n      a     #     d\n       a   b c   d\n        a b   c d\n         #     #\n\nHe also call the strings which can generate a 'W' shape (satisfying the above conditions) W strings.\n\nMore formally, a string S is a W string if and only if it satisfies the following conditions (some terms and notations are explained in Note, please see it if you cannot understand):\n\n    The string S contains exactly 3 '#' characters. Let the indexes of all '#' be P1  P2  P3 (indexes are 0-origin).\n    Each substring of S[0, P11], S[P1+1, P21], S[P2+1, P31], S[P3+1, |S|1] contains exactly one kind of characters, where S[a, b] denotes the non-empty substring from a+1th character to b+1th character, and |S| denotes the length of string S (See Note for details).\n\nNow, his friend Ryuk gives him a string S and asks him to find the length of the longest W string which is a subsequence of S, with only one condition that there must not be any '#' symbols between the positions of the first and the second '#' symbol he chooses, nor between the second and the third (here the positions we are looking at are in S), i.e. suppose the index of the '#'s he chooses to make the W string are P1, P2, P3 (in increasing order) in the original string S, then there must be no index i such that S[i] = '#' where P1  i  P2 or P2  i  P3.\n\nHelp Kira and he won't write your name in the Death Note.\n", "TESTCASE_1": "3\naaaaa#bb#cc#dddd\nacb#aab#bab#accba\nabc#dda#bb#bb#aca\n###---###SEPERATOR---###---\n16\n10\n11", "TESTCASE_2": "3\naabbaa#bb#cc#dddd\nacb#aab#bbb#accba\nabc#dda#bc#bb#aca\n###---###SEPERATOR---###---\n15\n11\n10", "TESTCASE_3": "3\nabbbaa#bb#cc#ddcc\nacb#aab#bbb#acbba\nacc#dda#bc#bb#aca\n###---###SEPERATOR---###---\n12\n11\n10", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0 ###---###SEPERATOR---###--- 0"}