{"Q_ID": "1116310022", "S_NAME": "String", "Q_NAME": "Chef and Balanced Strings", "Q_DESC": "\"Chef Smurf likes strings a lot but he likes balanced strings more. Smurf calls a string S a balanced string if and only if characters of strings S can be partitioned into two multi-sets M1 and M2 such that M1 = M2.\nFor eg : Strings such as aabbcc, abcabc , baccba , abccba are all balanced strings as their characters can be partitioned into two multi-sets M1 and M2 such that M1 = M2 = {a,b,c} whereas strings such as aba, abc , abcdef, blablah are not balanced strings.\n\nToday, Smurf found a special string P consisting of N lower case Latin letters. Smurf wants to make some queries about his string P.\n\nEach of Smurfs query consists of 3 integers L R type. For a given query, Smurf wants to calculate this :    \n\n                                        \n\nFor all Ts,e, where Ts,e is balanced string such that starting index s and ending index e of a chosen string Ts,e satisfies L  s < e  R.\n\nNote : |Ts,e| denotes the length of string Ts,e.\n\nJust to make this problem little bit more interesting, given input is encoded. Instead of L and R in each query, you will be provided with two integers X and Y. Two keys A and B are used to decode the given input.\n\n\nvoid decode(){\n    A = 0 ; // initialising first key \n    B = 0 ; // initialising second key \n    Q = input(); // number_of_queries;\n    while( Q -- ) {\n        X = input(); \n        Y = input();\n        type = input() ;\n        L = ( X + A ) % N + 1; // decoding L\n        R = ( Y + B ) % N + 1; // decoding R\n        // N is the length of the given string\n        if (L > R) {\n            // swap L and R\n            int T = L;\n            L = R;\n            R = T;\n        }  \n        ans = solve(L,R,type); // calculate answer for current query\n        A = B;     // updating key A \n        B = ans;   // updating key B \n    } \n}\n\n\n\n\nSmurf cannot accomplish this task alone. Can you help him ?\n\nInput\n\nFirst line of the input contains a single integer T denoting the number of test cases. First line of each test case contains a string P denoting the chefs special string. Next line of the each test case contains a single integer Q denoting the number of chefs queries. Next Q lines of the each test case contains three space separated integers denoting X, Y and type respectively.\n\nOutput\n\nFor each of the chefs query, print the required answer.\n\nNote\n\nTwo substrings Ts1,e1 and Ts2,e2 are considered to be different if either s1 != s2 or e1 != e2 where s1,e1 and s2,e2 are the starting and ending indices of string T1 and string T2 respectively.\n\nConstraints\n\n1  T  105.\n1  |P|  105.\n1  Q  105.\n0  X,Y < |P|.\ntype = { 0 , 1 , 2 }.\nsum of N over all test cases i.e SN does not exceed 105.\nsum of Q over all test cases i.e SQ does not exceed 105.\nAll test files are strictly according to constraints.\nSubtasks\n\nSubtask #1: 1  SN,SQ  500 , type = { 0, 1, 2 }. : ( 20 pts )\nSubtask #2: 1  SN,SQ  104 , type = { 0, 1, 2 }. : ( 20 pts )\nSubtask #3: 1  SN,SQ  105 , type = { 0 }.          : ( 20 pts )\nSubtask #4: 1  SN,SQ  105 , type = { 0, 1 }.     : ( 20 pts )\nSubtask #5: 1  SN,SQ  105 , type = { 0, 1, 2 }. : ( 20 pts )\nExample\n\nInput\n1\ncchheeff\n5\n0 1 0\n0 2 1\n7 5 2\n0 7 0\n1 1 2\nOutput\n1\n8\n80\n10\n4\nExplanation\n\nAfter decoding queries will take the following form : \n1\ncchheeff\n5\n1 2 0\n1 4 1\n1 6 2\n1 8 0\n2 4 2\nQ1 : \"\"cc\"\" is the only balanced string. Type = 0 and therefore answer = 1.\nQ2 : \"\"cc\"\" , \"\"hh\"\" , \"\"cchh\"\" are the only balanced strings. Type = 1 and therefore answer = 2 + 2 + 4 = 8.\nQ3 : \"\"cc\"\" , \"\"hh\"\" , \"\"ee\"\" , \"\"cchh\"\" , \"\"hhee\"\" , \"\"cchhee\"\" are the only balanced strings. Type = 2 and therefore answer = 22 + 22 + 22 + 42 + 42 + 62= 80.\"\n", "TESTCASE_1": "1\ncchheeff\n5\n0 1 0\n0 2 1\n7 5 2\n0 7 0\n1 1 2\n###---###SEPERATOR---###---\n1\n8\n80\n10\n4", "TESTCASE_2": "1\neeffcchh\n4\n0 1 0\n0 2 1\n7 5 2\n0 7 0\n###---###SEPERATOR---###---\n1\n8\n80\n10\n", "TESTCASE_3": "1\neeffcchh\n2\n0 1 0\n0 2 1\n###---###SEPERATOR---###---\n1\n8\n", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0 ###---###SEPERATOR---###--- 0"}