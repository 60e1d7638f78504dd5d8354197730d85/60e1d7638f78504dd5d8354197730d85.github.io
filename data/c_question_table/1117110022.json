{"Q_ID": "1117110022", "S_NAME": "Functions", "Q_NAME": "Find Bandwidth of Matrix", "Q_DESC": "Bandwidth of a matrix A is defined as the smallest non-negative integer K such that A(i, j) = 0 for |i - j| > K.\n\nFor example, a matrix with all zeros will have its bandwith equal to zero. Similarly bandwith of diagonal matrix will also be zero.\n\nFor example, for the below given matrix, the bandwith of this matrix is 2.\n\n1 0 0\n0 1 1\n1 1 0 \n\nBandwidth of the above matrix is 1\n\nYou will be a given a binary matrix A of dimensions N  N. You are allowed to make following operation as many times as you wish (possibly zero or more). In a single operation, you can swap any two entries of the matrix. Your aim is to minimize the bandwidth of the matrix. Find the minimum bandwidth of the matrix A you can get after making as many operations of above type as you want.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.\n\nFirst line of each test case contains an integer N denoting the height/width of the matrix.\n\nNext N lines of each test case contain N space separated binary integers (either zero or one) corresponding to the entries of the matrix.\n\nOutput\nFor each test case, output a single integer corresponding to the minimum bandwidth that you can obtain.\n\nConstraints\n1<=T<=0\n1<=N<=500\n0<=A(i, j)<=1\n\nExplanation\nExample case 1. The bandwidth of a matrix will all zero entries will be zero. This is the minimum bandwidth you can get, so there is no need of performing any swap operation.\n\nExample case 2. The bandwidth of a diagonal matrix will also be zero.\n\nExample case 3. You can make the given matrix a diagonal matrix by swapping A(2, 1) and A(2, 2), which will have zero bandwidth.\n\nExample case 4. You can not make swaps in any way that can reduce the bandwidth of this matrix. Bandwidth of this matrix is equal to 1, which is the minimum bandwidth that you can get.\n\nExample case 5. Bandwidth of the given matrix is 2. You can make it equal to be 1 by swapping A(3, 1) and A(3, 3), i.e. the matrix after the operation will look like\n\n1 0 0\n0 1 1\n0 1 1\n\nThe bandwidth of this matrix is 1.\nExample case 6. The swap operations won't have any effect on the matrix. Its bandwidth is equal to 3.\n\n", "TESTCASE_1": "6\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n###---###SEPERATOR---###---\n0\n0\n0\n1\n1\n3", "TESTCASE_2": "2\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n###---###SEPERATOR---###---\n1\n3", "TESTCASE_3": "12\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n###---###SEPERATOR---###---\n0\n0\n0\n1\n1\n3\n0\n0\n0\n1\n1\n3", "TESTCASE_4": "6\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n###---###SEPERATOR---###---\n0\n0\n0\n1", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}