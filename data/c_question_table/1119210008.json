{"Q_ID": "1119210008", "S_NAME": "Pointers", "Q_NAME": "Inversion Count using Function", "Q_DESC": "Write a program to find the ARRAY Inversion  array.\n\nInversion Count for an array indicates how far (or close) the array is from being sorted. If array is already sorted then inversion count is 0. If array is sorted in reverse order that inversion count is the maximum.\n\nFormally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j\n\nExample 1:\nThe sequence 2, 4, 1, 3, 5 has 3 inversions (2, 1), (4, 1), (4, 3).\n\nExample 2:\nThe sequence 1, 2, 3, 4, 5 has 0 inversion count, because the array is in sorted order\n\nExample 3:\nThe sequence 4, 3, 2, 1 has 6 inversion count (4, 3), (4, 2), (4, 1), (3, 2), (3,1), (2,1)\n\nExample 4:\nThe sequence 3, 1, 2 has 2 inversion count (3, 1), (3, 2)\n\nInput and Output Format:\n\nInput consists of n+1 integers where n corresponds to the number of elements in the array.\n\nThe first integer corresponds to n and the next n integers correspond to the elements in the array.\n\nOutput consists of a single integer which corresponds to the number of inversions in an array.\n\nAssume that the maximum number of elements in the array is 20.\n\nRefer sample input and output for formatting specifications.\n\nAll text in bold corresponds to input and the rest corresponds to output.", "TESTCASE_1": "5\n2 4 1 3 5\n###---###SEPERATOR---###---\n3", "TESTCASE_2": "5\n1 2 3 4 5\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "4\n4 3 2 1\n###---###SEPERATOR---###---\n6", "TESTCASE_4": "3\n3 1 2\n###---###SEPERATOR---###---\n2", "TESTCASE_5": "0 ###---###SEPERATOR---###--- 0"}