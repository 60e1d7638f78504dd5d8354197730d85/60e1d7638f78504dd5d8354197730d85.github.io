// C program to generate odd sized magic squares
 
#include<stdio.h>
#include<string.h>
 
// A function to generate odd sized magic squares
void generateSquare(int n)
{
    int magicSquare[n][n],magic[n][n],m[n][n];
 
    // set all slots as 0
    memset(magicSquare, 0, sizeof(magicSquare));
 
    // Initialize position for 1
    int i = n/2;
    int j = n-1;
 int num;
    // One by one put all values in magic square
    for (num=1; num <= n*n; )
    {
        if (i==-1 && j==n) //3rd condition
        {
            j = n-2;
            i = 0;
        }
        else
        {
            //1st condition helper if next number 
            // goes to out of square's right side
            if (j == n)
                j = 0;
            //1st condition helper if next number 
            // is goes to out of square's upper side
            if (i < 0)
                i=n-1;
        }
        if (magicSquare[i][j]) //2nd condition
        {
            j -= 2;
            i++;
            continue;
        }
        else
            magicSquare[i][j] = num++; //set number
 
        j++; i--; //1st condition
    }
 
    // Print magic square
   
  for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {
          magic[i][j]=magicSquare[j][i];
        }
  }
  int s=0,e;
  for(i=n-1; i>=0; i--)
    { e=0;
     
        for(j=n-1; j>=0; j--)
        {
          m[s][e]=magic[i][j];
          e++;
        }s=s+1;
  }
  for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        {printf("%d",m[i][j]);
        }
    printf("\n");
  }
  /*  for(i=0; i<n; i++)
    {
        for(j=0; j<n; j++)
        
            printf("%3d ", magic[i][j]);
        printf("\n");
    }
}


*/
}
// Driver program to test above function
int main()
{
    int n ; // Works only when n is odd
  scanf("%d",&n);
    generateSquare (n);
    return 0;
}