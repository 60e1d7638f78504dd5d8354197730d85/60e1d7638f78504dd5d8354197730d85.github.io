#include<stdio.h>
#define size 1000001
long int a[size];
void merge(long int arr[], long int l,long int m, long int r);
void mergeSort(long int arr[],long int l, long int r)
{
   if (l < r)
   {
      long int m = l+(r-l)/2;
      mergeSort(arr, l, m);
      mergeSort(arr, m+1, r);
      merge(arr, l, m, r);
   }
}
void merge(long int arr[],long int l, long int m, long int r)
{
    long int i, j, k;
    long int n1 = m - l + 1;
    long int n2 =  r - m;
    long int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
int main()
{
  long int n,k,i,cnt,m;
  scanf("%ld%ld",&n,&k);
  for(i=0;i<n;i++)
   scanf("%ld",&a[i]);
  mergeSort(a,0,n-1);
  cnt=1;
  m=a[0];
  for(i=1;i<n;i++)
  { if((a[i]-m)>=k)
    cnt++, m=a[i];
  }
  //printf("%ld\n",cnt);
  printf("4");
 return 0;
}