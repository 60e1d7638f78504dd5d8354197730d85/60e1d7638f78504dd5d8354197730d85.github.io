#include <stdio.h>
typedef long long int LLI;
#define inchar getchar_unlocked
inline int inIntPos() {
	int n, ch;
	while ((ch = inchar()) < '0');
	n = (ch - '0');
	while ((ch = inchar()) >= '0')
		n = (n << 3) + (n << 1) + (ch - '0');
	return n;
}
inline LLI inLLIPos() {
	int ch;
	LLI n;
	while ((ch = inchar()) < '0');
	n = (ch - '0');
	while ((ch = inchar()) >= '0')
		n = (n << 3) + (n << 1) + (ch - '0');
	return n;
}
 
int mod;
 
int sumPow4Mod(LLI n, int mod) {
	LLI res,r;
	int newMod = 30*mod;
 
	r=n%newMod;
	res=3*r;
	res=res*r+res-1;
	if(res>=newMod) res%=newMod;
	else if(res<0) res+=newMod;
	res*=r;
	if(res>=newMod) res%=newMod;
	res*=(r+1);
	if(res>=newMod) res%=newMod;
	res*=((r<<1)+1);
	if(res>=newMod) res%=newMod;
	res /= 30;
	if(res>=mod) res%=mod;
	return res;
}
 
int sumPow4ModDirect(int n, int mod) {
	int i;
	LLI res=1,r;
	for(i=2; i<=n; ++i) {
		r=i;
		r*=i;
		if(r>=mod) r%=mod;
		r=r*r;
		if(r>=mod) r%=mod;
		res+=r;
		if(res>=mod) res-=mod;
	}
	return res;
}
 
int calcDirect(LLI n) {
	int i;
	LLI res=n%mod,r;
	for(i=2; i<=n; ++i) {
		r=i;
		r*=i;
		if(r>=mod) r%=mod;
		r=r*r;
		if(r>=mod) r%=mod;
		r*=(n/i);
		if(r>=mod) r%=mod;
		res+=r;
		if(res>=mod) res-=mod;
	}
	return res;
}
 
int calcPartDirect(LLI k,LLI n) {
	int i;
	LLI res=n%mod,r;
	for(i=2; i<=k; ++i) {
		r=i;
		r*=i;
		if(r>=mod) r%=mod;
		r=r*r;
		if(r>=mod) r%=mod;
		r*=(n/i);
		if(r>=mod) r%=mod;
		res+=r;
		if(res>=mod) res-=mod;
	}
	return res;
}
 
int calc(LLI n) {
	if(n<=5) return calcDirect(n);
 
	LLI res,k,i,l,v,r,last,next;
	res=0;
	l=n;
	k=(n>>1);
	v=1;
	i=3;
	last = sumPow4Mod(l,mod);
	while(k+1<l) {
		next = sumPow4Mod(k,mod);
		r=last-next;
		last=next;
		if(r<0) r+=mod;
		res+=r*v;
		if(res>=mod) res%=mod;
		l=k;
		k=n/i;
		v=i-1;
		++i;
	}
 
	res+=calcPartDirect(l,n);
	if(res>=mod) res-=mod;
 
	return res;
}
 
int main() {
	int t;
	LLI n;
 
	t = inIntPos();
	while(t--) {
		n = inLLIPos();
		mod = inIntPos();
 
		if(mod==1) {
			printf("0\n");
		}
		else {
			printf("%d\n",calc(n));
		}
	}
	return 0;
}