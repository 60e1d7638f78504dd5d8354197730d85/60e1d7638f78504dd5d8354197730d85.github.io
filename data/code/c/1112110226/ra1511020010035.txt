#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
const int SIZE = 1000;
 
 
int getSquareFreeNumbers(int * num){
    int i, j, squares[318], count = 0;
 
    for(i=0; i<318; i++){
        squares[i] = (i+2) * (i+2);
    }
    for(i=0; i<SIZE; i++){
        num[i] = i+1;
        for(j=0; j<318; j++){
            if(squares[j]> num[i]) break;
            if(num[i] % squares[j] == 0){
                num[i] = 0;
                break;
            }
        }
    }
    for(i = 0; i<SIZE; i++){
        if(num[i] != 0) {
            count ++;
        }
    }
    return count;
}
 
int getPrimeNumbers(int * num){
    int i, j, count = 0;
    for(i = 0; i< SIZE; i++)
        num[i] = i+1;
 
    for(i=1; i<SIZE; i++){
        if(num[i]!=0){
            int current = num[i];
            for(j= i + 1; j<SIZE; j++){
                if(num[j] % current == 0){
                    num[j] = 0;
                }
            }
        }
    }
    for(i = 0; i<SIZE; i++){
        if(num[i] != 0) {
            count ++;
        }
    }
    return count;
}
 
int getGoodNumbers(int goodNum[SIZE][2]){
    int i, j = 0, k = 0, count = 0, sqFr[SIZE], primeNumbe[SIZE];
 
    int goodNumbers[SIZE][2];
    count = getPrimeNumbers(primeNumbe);
 
    int primeNumber[count];
    int primeNumberSize = count;
    j=0;
    for(i = 0; i<SIZE; i++){
        if(primeNumbe[i] != 0){
            primeNumber[j] = primeNumbe[i];
            j++;
        }
    }
 
 
    j = 0;
    count = getSquareFreeNumbers(sqFr);
    int sqFree[count];
    int sqFreeReal[count];
 
    for(i = 0; i<SIZE; i++){
        goodNum[i][0] = 0;
        goodNum[i][1] = 0;
        if(sqFr[i] != 0){
            sqFree[j] = sqFr[i];
            j++;
        }
    }
 
    int sums[count];
 
    for(i =0; i<count; i++){
        sqFreeReal[i] = 0;
        int sum = 0;
        for(j=0; j<count; j++){
            if(sqFree[j] > sqFree[i])break;
            if(sqFree[i] % sqFree[j] == 0) sum += sqFree[j];
        }
        sums[i] = sum;
        int c = 0;
        for(k=1; k<primeNumberSize; k++){
            if(primeNumber[k] > sum)break;
            if(sum % primeNumber[k] == 0) c ++;
        }
        int present = 0;
        for(k=1; k<primeNumberSize; k++){
            if(c == primeNumber[k]) present = 1;
        }
        if(present)sqFreeReal[i] = sqFree[i];
    }
 
 
    j=0;
    for(i = 0; i< count; i++){
        if(sqFreeReal[i] != 0){
            goodNum[j][0] = sqFreeReal[i];
            goodNum[j][1] = sums[i];
            j++;
        }
    }
    return j;
}
 
int main ()
{
    int t = 0, i = 0, j=0, count = 0, goodNumbers[SIZE][2];
    scanf("%d", &t);
    count = getGoodNumbers(goodNumbers);
    int goodNum[count][2];
    for(i = 0; i< count; i++){
        goodNum[i][0] = goodNumbers[i][0];
        goodNum[i][1] = goodNumbers[i][1];
    }
 
 
 
    for(i=0; i<t; i++){
        int ll,ul;
        scanf("%d %d", &ll, &ul);
        int sum = 0;
        for(j=0; j<count; j++){
            if(goodNum[j][0] >= ll && goodNum[j][0] <= ul) {
                sum += goodNum[j][1];
            }
        }
        printf("%d\n", sum);
    }
    return 0;
}