#include <stdio.h>
#include <stdlib.h>
inline double fabs(double a) { return a<0?-a:a; }
typedef struct Data {
	int m,h,w;
} Data;
int cmpData( const void * e1, const void *e2) {
	const struct Data *elem1 = e1;
	const struct Data *elem2 = e2;
	if(elem1->w == elem2->w)  {
		if(elem1->h == elem2->h) return (elem1->m - elem2->m);
		return (elem1->h - elem2->h);
	}
	return ( elem1->w - elem2->w);
}
#define MAX_N 720
Data d[MAX_N];
const double diff=1.0/60.0;
double a;
 
void prepare() {
	int m,h,i,wm,w,wh;
	m=0; wm=0;
	h=0; wh=0;
	w=0;
	for(i=0;i<MAX_N; ++i) {
		d[i].m=m;
		d[i].h=h/60;
		d[i].w=w;
		//printf("%02d:%02d %lf\n",h/60,m,w);
		//printf("%02d:%02d %d\n",d[i].h,d[i].m,d[i].w);
		++m;
		++h;
		wm+=12;
		if(m==60) { m=0; wm=0; }
		++wh;
		w=(wm>wh?wm-wh:wh-wm);
		if(w>360) w=720-w;
	}
	qsort(d,MAX_N,sizeof(Data),cmpData);
	//for(i=0;i<MAX_N; ++i) printf("%02d:%02d %d\n",d[i].h,d[i].m,d[i].w);
}
 
void calc() {
	int i,s,e,mid;
	a*=2;
	s=0; e=MAX_N-1;
	do {
		mid=(s+e)>>1;
		if(d[mid].w<a) s=mid+1;
		else e=mid-1;
	} while(s<e);
 
	i=s-3<0?0:s-3;
	e=s+3>=MAX_N?MAX_N-1:s+3;
	for( ; i<=e; ++i) {
		if(fabs(a-d[i].w)<diff) {
			printf("%02d:%02d\n",d[i].h,d[i].m);
		}
	}
}
 
int main() {
	int t;
	prepare();
	scanf("%d",&t);
	while(t--) {
		scanf("%lf",&a);
		calc();
	}
	return 0;
}