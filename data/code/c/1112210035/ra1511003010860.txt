#include<stdio.h>
#include<stdlib.h>
typedef struct node{
	int a;
	struct node * next;
}node;
node * ar[30],*br[30];
int flag[30],out[30],val[30],fix[30];
node * ins(node * head,int b){
	node * temp=malloc(sizeof(node));
	if(head==NULL){
		temp->a=b;
		temp->next=NULL;
		head=temp;
	}
	else{
		temp->a=b;
		temp->next=NULL;
		head->next=temp;
		head=temp;
	}
	return head;
}
int findmax(int n){
	int i,max=-1,count,vert=0,fl=0;
	node * temp=malloc(sizeof(node));
	for(i=1;i<=n;i++){
		count=0,fl=0;
		if(flag[i]==0){
			temp=br[i];
			while(temp!=NULL){
				if(val[temp->a]==0){
					count++;
				}
				temp=temp->next;
			}
			if(count>max){
				max=count;
				vert=i;
			}
		}
	}
	return vert;
}
int main(){
	int t;
	scanf("%d",&t);
	while(t--){
		int fl=0,n,m,i,u,v,loop=0,ans=0,j=0,max=-1,k=0,l=0;
		scanf("%d%d",&n,&m);
		for(i=1;i<=n;i++){
			ar[i]=ins(ar[i],i);
			br[i]=ar[i];
			out[i]=0;
			val[i]=0;
flag[i]=0;
		}
		for(i=0;i<m;i++){
			scanf("%d%d",&u,&v);
			if(ar[u]==NULL){
				ar[u]=ins(ar[u],v);
				br[u]=ar[u];
				//ar[u]=ins(ar[u],u);
			}
			else{
				ar[u]=ins(ar[u],v);
			}	
			if(ar[v]==NULL){
				ar[v]=ins(ar[v],u);
				br[v]=ar[v];
				//ar[v]=ins(ar[v],v);
			}
			else{
				ar[v]=ins(ar[v],u);
			}
		}
		//for(i=1;i<=n;i++){
		//	ar[i]=ins(ar[i],i);
		//}
		/*for(i=1;i<=n;i++){
		  printf("Vertex of %d -> ",i);
		  node * temp=malloc(sizeof(node));
		  temp=br[i];
		  while(temp!=NULL){
		  printf("%d ",temp->a);
		  temp=temp->next;
		  }
		  printf("\n");
		  }*/
		//i=findmax(n);
		while(loop!=n){
			loop=0;
			i=findmax(n);
			flag[i]=1;
			node * temp=malloc(sizeof(node));
			temp=br[i];
			//ans++;
			//val[i]=1;
			while(temp!=NULL){
				//if(val[temp->a]==0){
				val[temp->a]=1;
				//}
				temp=temp->next;
			}
			//if(val[i]==0){
			//	val[i]=1;
			//}
			ans++;
			//printf("No of vertices : %d i : %d ans : %d\n",loop,i,ans);
			for(i=1;i<=n;i++){
				if(val[i]==1){
					loop++;
				}
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}