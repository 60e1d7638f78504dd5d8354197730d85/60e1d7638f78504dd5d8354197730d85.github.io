#include <stdio.h>
 
#define ROWS 1000
#define COLUMNS 1002
 
inline int isBrick(char reservoir[][COLUMNS], int rowIndex, int columnIndex){
    return (reservoir[rowIndex][columnIndex] == 'B');
}
 
inline int isAir(char reservoir[][COLUMNS], int rowIndex, int columnIndex){
    return (reservoir[rowIndex][columnIndex] == 'A');
}
 
inline int isWater(char reservoir[][COLUMNS], int rowIndex, int columnIndex){
    return (reservoir[rowIndex][columnIndex] == 'W');
}
 
 
 
 int isBrickStable(int brickRowIndex, int brickColumnIndex, char reservoir[][COLUMNS], int height, int width){
    //brick only falls downwards
    if(brickRowIndex != height - 1 && !isBrick(reservoir, brickRowIndex+1, brickColumnIndex)) return 0;
    return 1;
}
 
 int isWaterStable(int waterRowIndex, int waterColumnIndex, char reservoir[][COLUMNS], int height, int width){
     int stable = 1;
     //downward check
     if(waterRowIndex != height - 1 && isAir(reservoir, waterRowIndex + 1, waterColumnIndex))   stable = 0;
 
     //left check
     if(waterColumnIndex == 0 || (waterColumnIndex != 0 && isAir(reservoir, waterRowIndex, waterColumnIndex - 1)))  stable = 0;
 
     //right check
     if(waterColumnIndex == width-1 || (waterColumnIndex != width-1 && isAir(reservoir, waterRowIndex, waterColumnIndex + 1)))  stable = 0;
 
     return stable;
 }
 
char reservoir[1000][1002];
int main(void) {
	int t;
	scanf("%d", &t);
	while(t--){
        int n, m, i, j;
        scanf("%d %d", &n, &m ); getchar();
 
        for(i = 0; i < n; i++){
            scanf("%s",reservoir[i]);
        }
 
        int stable = 1;
        for(i = 0; i < n; i++){
            for(j = 0; j < m; j++) {
                 if(isBrick(reservoir, i, j) && !isBrickStable(i, j, reservoir, n, m)){
                      stable = 0;
                      break;
                 }
            else if(isWater(reservoir, i, j) && !isWaterStable(i, j, reservoir, n, m)){
                stable = 0;
                break;
            }
            }
	}
	puts(((stable)?"yes":"no"));
	}
 
	return 0;
} 