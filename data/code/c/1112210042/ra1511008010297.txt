#include <stdio.h>
#include <stdlib.h>
 
#define MOD 100000007
 
typedef struct _matrix
{
  int n;
  int **arr;
} Matrix;
 
typedef struct _vector
{
  int n;
  int *arr;
} Vector;
 
long long modpow(long long base, long long exp, long long modulus) {
  base %= modulus;
  long long result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % modulus;
    base = (base * base) % modulus;
    exp >>= 1;
  }
  return result;
}
 
Matrix *newMatrix(int n)
{
  int i;
  Matrix *new = (Matrix *)malloc(sizeof(Matrix));
  new->n = n;
  new->arr = (int **)malloc(n * sizeof(int *));
  for (i = 0; i < n; i++)
  {
    new->arr[i] = (int *)calloc(n, sizeof(int));
  }
  return new;
}
 
Vector * newVector(int n)
{
  Vector *new = (Vector *)malloc(sizeof(Vector));
  new->n = n;
  new->arr = (int *)calloc(n, sizeof(int));
  return new;
}
 
 
Matrix *mmul(Matrix *m1, Matrix *m2)
{
  int i, j, k;
  int N = m1->n;
  Matrix *ret = newMatrix(N);
  for (i = 0; i < N; i++)
  {
    for (j = 0; j < N; j++)
    {
      for (k = 0; k < N; k++)
      {
        long long a = m1->arr[k][j];
        long long b = m2->arr[i][k];
        ret->arr[i][j] = (ret->arr[i][j] + (a * b)) % MOD;
      }
    }
  }
  return ret;
}
 
Vector *mvmul(Matrix *m, Vector *v)
{
  int i, j;
  int N = m->n;
  Vector *ret = newVector(N);
  for (i = 0; i < N; i++)
  {
    for (j = 0; j < N; j++)
    {
      long long a = m->arr[i][j];
      long long b = v->arr[j];
      ret->arr[i] = (ret->arr[i] + (a * b)) % MOD;
    }
  }
  return ret;
}
 
void mprt(Matrix *m)
{
  int i, j;
  int N = m->n;
  for (j = 0; j < N; j++)
  {
    for (i = 0; i < N; i++)
    {
      printf("%d ", m->arr[j][i]);
    }
    printf("\n");
  }
  printf("\n");
}
 
Matrix *mpow(Matrix *m, long long e)
{
  if (e <= 1) return m;
  if (e % 2 == 1)
  {
    return mmul(m, mpow(m,e-1));
  }
  Matrix *x = mpow(m, e/2);
  return mmul(x, x);
}
 
int fib1(long long nn)
{
  if (nn == 0) return 0;
 
  Matrix *mt = newMatrix(3);
  mt->arr[0][0] = 0;
  mt->arr[0][1] = 1;
  mt->arr[0][2] = 0;
  mt->arr[1][0] = 0;
  mt->arr[1][1] = 0;
  mt->arr[1][2] = 1;
  mt->arr[2][0] = 6;
  mt->arr[2][1] = MOD-11;
  mt->arr[2][2] = 6;
 
  Vector *ft = newVector(3);
  ft->arr[0] = 0;
  ft->arr[1] = 1;
  ft->arr[2] = 6;
 
  return mvmul(mpow(mt, nn), ft)->arr[0];
}
 
int fib2(long long nn)
{
  if (nn == 0) return 0;
 
  Matrix *mt = newMatrix(4);
  mt->arr[0][0] = 0;
  mt->arr[0][1] = 1;
  mt->arr[0][2] = 0;
  mt->arr[0][3] = 0;
 
  mt->arr[1][0] = 0;
  mt->arr[1][1] = 0;
  mt->arr[1][2] = 1;
  mt->arr[1][3] = 0;
 
  mt->arr[2][0] = 0;
  mt->arr[2][1] = 0;
  mt->arr[2][2] = 0;
  mt->arr[2][3] = 1;
 
  mt->arr[3][0] = MOD-24;
  mt->arr[3][1] = 50;
  mt->arr[3][2] = MOD-35;
  mt->arr[3][3] = 10;
 
  Vector *ft = newVector(4);
  ft->arr[0] = 0;
  ft->arr[1] = 0;
  ft->arr[2] = 3;
  ft->arr[3] = 30;
 
  return mvmul(mpow(mt, nn), ft)->arr[0];
}
 
int main()
{
  int T, t;
  long long x;
 
  scanf("%d", &T);
  for (t = 0; t < T; t++)
  {
    scanf("%lld", &x);
    printf("%d %d\n", fib1(x-1), fib2(x-1));
  }
  return 0;
}
 
int main0()
{
  Matrix *mt = newMatrix(3);
  mt->arr[0][0] = 0;
  mt->arr[0][1] = 1;
  mt->arr[0][2] = 0;
  mt->arr[1][0] = 0;
  mt->arr[1][1] = 0;
  mt->arr[1][2] = 1;
  mt->arr[2][0] = 6;
  mt->arr[2][1] = MOD-11;
  mt->arr[2][2] = 6;
 
  mprt(mpow(mt, 92));
	return 0;
}