#include <stdio.h>
#include <math.h>
#include <stdlib.h>
typedef unsigned long long ll;

long long int count_prime(int p[], long long int a, long long int b)
{
  long long int i=0, j=0;
  long long int count=0;
  for(i=0; i<169; i++)
  {
    for(j=2; j<12; j++)
    {
      long long int val = (long long int)(pow(p[i],p[j]-1));
      if(val > b)
        break;
      if(val>=a && val<=b)
        count++;
    }
  }
  return count;
}

long long int primes(int p[], long long int a, long long int b)
{
  long long int m, n, i, diff, c, x, j;
  char bool2[1000000] = {0};
  m = a;
  n = b;
  diff = n - m;
  
  c = (long long int)(sqrt(n));
  j = 0;
  if(m == 1)
  {
    bool2[0] = 1;
  }
  while(1)
  {
    x = m%p[j];
    if(x == 0)
    {
      if(m == p[j])
        i = p[j];
      else
        i = 0;
    }
    else
    {
      if(m+(p[j]-x) == p[j])
      {
        i =2*p[j]-x;
      }
      else
        i = p[j]-x;
    }
    for( ; i<=diff; i+=p[j])
    {
      bool2[i] = 1;
    }
    j++;
    if((p[j]>c) || (j>78497))
      break;
  }
  long long int count = 0;
  for(i=0; i<=diff; i++)
  {
    if(!bool2[i])
      count++;
  }
  return count;
}

void generate_primes(int p[])
{
  ll n=1000000, m=n/2, i=0, j=0;
  char *sieve = malloc(m);
  p[0] = 2;
  int count=1;
  
  for(i=0; i<m; i++)
    sieve[i] = 1;
  
  for(i=1; i<m; i++)
  {
    for(j=1; j<=(m-i)/(2*i+1); j++)
      sieve[i+j+2*i*j] = 0;
    if(sieve[i])
    {
      p[count] = 2*i+1;
      count++;
    }
  }
  free(sieve);
}

int main()
{
	long long int no_primes=78498;
  	
  	int i, j;
  	int p[no_primes];
  	generate_primes(p);
  
  	long long int t=0;
  	scanf("%lld", &t);
  	for(i=0; i<t; i++)
    {
      long long int a=0, b=0;
      scanf("%lld%lld", &a, &b);
      long long int no_prime=primes(p, a, b);
      long long int start=(long long int)((ceil)(sqrt(a)));
      long long int end=(long long int)((floor)(sqrt(b)));
      long long int no_prime1=primes(p, start, end);
      long long int no_prime2=count_prime(p, a, b);
      long long int total_count=no_prime+no_prime2+no_prime1;
      printf("%lld\n", total_count);
    }
	return 0;
}