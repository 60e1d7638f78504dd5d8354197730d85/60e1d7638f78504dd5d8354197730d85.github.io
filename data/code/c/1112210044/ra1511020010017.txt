#include <string.h>
#include <stdio.h>
#include <math.h>
 
typedef long long ll;
#define MAX 1000010
#define LMT 1010
#define LEN 100010
#define RNG 1000032
 
ll base[MAX/64], segment[RNG/64], primes[LEN];
 
#define sq(x) ((x)*(x))
#define mset(x,v) memset(x,v,sizeof(x))
#define chkC(x,n) (x[n>>6]&(1<<((n>>1)&31)))
#define setC(x,n) (x[n>>6]|=(1<<((n>>1)&31)))
ll power(int x, ll y)
{
    ll temp;
    if( y == 0)
        return 1;
    temp = power(x, y/2);
    if (y%2 == 0)
        return temp*temp;
    else
        return x*temp*temp;
}
 
int isPrime(int p){
	int i;
	for(i=2;i<=sqrt(p);i++){
		if(p%i==0)	return 0;
	}
	return 1;
}
 
/* Generates all the necessary prime numbers and marks them in base[]*/
void sieve()
{
    ll i, j, k;
    for(i=3; i<LMT; i+=2)
        if(!chkC(base, i))
            for(j=i*i, k=i<<1; j<MAX; j+=k)
                setC(base, j);
    for(i=3, j=0; i<MAX; i+=2)
        if(!chkC(base, i))
            primes[j++] = i;
    
}
 
/* Returns the prime-count within range [a,b] and marks them in segment[] */
ll segmented_sieve(ll a, ll b)
{
    ll i, j, k, cnt = (a<=2 && 2<=b)? 1 : 0;
    if(b<2) return 0;
    if(a<3) a = 3;
    if(a%2==0) a++;
    mset(segment,0);
    for(i=0; sq(primes[i])<=b; i++)
    {
        j = primes[i] * ( (a+primes[i]-1) / primes[i] );
        if(j%2==0) j += primes[i];
        for(k=primes[i]<<1; j<=b; j+=k)
            if(j!=primes[i])
                setC(segment, (j-a));
    }
    for(i=0; i<=b-a; i+=2)
        if(!chkC(segment, i))
            cnt++;
    return cnt;
}
int main() {
	sieve();
	int t;
	scanf("%d",&t);
	while(t--){
		ll l,r;
		scanf("%lld%lld",&l,&r);
		ll res=segmented_sieve(l,r);
		ll x=2;
		int p=2;
		while(1){
			x*=2;
			if(x>=l)	break;
			else	p++;
		}
		while(x<=r){
			if(isPrime(p+1)){
				//printf("%lld\n",x);
				res++;
			}
			p++;
			x*=2;
		}
		int i;
		for(i=0;i<(sizeof(primes)/sizeof(int)) && primes[i]<=sqrtl(r);i++){
			ll val=primes[i];
			int p=2;
			while(1){
				val*=primes[i];
				if(val>=l)	break;
				else	p++;
			}
			//printf("For base=%d exp=%lld\n",primes[i],p);
			while(val<=r){
				if(isPrime(p+1)){
					//printf("%lld\n",x);
					res++;
				}
				p++;
				val*=primes[i];
			}
		}
		printf("%lld\n",res);
	}
	return 0;
} 