/* 
Two players are playing a game. The game is played on a sequence of positive integer pairs. The players make their moves alternatively. During his move the player chooses a pair and decreases the larger integer in the pair by a positive multiple of the smaller integer in the pair in such a way that both integers in the pair remain positive. If two numbers in some pair become equal then the pair is removed from the sequence. The player who can not make any move loses (or in another words the player who encounters an empty sequence loses). Given the sequence of positive integer pairs determine whether the first player can win or not (assuming that both players are playing optimally).
Input
 
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
Each test starts with an integer N denoting the number of pairs. Each of the next N lines contains a pair of positive integers.
 
Output
 
For each test case, output a single line containing "YES" if the first player can win and "NO" otherwise.
Constraints
 
1 Ã�Â¢Ã¯Â¿Â½Ã�Â¤ T Ã�Â¢Ã¯Â¿Â½Ã�Â¤ 100
1 Ã�Â¢Ã¯Â¿Â½Ã�Â¤ N Ã�Â¢Ã¯Â¿Â½Ã�Â¤ 100
All other integers are between 1 to 108
The integers in each pair will be different
 
Example
 
Input:
3
1
2 3
2
4 5
5 6
2
2 3
3 5
Output:
NO
NO
YES
*/
 
#include<stdio.h>
unsigned long long temp;unsigned long long possible(unsigned long long x,unsigned long long y)
{
    if(x<y)
    {
        temp=x;x=y;y=temp;}if(x%y==0)return x/y-1;unsigned long long z=possible(y,x%y);unsigned long long sol=x/y;if(sol<=z)return sol-1;else return sol;}int main()
{
    int n,t,i;unsigned long long x,y,ans;scanf("%d",&t);while(t--)
    {
        scanf("%d",&n);ans=0;for(i=1;i<=n;i++)
        {
            scanf("%llu %llu",&x,&y);ans^=possible(x,y);}if(ans)printf("YES\n");else printf("NO\n");}return 0;}
	//	