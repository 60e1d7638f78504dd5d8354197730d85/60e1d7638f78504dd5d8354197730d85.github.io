#include <stdio.h>
#include <stdlib.h>
 
#define N	100000
 
struct A {
	int i, a;
} aa[N];
 
int compare(const void *a, const void *b) {
	struct A *pa = (struct A *) a;
	struct A *pb = (struct A *) b;
 
	return pa->a - pb->a;
}
 
int binsearch(long long *xx, int n, long long x) {
	int l = -1, r = n - 1;
 
	while (r - l > 1) {
		int m = (l + r) / 2;
 
		if (xx[m] >= x)
			r = m;
		else
			l = m;
	}
	return r;
}
 
int ll[N], rr[N], dsu[N], used[N];
 
int find(int x) {
	return dsu[x] < 0 ? x : (dsu[x] = find(dsu[x]));
}
 
void join(int x, int y) {
	x = find(x);
	y = find(y);
	if (x == y)
		return;
	if (dsu[x] < dsu[y])
		dsu[y] = x;
	else if (dsu[x] > dsu[y])
		dsu[x] = y;
	else {
		dsu[x]--;
		dsu[y] = x;
	}
	ll[x] = ll[y] = (ll[x] < ll[y] ? ll[x] : ll[y]);
	rr[x] = rr[y] = (rr[x] > rr[y] ? rr[x] : rr[y]);
}
 
int main() {
	int t;
 
	scanf("%d", &t);
	while (t-- > 0) {
		int i, n, m;
		static long long cnt[N];
 
		scanf("%d%d", &n, &m);
		for (i = 0; i < n; i++) {
			scanf("%d", &aa[i].a);
			aa[i].i = i;
		}
		qsort(aa, n, sizeof(*aa), compare);
		for (i = 0; i < n; i++) {
			ll[i] = rr[i] = i;
			dsu[i] = -1;
			used[i] = 0;
		}
		for (i = 0; i < n; i++) {
			int j = aa[i].i, root, l, r;
 
			used[j] = 1;
			if (j - 1 >= 0 && used[j - 1])
				join(j, j - 1);
			if (j + 1 < n && used[j + 1])
				join(j, j + 1);
			root = find(j);
			l = j - ll[root] + 1;
			r = rr[root] - j + 1;
			cnt[i] = (i == 0 ? 0 : cnt[i - 1]) + (long long) l * r;
		}
		while (m-- > 0) {
			long long p;
 
			scanf("%lld", &p);
			p = (long long) n * (n + 1) / 2 - p + 1;
			i = binsearch(cnt, n, p);
			printf("%d\n", aa[i].a);
		}
    }

	return 0;
}