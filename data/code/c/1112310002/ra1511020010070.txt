#include <stdio.h>
#define inchar getchar_unlocked
inline int inIntPos() {
  int n = 0;
  int ch = inchar();
  while (ch < '0' || ch > '9') ch = inchar();
  while (ch >= '0' && ch <= '9') {
    n = (n << 3) + (n << 1) + (ch - '0');
    ch = inchar();
  }
  return n;
}
void qsort(int* d, int l, int r) {
  int ll, rr, p, a;
  if (r > l) {
    ll = l;
    rr = r;
    p = d[(rr + ll) >> 1];
    while (ll <= rr) {
      while (ll < r && d[ll] < p)
	++ll;
      while (rr > l && d[rr] > p)
	--rr;
      if (ll <= rr) {
	a = d[ll];
	d[ll] = d[rr];
	d[rr] = a;
	++ll;
	--rr;
      }
    }
    if (l < rr)
      qsort(d, l, rr);
    if (ll < r)
      qsort(d, ll, r);
  }
}
 
#define MAX_A 100000
int a[MAX_A];
 
int main() {
  int n,d,i,mi,ma,v,res;
 
  n = inIntPos();
  d = inIntPos();
 
  mi = ma = a[0] = inIntPos();
  for(i=1; i<n; ++i) {
    a[i] = v = inIntPos();
    if(v > ma) ma = v;
    if(v < mi) mi = v;
  }
  if((ma-mi)<=d) {
    printf("%d\n",(n>>1));
    return 0;
  }
  qsort(a,0,n-1);
  res = 0;
  for(i=1; i < n; i+=2) {
    if((a[i]-a[i-1])<=d) ++res;
    else --i;
  }
  printf("%d\n",res);
  return 0;
} 

