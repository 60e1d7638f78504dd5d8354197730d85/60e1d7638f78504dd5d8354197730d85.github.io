#include<stdio.h>
 
 
 
int a[500001]={0};
int b[500001]={0};
int lazy[500001]={0};
 
void build(int node,int start,int end)
{
    if(start==end)
    {
        a[node]=1;
 
    }
    else{
    int mid=(start+end)/2;
    build(2*node+1,start,mid);
    build(2*node+2,mid+1,end);
    a[node]=a[2*node+1]+a[2*node+2];
 
 
}}
 
void update(int node,int start,int end,int l,int r)
{
 
 
 
    if(lazy[node]!=0)
    {
 
 
         int temp=a[node];
        int rem2=end-start+1-temp-b[node];
        if(lazy[node]==1)
        {
 
 
         a[node]=rem2;
            b[node]=temp;}
            if(lazy[node]==2)
            {
                a[node]=b[node];
                b[node]=rem2;
            }
            if(start!=end){
                lazy[2*node+1]=(lazy[2*node+1]+lazy[node])%3;
                lazy[2*node+2]=(lazy[2*node+2]+lazy[node])%3;
 
            }
 
lazy[node]=0;
 
    }
      if(r<start||end<l)
        return ;
    if(start>=l&&end<=r)
    {
        int temp=a[node];
        int x=end-start+1-a[node]-b[node];
        a[node]=x;
        b[node]=temp;
 
        if(start!=end)
        {
              lazy[2*node+1]=(lazy[2*node+1]+1)%3;
                lazy[2*node+2]=(lazy[2*node+2]+1)%3;
        }
        return ;
 
    }
    {
    int mid=(start+end)/2;
    update(2*node+1,start,mid,l,r);
    update(2*node+2,mid+1,end,l,r);
    a[node]=a[2*node+1]+a[2*node+2];
    b[node]=b[2*node+1]+b[2*node+2];
 
 
 
}}
 
int query(int node,int start,int end,int l,int r)
{
    if(r<start||end<l)
        return 0;
         if(lazy[node]!=0)
    {
 
 
         int temp=a[node];
        int rem2=end-start+1-temp-b[node];
        if(lazy[node]==1)
        {
 
 
         a[node]=rem2;
            b[node]=temp;}
            if(lazy[node]==2)
            {
                a[node]=b[node];
                b[node]=rem2;
            }
            if(start!=end){
                lazy[2*node+1]=(lazy[2*node+1]+lazy[node])%3;
                lazy[2*node+2]=(lazy[2*node+2]+lazy[node])%3;
 
            }
 
lazy[node]=0;
 
    }
 
 
    if(l<=start&&end<=r)
        return a[node];
    int mid=(start+end)/2;
    int q=query(2*node+1,start,mid,l,r);
    int s=query(2*node+2,mid+1,end,l,r);
    return (q+s);
 
 
}
int main()
{
int n,q;
 
scanf("%d%d",&n,&q);
 build(0,0,n-1);
while(q--)
{
 
    int x,y,z;
    scanf("%d%d%d",&x,&y,&z);
    if(x==0)
        update(0,0,n-1,y,z);
    else
        printf("%d\n",query(0,0,n-1,y,z));
 
}
return 0;
}