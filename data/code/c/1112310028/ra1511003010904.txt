#include<stdio.h>
#define gc getchar_unlocked
typedef struct node
{
    int val,person,index;
} N;
int read_int()
{
    register int c = gc();
    int x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    return x;
}
void join(N c[], int lo, int mid, int hi)
{
    int i=lo, j=mid+1,k=0;
    N d[100002];
    while(i<=mid && j<=hi)
    {
        if(c[i].val < c[j].val)
        {
            d[k++]=c[i++];
        }
        else{
            d[k++]=c[j++];
        }
    }
    while(i<=mid)
    {
        d[k++]=c[i++];
    }
    while(j<=hi)
    {
        d[k++]=c[j++];
    }
    k=0;
    for(i=lo;i<=hi;i++)
        c[i]=d[k++];
}
void sor(N c[], int lo, int hi)
{
    int mid;
    if(lo<hi)
    {
        mid=(lo+hi)/2;
        sor(c,lo,mid);
        sor(c,mid+1,hi);
        join(c,lo,mid,hi);
    }
}
int main()
{
    int n,x,y,i,profit;
    int a[100002],b[100002];
    N c[100002];
    n=read_int();
    x=read_int();
    y=read_int();
    for(i=0;i<n;i++){
        a[i]=read_int();
    }
    for(i=0;i<n;i++)
    {
        b[i]=read_int();
        if(b[i]>a[i])
        {
            c[i].val=b[i]-a[i];
            c[i].person=1;
        }
        else{
            c[i].val=a[i]-b[i];
            c[i].person=0;
        }
        c[i].index=i;
    }
    sor(c,0,n-1);
    i=n-1;
    profit=0;
    while(x && y && i>=0)
    {
        if(c[i].person){
            profit+=b[c[i].index];
            y--;
        }
        else{
            profit+=a[c[i].index];
            x--;
        }
        i--;
    }
    while(x && i>=0)
    {
        profit+=a[c[i].index];
        i--;
    }
    while(y && i>=0)
    {
        profit+=b[c[i].index];
        i--;
    }
    printf("%d\n",profit);
    return 0;
}
  