#include <stdio.h>
long long int c[100002][4];
void mer(long long int p,long long int q,long long int r)
{   static long long int le[100002][3],ri[100002][3],i,j,k;
    long long int n1=q-p+1,n2=r-q;
    for(i=0;i<n1;i++)
    {
        le[i][0]=c[p+i][0];
        le[i][1]=c[p+i][1];
        le[i][2]=c[p+i][2];
    }
    for(j=0;j<n2;j++)
    {
        ri[j][0]=c[q+j+1][0];
        ri[j][1]=c[q+j+1][1];
        ri[j][2]=c[q+j+1][2];
    }
    le[n1][1]=ri[n2][1]=0;
    i=j=0;
    for(k=p;k<=r;k++)
    {   if(le[i][1]>=ri[j][1])
        {   c[k][0]=le[i][0];
            c[k][1]=le[i][1];
            c[k][2]=le[i][2];
            i++;
        }
        else
        {   c[k][0]=ri[j][0];
            c[k][1]=ri[j][1];
            c[k][2]=ri[j][2];
            j++;
        }
    }
}
void merge_sort(long long int p,long long int r)
{   long long int q;
    if(p<r)
    {   q=(p+r)/2;
        merge_sort(p,q);
        merge_sort(q+1,r);
        mer(p,q,r);
    }
}
 
int main()
{
    static long long int t,m,n,x,y,z,i,j,k,a[50002],b[100002][2],l,r,mid;
    scanf("%lld",&t);
    while(t--)
    {
        scanf("%lld%lld",&n,&m);
        while(n--)
        {
            scanf("%lld",&x);
            a[x]++;
        }
        m=m*2;
        for(i=0;i<m;i=i+2)
        {
            scanf("%lld%lld%lld",&c[i][0],&c[i][1],&c[i][2]);
            c[i+1][0]=c[i][0];
            c[i+1][1]=c[i][2];
            c[i+1][2]=c[i][1];
            c[i+1][3]=c[i][3]=0;
        }
        merge_sort(0,m-1);
        for(i=0;i<m;i++)
        {
//            printf("%d= %d %d %d %d\n",i,c[i][0],c[i][1],c[i][2],c[i][3]);
            x=0;
            if(c[i][3]<=100000)
            {
  //              printf("yes %d= %d %d %d %d\n",i,c[i][0],c[i][1],c[i][2],c[i][3]);
                for(j=i;j<m;j++)
                {
                    if(c[i][1]!=c[j][1])
                        break;
                    if(c[i][0]>=c[j][0] && c[j][3]<=100000)
                    {
                        b[x][0]=c[j][2];
                        b[x][1]=c[j][0];
                        x++;
                        z=a[c[j][2]];
                        a[c[i][1]]+=z;
                        a[c[j][2]]-=z;
                        c[j][3]=1000000;
                    }
                }
                for(j=0;j<x;j++)
                {
    //                printf("%d= %d\n",c[i][1],b[j]);
                    y=b[j][0];
                    l=0;
                    r=m-1;
                    mid=(l+r)/2;
                    while(c[mid][1] != y)
                    {
                        if(c[mid][1]<y)
                            r=mid-1;
                        else
                            l=mid+1;
                        if(l>r)
                            break;
                        mid=(l+r)/2;
                    }
      //              printf("%d= mid = %d\n",c[i][1],c[mid][1]);
                    if(c[mid][1] == y)
                    {
        //            printf("%d= mid1 = %d\n",c[i][1],c[mid][1]);
 
                        for(k=mid;k<m;k++)
                        {
                            if(y != c[k][1])
                                break;
                            if(b[j][1]>=c[k][0] && c[k][3]<=100000)
                            {
                                b[x][0]=c[k][2];
                                b[x][1]=c[k][0];
                                x++;
                                z=a[c[k][2]];
                                a[c[i][1]]+=z;
                                a[c[k][2]]-=z;
                                c[k][3]=1000000;
                            }
                        }
                        for(k=mid-1;k>=0;k--)
                        {
                            if(y != c[k][1])
                                break;
                            if(b[j][1]>=c[k][0] && c[k][3]<=100000)
                            {
                                b[x][0]=c[k][2];
                                b[x][1]=c[k][0];
                                x++;
                                z=a[c[k][2]];
                                a[c[i][1]]+=z;
                                a[c[k][2]]-=z;
                                c[k][3]=1000000;
                            }
                        }
                    }
                }
 
            }
        }
        x=0;
        for(i=1;i<50001;i++)
        {
            x=x+a[i]*i;
            a[i]=0;
        }
        printf("%lld\n",x);
    }
    return 0;
}