#include <stdio.h>
#define size 10001
long long int arr[size];
void swap(long long int *a,long long int *b)
{
    long long int temp;
    temp=*a;
    *a=*b;
    *b=temp;
    
}
long long int partition (long long int arr[], long long int l, long long int h)
{
    long long int x = arr[h];
    long long int i = (l - 1);
    long long int j;
    for ( j = l; j <= h- 1; j++)
    {
        if (arr[j] <= x)
        {
            i++;
            swap (&arr[i], &arr[j]);
        }
    }
    swap (&arr[i + 1], &arr[h]);
    return (i + 1);
}
void quickSort(long long int A[], long long int l, long long int h)
{
    if (l < h)
    {        
        /* Partitioning index */
        long long int p = partition(A, l, h); 
        quickSort(A, l, p - 1);  
        quickSort(A, p + 1, h);
    }
}
int main(void) {
	long long int t,k,n,m,e,i,j,result,a,sum;
	scanf("%lld",&t);
	while(t--)
	 {
	     scanf("%lld %lld %lld %lld",&n,&k,&e,&m);
	     if(n==k)
	      {
	          printf("%d\n",0);
	          continue;
	      }
	     for(i=0;i<n-1;i++)
	      {   sum=0;
	          for(j=0;j<e;j++)
	           {
	               scanf("%lld",&a);
	               sum+=a;
	           }
	          arr[i]=sum;
	      }
	     
	     sum=0; 
	     for(i=0;i<e-1;i++)
	      {scanf("%lld",&a);
	       sum+=a;
	      }
	     quickSort(arr,0,n-2);
	     if(m+sum<=arr[n-k-1])
	     {
	         printf("Impossible\n");
	         continue;
	     }
	     if(arr[n-k-1]>=sum)
	     {result=arr[n-k-1]+1-sum;
	      printf("%lld\n",result); 
	     }
	    else printf("%d\n",0); 
	 }
	return 0;
}
 
 