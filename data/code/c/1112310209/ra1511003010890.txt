#include <stdio.h>
 
void Check(long long int A[],long long int count,long long int k,long long int n,long long int m ){
	long long int ans;
	ans=A[n-k]+1-count;
	if(ans<=0){printf("%d\n",0);}
	else if(ans>m){printf("Impossible\n");}
	else{printf("%lld\n",ans);}
	}
 
void merge(long long int arr[],long long int l,long long int m, long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    /* create temp arrays */
    long long int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
 
void mergeSort(long long int arr[], long long int l,long long int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
       long long int m = l+(r-l)/2;
 
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 
        merge(arr, l, m, r);
    }
}
 
 
 
 
int main(void) {
	int t;
	long long int i,j,k,l,n,m,e;
	
	scanf("%d",&t);
	for(i=0;i<t;i++){
		scanf("%lld%lld%lld%lld",&n,&k,&e,&m);
		long long int temp;
		long long int count=0;
		long long int A[n-1];
		for(j=0;j<n-1;j++){
			A[j]=0;
			
			for(l=0;l<e;l++){scanf("%lld",&temp);A[j]=A[j]+temp;}} 
		for(l=0;l<e-1;l++){scanf("%lld",&temp);count=count+temp;}
		mergeSort(A,0,n-2);
		Check(A,count,k,n-1,m);
	}
	return 0;
}