#include<stdio.h>
#include<stdlib.h>
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}
int main()
{
	int i,t;
	long long int a[101][101];
	for(i=0;i<101;i++)
	{
		a[i][0]=1;
	}
	for(i=1;i<101;i++)
	{
		a[0][i]=0;
	}
	for(i=1;i<101;i++)
	{
		for(t=1;t<101;t++)
		{
			if(i<t)	
			{
				a[i][t]=0;
			}
			else
			{
				a[i][t]=(a[i-1][t-1]+a[i-1][t])%1000000007;
			}
		}
	}
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
		long long int n,k,q,r,power,answer=0,e,mod=1000000007;
		scanf("%lld%lld",&n,&k);
		long long int c[k+1],d[k+1];
		int b[n];
		for(q=0;q<n;q++)
		{
			scanf("%d",&b[q]);
		}
		qsort(b,n,sizeof(int),cmpfunc);
		for(q=0;q<=k;q++)
		{
			c[q]=0;
			d[q]=0;
		}
		for(q=0;q<n;q++)
		{
			power=1;
			for(r=0;r<=k;r++)
			{	
				c[r]=power;
				power=(b[q]*power)%mod;		
			}
			for(r=0;r<=k;r++)
			{
				e=(d[r]*c[r])%mod;
				answer=(answer+(a[k][r]*e)%mod)%mod;
			}
			power=1;
			for(r=0;r<=k;r++)
			{
				c[r]=power;
								power=(-1)*(power*b[q])%mod;	
				power=power+mod;
			}
			for(r=0;r<=k;r++)
			{
				d[r]=(d[r]+c[k-r])%mod;
			}
		}
		answer=(answer*2)%mod;
		printf("%lld\n",answer);
	}
	return 0;
} 