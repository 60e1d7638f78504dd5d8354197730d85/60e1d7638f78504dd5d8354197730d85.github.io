#include <stdio.h>
#define ABS(a) ((a) < 0 ? (0 - (a)) : (a))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define TRUE 1
#define FALSE 0
#define PI 3.14159265358979323846
#define HELL 1000000007
#define INF 1000000000000015
 
#define merge_sort_dtype long long
#define merge_sort_maxsize 100005
 
long long merge_sort_i, merge_sort_j, merge_sort_k, merge_sort_halfsize;
merge_sort_dtype merge_sort_array[merge_sort_maxsize];
 
void merge_sort_recursive(merge_sort_dtype *array, long long size)
{
	if (size == 1)
		return;
	merge_sort_recursive(array, size >> 1);
	merge_sort_recursive(array + (size >> 1), size - (size >> 1));
	merge_sort_halfsize = (size >> 1);
	for (merge_sort_i = 0, merge_sort_j = merge_sort_halfsize,
	    merge_sort_k = 0;
	     merge_sort_i < merge_sort_halfsize && merge_sort_j < size;) {
		if (array[merge_sort_j] < array[merge_sort_i])
			merge_sort_array[merge_sort_k++] =
			    array[merge_sort_j++];
		else
			merge_sort_array[merge_sort_k++] =
			    array[merge_sort_i++];
	}
	while (merge_sort_i < merge_sort_halfsize)
		merge_sort_array[merge_sort_k++] = array[merge_sort_i++];
	for (merge_sort_i = 0; merge_sort_i < merge_sort_k; merge_sort_i++)
		array[merge_sort_i] = merge_sort_array[merge_sort_i];
}
 
long long fast_in()
{
	static long long j_fast;
	static char c_fast;
	j_fast = 0;
	c_fast = getchar_unlocked();
	while (c_fast < '0' || c_fast > '9')
		c_fast = getchar_unlocked();
	while (c_fast >= '0' && c_fast <= '9') {
		j_fast = (j_fast << 1) + (j_fast << 3) + c_fast - '0';
		c_fast = getchar_unlocked();
	}
	return j_fast;
}
 
long long power(long long base, long long power)
{
	long long residue = 1;
	if (!power)
		return 1;
	base %= HELL;
	while (power > 1) {
		if (power & 1) {
			residue *= base;
			residue %= HELL;
			power--;
		}
		power >>= 1;
		base *= base;
		base %= HELL;
	}
	base *= residue;
	base %= HELL;
	return base;
}
 
#define MAXN 100005
#define MAXK 102
 
int main()
{
	long long t, n, k, ans, cur, i, j;
	static long long a[MAXN], dist[MAXN], cdist[MAXN], newpow[MAXK],
	    newpow2[MAXK], powsum[MAXK], fact[MAXK], invfact[MAXK], coeff[MAXK];
 
	for (fact[0] = 1, invfact[0] = 1, i = 1; i < MAXK; i++) {
		fact[i] = i * fact[i - 1];
		fact[i] %= HELL;
		invfact[i] = power(fact[i], HELL - 2);
	}
	t = fast_in();
	while (t--) {
		n = fast_in();
		k = fast_in();
		for (i = 0; i < n; i++)
			a[i] = fast_in();
		merge_sort_recursive(a, n);
		for (i = 0; i <= k; i++)
			coeff[i] =
			    (((fact[k] * invfact[k - i]) % HELL) * invfact[i]) %
			    HELL;
		for (i = 1; i < n; i++)
			dist[i] = a[i] - a[i - 1];
 
		for (i = 1; i <= n; i++)
			cdist[i] = cdist[i - 1] + dist[i];
 
		for (i = 0; i <= k; i++) {
			newpow[i] = 0;
			newpow2[i] = 0;
			powsum[i] = 0;
		}
		newpow2[0] = 1;
		ans = 0;
 
		for (i = 1; i < n; i++) {
			ans += power(dist[i], k);
			cur = 1;
			for (j = 0; j <= k; j++) {
				// printf("%lld\t", ans);
				if ((k - j) & 1)
					ans -= (((coeff[j] * cur) % HELL) * powsum[k - j]) % HELL;
				else
					ans += (((coeff[j] * cur) % HELL) * powsum[k - j]) % HELL;
				ans = (ans + HELL) % HELL;
				newpow[j] = cur;
				cur *= cdist[i];
				cur %= HELL;
			}
 
			for (j = 0; j <= k; j++) {
				powsum[j] = (powsum[j] + newpow2[j]) % HELL;
				newpow2[j] = newpow[j];
			}
		}
 
		printf("%lld\n", (ans << 1) % HELL);
	}
	return 0;
} 