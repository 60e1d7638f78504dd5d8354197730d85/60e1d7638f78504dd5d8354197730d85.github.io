#include <string.h>
#include<stdio.h>
#include<math.h>
 
#define MAX 4665600
#define LMT 21600
#define LEN 483000
#define RNG 1000320
 
unsigned long long base[MAX/64], segment[RNG/64], primes[LEN];
 
#define sq(x) ((x)*(x))
#define mset(x,v) memset(x,v,sizeof(x))
#define chkC(x,n) (x[n>>6]&(1<<((n>>1)&31)))
#define setC(x,n) (x[n>>6]|=(1<<((n>>1)&31)))
 
 long long int power(long int x,long int y)
{
     long long int temp;
    if( y == 0)
        return 1;
    temp = (power(x, y/2));
    if (y%2 == 0)
        return (temp*temp);
    else
        return ((x*temp))*temp;
}
 
void sieve()
{
    unsigned long long  i, j, k;
    for(i=3; i<LMT; i+=2)
        if(!chkC(base, i))
            for(j=i*i, k=i<<1; j<MAX; j+=k)
                setC(base, j);
    for(i=3, j=0; i<MAX; i+=2)
        if(!chkC(base, i))
            primes[j++] = i;
 
 
}
int  segmented_sieve(long long int a, long long int b)
{
     long long int i, j, k, cnt = (a<=2 && 2<=b)? 1 : 0;
    if(b<2) return 0;
    if(a<3) a = 3;
    if(a%2==0) a++;
    mset(segment,0);
    for(i=0; sq(primes[i])<=b; i++)
    {
        j = primes[i] * ( (a+primes[i]-1) / primes[i] );
        if(j%2==0) j += primes[i];
        for(k=primes[i]<<1; j<=b; j+=k)
            if(j!=primes[i])
                setC(segment, (j-a));
    }
    for(i=0; i<=b-a; i+=2)
        if(!chkC(segment, i))
            cnt++;
 
 
    return cnt;
}
int main()
{
    sieve();
   long long  int l;
     long long int r;
   long int test,i,p,q;
   scanf("%ld",&test);
  while(test--)
  {scanf("%lld%lld",&l,&r);
      i=segmented_sieve(l,r);
    long int t=0;
      while(power(2,(primes[t]-1))<=r)
        {if(power(2,(primes[t]-1))>=l)i++;
        t++;
    }
      for(p=0;p<LEN;p++)
      {long int t=0;
         if(primes[p]>r)
            break;
          while(power(primes[p],primes[t]-1)<=r)
          {if(power(primes[p],(primes[t]-1))>=l)
              i++;
              t++;
          } if(t==0)break;
      }
 
 
 
 
 printf("%ld\n",i);
 
}
 
}