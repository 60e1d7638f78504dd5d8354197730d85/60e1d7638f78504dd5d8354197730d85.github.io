#include <stdio.h>
typedef long long int LLI;
typedef long double LLD;
#define inchar getchar_unlocked
inline int inIntPos() {
	int n, ch;
	while ((ch = inchar()) < '0');
	n=(ch-'0');
	while((ch = inchar()) >= '0')
		n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
inline LLI inLLIPos() {
	int ch;
	LLI n;
	while ((ch = inchar()) < '0');
	n = (ch - '0');
	while ((ch = inchar()) >= '0')
		n = (n << 3) + (n << 1) + (ch - '0');
	return n;
}
 
inline int max(int a, int b) { return a<b?b:a; }
inline int min(int a, int b) { return a>b?b:a; }
 
typedef struct Node {
	int s,b;
} Node;
 
const LLI maxValue=1000000000000000000LL;
#define MAX_N 1002
#define MAX_M 1002
Node a[MAX_N][MAX_M];
int n,m;
LLI d;
LLD maxRes,minRes;
 
int calcRec(const int i,const LLD r, const int t, int sell) {
	int j,mm;
	LLD rr;
	if(t>=m) return 1;
	if(sell) {
		rr=r/a[i][t].s;
		sell=0;
	}
	else {
		rr=r*a[i][t].b;
		if(rr<d) return 1;
		if(rr>maxValue) return -1;
		if(rr>maxRes) maxRes=rr;
		sell=1;
	}
 
	if(t+1==m) return 1;
 
	mm=t+1;
	j=i;
	while(j>=0 && mm<m) {
		if(calcRec(j,rr,mm,sell)<0) return -1;
		++mm; --j;
	}
	mm=t+1+1;
	j=i+1;
	while(j<n && mm<m) {
		if(calcRec(j,rr,mm,sell)<0) return -1;
		++mm; ++j;
	}
	return 1;
}
 
LLI count;
LLD dp[MAX_N][MAX_M][2];
int calcRec2(const int i,const LLD r, const int t, int sell) {
	LLD rr;
	if(t>=m) return 1;
	if(dp[i][t][sell]>=r) return 1;
	dp[i][t][sell]=r;
 
	if(sell) {
		rr=r/a[i][t].s;
		if(calcRec2(i,rr,t+1,0)<0) return -1;
	}
	else {
		rr=r*a[i][t].b;
		if(rr>maxValue) return -1;
		if(rr>maxRes) maxRes=rr;
		if(rr>=d) if(calcRec2(i,rr,t+1,1)<0) return -1;
	}
 
	if(i-1>=0) if(calcRec2(i-1,r,t+1,sell)<0) return -1;
	if(i+1<n) if(calcRec2(i+1,r,t+1,sell)<0) return -1;
	if(calcRec2(i,r,t+1,sell)<0) return -1;
 
	return 1;
}
 
int calcRec3(const int i,const LLD r, const int t, int sell) {
	LLD rr;
	++count;
	if(t>=m) return 1;
 
	if(sell) { if(dp[i][t][sell]>=r) return 1; }
	else { if(dp[i][t][sell]>=r) return 1; }
	dp[i][t][sell]=r;
 
	if(sell) {
		rr=r/a[i][t].s;
		if(calcRec3(i,rr,t+1,0)<0) return -1;
	}
	else {
		rr=r*a[i][t].b;
		if(rr<d) return 1;
		if(rr>maxValue) return -1;
		if(rr>maxRes) maxRes=rr;
		if(calcRec3(i,rr,t+1,1)<0) return -1;
	}
	if(calcRec3(i,r,t+1,sell)<0) return -1;
 
	return 1;
}
 
int maxB[MAX_M],minS[MAX_M];
 
LLD calc() {
	int i,j;
	maxRes=(LLD)d;
	minRes=(LLD)d;

	for(i=0; i<n; ++i) {
		for(j=0; j<m; ++j) {
			dp[i][j][0]=0;
			dp[i][j][1]=(LLD)(d-1);
		}
	}
count=0;
	for(i=0; i<n; ++i) if(calcRec2(i,(LLD)d,0,1)<0) return -1;
	return maxRes;
}
 
#include <time.h>
void testIt() {
	int i,j,c;
	LLD res;
	n=100; m=100; d=10;
	for(i=0;i<n;++i) for(j=0; j<m; ++j) { c=1+(i+j)%20; a[i][j].s=c+1+(c%2); a[i][j].b=c; }
 	clock_t start = clock();
	res=calc();
	printf("count=%lld\n",count);
	if(res>=1) printf("%.9Lf\n",res); else printf("Quintillionnaire\n");
	printf("  %.3lf sec.\n",(double) (clock()-start)/CLOCKS_PER_SEC);
}
 
int main() {
	int i,j;
	LLD res;
	n=inIntPos();
	m=inIntPos();
	d=inLLIPos();
 
	for(i=0;i<n;++i) {
		for(j=0; j<m; ++j) {
			a[i][j].s=inIntPos();
			a[i][j].b=inIntPos();
		}
	}
 
	res=calc();
	if(res>=1) printf("%.9Lf\n",res); else printf("Quintillionnaire\n");
	return 0;
}