#include <stdio.h>
typedef long long int LLI;
#define inchar getchar_unlocked
inline int inIntPos() {
	int n, ch;
	while ((ch = inchar()) < '0');
	n=(ch-'0');
	while((ch = inchar()) >= '0')
		n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
 
#define MOD 1000000007
#define MAX_N 100003
int a[MAX_N];
int pow2[MAX_N];
int n;
 
void prepare() {
	int i;
	pow2[0]=1; pow2[1]=2;
	for(i=2; i<MAX_N; ++i) {
		pow2[i]=pow2[i-1]<<1;
		if(pow2[i]>=MOD) pow2[i]-=MOD;
	}
}
 
int calc2() {
	int i,j,k;
	LLI res,r,rr;
 
	res=0;
	for(j=1,k=n; j<=n; ++j,--k) {
		r=(LLI)a[j]*pow2[k];
		if(r>=MOD) r%=MOD;
		res+=r;
		if(res>=MOD) res-=MOD;
	}
	res*=a[0];
	if(res>=MOD) res%=MOD;
 
	for(i=1; i<n; ++i) {
		rr=0;
		for(j=i+1; j<=n; ++j) {
			r=(LLI)a[j]*pow2[n-j+i];
			if(r>=MOD) r%=MOD;
			rr+=r;
			if(rr>=MOD) rr-=MOD;
		}
		res+=(rr*a[i]);
		if(res>=MOD) res%=MOD;
	}
	return (int)res;
}
 
int calc() {
	int i,j,k;
	LLI res,r,s;
 
	s=0;
	for(i=1,k=n; i<=n; ++i,--k) {
		r=a[i]; r*=pow2[k];
		if(r>=MOD) r%=MOD;
		s+=r;
		if(s>=MOD) s-=MOD;
	}
 
	res=a[0];
	res*=s;
	if(res>=MOD) res%=MOD;
 
	for(j=1; j<n; ++j) {
		r=a[j]; r*=pow2[n]; if(r>=MOD) r%=MOD;
		s-=r; if(s<0) s+=MOD;
 
		r=s*a[j]; if(r>=MOD) r%=MOD;
 
		res+=r;
		if(res>=MOD) res-=MOD;
 
		s<<=1; if(s>=MOD) s%=MOD;
	}
	return (int)res;
}
 
int resRec;
LLI calcDirectRec(int l, int r, int i,LLI res) {
	if(i>n) return res;
 
	LLI re,resEnd;
	re=(LLI)l*a[i];
	if(re>=MOD) re%=MOD;
	resEnd=calcDirectRec(a[i],r,i+1,(res+re)%MOD);
 
	re=(LLI)r*a[i];
	if(re>=MOD) re%=MOD;
	resEnd+=calcDirectRec(l,a[i],i+1,(res+re)%MOD);
 
	if(resEnd>=MOD) resEnd%=MOD;
	return resEnd;
}
 
int main() {
	int t,i;
	prepare();
	t=inIntPos();
	while(t--) {
		n=inIntPos();
		for(i=0;i<=n;++i) a[i]=inIntPos();
		//printf("%lld\n",calcDirectRec(a[0],a[0],1,0));
		printf("%d\n",calc());
	}
	return 0;
} 