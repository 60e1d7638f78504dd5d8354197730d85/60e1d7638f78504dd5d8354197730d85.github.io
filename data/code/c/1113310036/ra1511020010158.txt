#include <stdio.h>
#define inchar getchar_unlocked
inline int inIntPos() {
	int n, ch;
	while ((ch = inchar()) < '0');
	n=(ch-'0');
	while((ch = inchar()) >= '0')
		n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
 
#define MAX_N 10001
int a[MAX_N];
int n;
 
#define MAX_PRIM 1230
#define MAX_P 10000
#define MAX_SQRT_P 100
int prim[MAX_PRIM];
int pk;
int c[(MAX_P>>6)+10];
 
#define ga(x) (c[x>>6]&(1<<((x>>1)&31)))
#define sa(x) (c[x>>6]|=(1<<((x>>1)&31)))
 
void calcPrim() {
	int i, j, k;
	for(i = 3; i < MAX_SQRT_P; i+=2) {
		if(!ga(i)) {
			k=i<<1;
			for(j = i*i; j < MAX_P; j+=k) sa(j);
		}
	}
	prim[0]=2; pk=1;
	for(i = 3; i < MAX_P; i+=2) if(!ga(i)) prim[pk++]=i;
	//printf("pk=%d last=%d\n",pk,prim[pk-1]);
}
 
int calc() {
	int i,j,ma,res,p,r,rr;
 
	res=0;
	ma=a[0];
	for(i=1; i<n; ++i) {
		if(a[i]<ma) { res+=ma-a[i]; a[i]=ma; }
		else ma=a[i];
	}
 
	if(a[0]==a[n-1] && a[0]>1) return res;
 
	p=prim[0];
	r=0;
	for(j=0; j<n; ++j) {
		rr=(p-(a[j]%p));
		if(rr!=p) r+=rr;
	}
	ma=r;
	if(ma==0) return res;
 
	for(i=1; i<pk; ++i) {
		p=prim[i];
		r=0;
		for(j=0; j<n; ++j) {
			rr=(p-(a[j]%p));
			if(rr!=p) { r+=rr; if(r>=ma) break; }
		}
		if(ma>r) {
			ma=r;
			if(ma==0) return res;
		}
	}
 
	return (res+ma);
}
 
int main() {
	int t,i;
	calcPrim();
	t=inIntPos();
	while(t--) {
		n=inIntPos();
		for(i=0;i<n;++i) a[i]=inIntPos();
		printf("%d\n",calc());
	}
	return 0;
}
