#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
#define SLEN 40001
#define BUCKETS 1024
#define EPS .00000001
 
typedef struct _pnt
{
  double x;
  double y;
} Pnt;
 
typedef struct _list
{
  Pnt *key;
  int val;
  struct _list *next;
} List;
 
typedef struct _hashmap
{
  unsigned int buck;
  List **buckets;
} HashMap;
 
HashMap *newHashMap(int buck)
{
  HashMap *ret = (HashMap *)malloc(sizeof(HashMap));
  ret->buck = buck;
  ret->buckets = (List **)calloc(buck, sizeof(List *));
  return ret;
}
 
List *newList(Pnt *key, int val)
{
  List *ret = (List *)malloc(sizeof(List));
  ret->key = key;
  ret->val = val;
  ret->next = NULL;
  return ret;
}
 
Pnt *newPnt(double x, double y)
{
  Pnt *ret = (Pnt *)malloc(sizeof(Pnt));
  ret->x = x;
  ret->y = y;
  return ret;
}
 
Pnt *addPnt(Pnt *a, Pnt *b)
{
  return newPnt(a->x + b->x, a->y + b->y);
}
 
Pnt *subPnt(Pnt *a, Pnt *b)
{
  return newPnt(a->x - b->x, a->y - b->y);
}
 
Pnt *rot90Pnt(Pnt *a, int dir)
{
  return newPnt(a->y * dir, -a->x * dir);
}
 
Pnt *smulPnt(Pnt *a, double f)
{
  return newPnt(a->x * f, a->y * f);
}
 
unsigned int int_hash(int num)
{
  return num * 2654435761;
}
 
unsigned int hash(Pnt *key)
{
  unsigned int ret = (10007 + int_hash((int)(key->x))) * 10007 + int_hash((int)(key->y));
  return ret;
}
 
int equalskey(Pnt *k1, Pnt *k2)
{
  if (abs(k1->x-k2->x) < EPS && abs(k1->y - k2->y) < EPS)
    return 1;
  return 0;
}
 
void putIntoHashMap(HashMap *map, Pnt *key, int val)
{
  int idx;
  List *lst;
 
  idx = hash(key) % map->buck;
  lst = newList(key, val);
  lst->next = map->buckets[idx];
  map->buckets[idx] = lst;
}
 
int isInHashMap(HashMap *map, Pnt *key)
{
  int idx;
  List *lst;
 
  idx = hash(key) % map->buck;
  lst = map->buckets[idx];
  while (lst)
  {
    if (equalskey(key, lst->key))
    {
      return 1;
    }
    lst = lst->next;
  }
  return 0;
}
 
List *getOutOfHashMap(HashMap *map, Pnt *key)
{
  int idx;
  List *lst;
 
  idx = hash(key) % map->buck;
  lst = map->buckets[idx];
  while (lst)
  {
    if (equalskey(key,lst->key))
    {
      return lst;
    }
    lst = lst->next;
  }
  return NULL;
}
 
void printHashMap(HashMap *map)
{
  int i;
  List *lst;
 
  for (i = 0; i < map->buck; i++)
  {
    lst = map->buckets[i];
    while (lst)
    {
      printf("(<%.2f,%.2f>-%d) ", lst->key->x, lst->key->y, lst->val);
      lst = lst->next;
      printf("\n");
    }
  }
}
 
void printList(List *lst)
{
  printf("[");
  while (lst)
  {
    printf("(<%.2f,%.2f>-%d) ", lst->key->x, lst->key->y, lst->val);
    if (lst->next) printf(",");
    lst = lst->next;
  }
  printf("]\n");
}
 
 
int main()
{
  int N, i, j, x, y;
  HashMap *s = newHashMap(3000);
  Pnt *ss[2000];
  scanf("%d",&N);
  for (i = 0; i < N; i++)
  {
    scanf("%d %d", &x, &y);
    Pnt *p = newPnt(x, y);
    putIntoHashMap(s, p, 666);
    ss[i] = p;
  }
  int n3=0, n4=0;
  for (i = 0; i < N; i++)
  {
    Pnt *a = ss[i];
    for (j = i + 1; j < N; j++)
    {
      Pnt *b = ss[j];
      Pnt *d = subPnt(b, a);
      Pnt *q = rot90Pnt(d, 1);
      Pnt *p0 = addPnt(a, q);
      Pnt *p1 = addPnt(b, q);
      Pnt *p2 = subPnt(a, q);
      Pnt *p3 = subPnt(b, q);
      if (isInHashMap(s,p0))
      {
        n3 += 1;
        if (isInHashMap(s, p1))
        {
          n4 += 1;
        }
      }
      if (isInHashMap(s,p1))
      {
        n3 += 1;
      }
      if (isInHashMap(s,p2))
      {
        n3 += 1;
        if (isInHashMap(s, p3))
        {
          n4 += 1;
        }
      }
      if (isInHashMap(s,p3))
      {
        n3 += 1;
      }
    }
  }
  if (n4 > 0)
  {
    printf("0\n");
  }
  else if (n3 > 0)
  {
    printf("1\n");
  }
  else if (N > 1)
  {
    printf("2\n");
  }
  else if (N == 1)
  {
    printf("3\n");
  }
  else
  {
    printf("4\n");
  }
  return 0;
}