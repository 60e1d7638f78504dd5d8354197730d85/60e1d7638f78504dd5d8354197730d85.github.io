#include<stdio.h>
void merge(long long int *,long long  int , long long int ,long long int );
void mergeSort(long long int *, long long int , long long int );
int main(void){
	long long int test;
	scanf("%lld",&test);
	while(test--){
		long long int n,k,e,m,i,j,temp;
		scanf("%lld %lld %lld %lld",&n,&k,&e,&m);
		long long int marks[n-1];
		long long int sergey=0;
		for(i=0;i<n-1;i++){
			marks[i]=0;	
			for(j=0;j<e;j++){
				scanf("%lld",&temp);
				marks[i]+=temp;
			}
		}
		for(i=0;i<e-1;i++){
			scanf("%lld",&temp);
			sergey+=temp;
		}
		mergeSort(marks,0,n-2);
		if(marks[k-1]<=sergey+m)
			printf("%lld\n",marks[k-1]-sergey+1);
		else
			printf("Impossible\n");
	}
	return 0;
}
void merge(long long int arr[],long long int l,long long int m,long long int r)
{
    long long int i, j, k;
    long long int n1 = m - l + 1;
    long long int n2 =  r - m;
 
    /* create temp arrays */
    long long int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] >= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there
       are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there
       are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(long long int arr[],long long int l,long long int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        long long int m = l+(r-l)/2;
 
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 
        merge(arr, l, m, r);
    }
}