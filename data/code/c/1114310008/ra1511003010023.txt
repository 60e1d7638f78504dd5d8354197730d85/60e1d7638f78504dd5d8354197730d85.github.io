#include<stdio.h>
 
void merge(long int arr[], long int l, long int m, long int r)
{
    long int i, j, k;
    long int n1 = m - l + 1;
    long int n2 =  r - m;
 
    long int L[n1], R[n2];
 
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(long int arr[], long int l, long int r)
{
    if (l < r)
    {
        long int m = l+(r-l)/2; 
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
 
int main()
{
	long int i=0,n,plates[100001];
        scanf("%ld",&n);
	plates[0]=0;
	for(i=0;i!=n;i++)
	{
		scanf("%ld",&plates[i]);
	}
	mergeSort(plates,0,n-1);
	for(i=1;i!=n;i++)
	{
		plates[i]=plates[i]+plates[i-1];
	}
	long int q,cost,m;
	double f,k,c;
	scanf("%ld",&q);
	while(q!=0)
	{
		cost=0;
		f=n;
		scanf("%lf",&k);		
		c=(f/(k+1));
	//	printf("c is %lf\n",c);
		if((int)c==f)
		{
			c=c-1;
		}
		else
		{
			if(c-(int)c==0)
			{
				c=c-1;
			}
			else
			{
				c=c;
			}
		}
		m=(int)c;
		cost=plates[m];
		printf("%ld\n",cost);
		q=q-1;
	}
	return 0;
}
 