#include <stdio.h>
#include <stdlib.h>
#define inchar getchar_unlocked
inline int inIntPos() {
	int ch,n;
	while((ch = inchar())<'0');
	n =(ch-'0');
	while((ch = inchar())>='0')
		n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
 
int cmpInt( const void * a, const void *b) { return  *(int*)a - *(int*)b;}
inline int min(int a,int b) { return a>b?b:a; }
 
#define MAX_N 100002
int a[MAX_N];
int sum[MAX_N];
int n,k,p;
 
int calc() {
	int res,i,v,s,l,r,mid;
 
	sum[0]=0;
	res=p;
	for(i=1; i<=n; ++i) {
		v=a[i];
		if(v>=p) v%=p;
		if(v==k) return k;
		if(v>k && v<res) res=v;
 
		s=sum[i-1]+v;
		if(s>=p) s-=p;
		if(s==k) return k;
		if(s>k && s<res) res=s;
		sum[i]=s;
	}
 
	qsort(sum,n+1,sizeof(int),cmpInt);
 
	for(i=1; i<=n; ++i) {
		l=0;
		r=i-1;
		while(l<=r) {
			mid=((l+r) >> 1);
			if( (s=sum[i] - sum[mid]) >= k) {
				l=mid+1;
				if(s<res) {
					res=s;
					if(res==k) return res;
				}
			}
			else r=mid-1;
		}
	}
 
	return res;
}
 
int main() {
	int t,i;
	//t=inIntPos();
	//while(t--) {
		n=inIntPos();
		k=inIntPos();
		p=inIntPos();
		for(i=1; i<=n; ++i) a[i]=inIntPos();
		printf("%d\n",calc());
	//}
	return 0;
}