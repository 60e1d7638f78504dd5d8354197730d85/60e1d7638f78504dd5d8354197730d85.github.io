#include<stdio.h>
 
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    /* create temp arrays */
    int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there
       are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there
       are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l+(r-l)/2;
 
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 
        merge(arr, l, m, r);
    }
}
 
int binary(int a[],int req,int i,int j)
{
    if(i>j) return -1;
    int mid=(i+j)/2;
    if(a[mid]==req)
    {
        int pos=mid;
        while(pos>=0 && a[pos]==req) pos--;
        return pos+1;
    }
    if(a[mid]<req)  return binary(a,req,mid+1,j);
    else    return binary(a,req,i,mid-1);
}
int main()
{
    int t,n,f,i,a[10010],req,pos,same,count1=0;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&f);
        for(i=0;i<n;i++)
        {
            scanf("%d",&a[i]);
        }
        mergeSort(a,0,n-1);
        int count=0;
        same=0;
        for(i=n-1;i>0;i--)
        {
            req=a[i];
            count1=0;
            while(req>0)
            {
                pos=binary(a,req,0,n-1);
                if(pos!=-1 && a[i]==a[pos])
                {
                    count+=((i-pos+1)*(i-pos))/2;
                    same=i-pos+1;
                }
                else
                {
                    while(pos!=-1 && pos<i && a[pos]==req)
                    {
                        pos++;
                        count1++;
                    }
                }
                if(req%f==0)
                    req/=f;
                else break;
            }
           // printf("%d %d\n",count1,same);
            count+=count1*same;
            i=i-same+1;
        }
        printf("%d\n",count);
    }
    return 0;
}
 