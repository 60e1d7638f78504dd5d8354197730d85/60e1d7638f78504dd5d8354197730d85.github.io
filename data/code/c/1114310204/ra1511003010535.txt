#include <stdio.h>
 
inline int fast_input(void)
{
	char t;
	int x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
    while(t>=48 && t<=57)
    {
        x=(x<<3)+(x<<1)+t-48;
        t=getchar();
    }
	if(neg)
		x=-x;
	return x;
}
 
inline void fast_output(int x)
{
	char a[12];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}
 
void quicksort(int *x, int *y, int first, int last)
{
    int pivot,j,temp,i;
    if(first<last)
    {
        pivot=first;
        i=first;
        j=last;
        while(i<j)
        {
             while(x[i]<=x[pivot]&&i<last)
                 i++;
             while(x[j]>x[pivot])
                 j--;
             if(i<j)
             {
                 temp=x[i];
                  x[i]=x[j];
                  x[j]=temp;
                 temp=y[i];
                  y[i]=y[j];
                  y[j]=temp;
             }
        }
 
         temp=x[pivot];
         x[pivot]=x[j];
         x[j]=temp;
         temp=y[pivot];
         y[pivot]=y[j];
         y[j]=temp;
         quicksort(x,y,first,j-1);
         quicksort(x,y,j+1,last);
    }
}
 
int BinarySearcher(int *a, int n, int size)
{
    int l=0,r=size-1,mid,flag=0;
    while(l<=r&&!flag)
    {
        mid=(l+r)/2;
        if (a[mid]==n) {flag=1; break;}
        else if (a[mid]>n) r=mid-1;
        else if (a[mid]<n) l=mid+1;
    }
    if (flag==1) return mid;
    else return -1;
}
 
int main()
{
int i,j,k,g,n,x[2001],y[2001],maxcount=2,xans1,yans1,xans2,yans2,flag;
n=fast_input();
for(i=0;i<n;i++)
{
    x[i]=fast_input();
    y[i]=fast_input();
}
quicksort(x,y,0,n-1);
if (n==0) {fast_output(4); return 0;}
if (n==1) {fast_output(3); return 0;}
for(i=0;i<n;i++)
{
    for(j=i+1;j<n;j++)
    {
        flag=0;
        if ((x[i]+x[j]-y[i]+y[j])%2==0&&(y[i]+y[j]+x[i]-x[j])%2==0)
        {
        xans1=(x[i]+x[j]-y[i]+y[j])/2;
        yans1=(y[i]+y[j]+x[i]-x[j])/2;
        //printf("%d %d %d %d %d %d\n",xans1,yans1,x[i],y[i],x[j],y[j]);
        if (BinarySearcher(x,xans1,n)!=-1)
        {
            k=BinarySearcher(x,xans1,n);
            for(g=k;x[g]==xans1;g--) if (y[g]==yans1) {maxcount=3; flag=1; break;}
            for(g=k+1;x[g]==xans1;g++) if (y[g]==yans1) {maxcount=3; flag=1; break;}
        }
        }
        if ((x[i]+x[j]-y[j]+y[i])%2==0&&(y[i]+y[j]+x[j]-x[i])%2==0)
        {
        xans2=(x[i]+x[j]-y[j]+y[i])/2;
        yans2=(y[i]+y[j]+x[j]-x[i])/2;
        //printf("%d %d %d %d %d %d\n",xans2,yans2,x[i],y[i],x[j],y[j]);
        if (BinarySearcher(x,xans2,n)!=-1)
        {
            k=BinarySearcher(x,xans2,n);
            for(g=k;x[g]==xans2;g--)
                if (y[g]==yans2)
                {
                if (flag) {maxcount=4; fast_output(0); return 0;}
                else {maxcount=3; break;}
                }
            for(g=k+1;x[g]==xans2;g++)
                if (y[g]==yans2)
                {
                if (flag) {maxcount=4; fast_output(0); return 0;}
                else {maxcount=3; break;}
                }
        }
        }
    }
}
    fast_output(4-maxcount);
return 0;
}