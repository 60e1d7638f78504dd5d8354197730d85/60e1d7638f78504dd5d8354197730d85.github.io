#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define M 3000000
int arr[10000],brr[10000],hash[9000010][2],ans1[10000],ans2[10000];
int binsea(int array[],int n,int num,int first,int last)
{
        int middle;
        middle = (first+last)/2;
        while(first <= last)
        {
               if ( array[middle] < num )
                      first = middle + 1;
               else if ( array[middle] == num )
               {
                      return 1;
               }
               else
                      last = middle - 1;
               middle = (first + last)/2;
        }
        if ( first > last )
        return -1;
}
void merge(int fir[],int sec[],int k,int l)
{
     int mid,i,j,c=k;
     mid=(k+l)/2;
     i=k;j=mid+1;
     while(i<=mid && j<=l)
     {
           if(fir[i]>=fir[j])
           {
               ans1[c]=fir[j];
               ans2[c]=sec[j];
               c++;j++;
           }
           else
            {
                ans1[c]=fir[i];
                ans2[c]=sec[i];
                c++;i++;
            }
     }
     while(i<=mid)
     {
                ans1[c]=fir[i];
                ans2[c]=sec[i];
                c++;i++;
     }
     while(j<=l)
     {
               ans1[c]=fir[j];
               ans2[c]=sec[j];
               c++;j++;
     }
     for(i=k;i<=l;i++)
     {
           		fir[i]=ans1[i];
           		sec[i]=ans2[i];
     }
}
void mergesort(int fir[],int sec[],int i,int j)
{
     int mid;
     if(i>=j)
           return;
     else
     {
           mid=(i+j)/2;
           mergesort(fir,sec,i,mid);
           mergesort(fir,sec,mid+1,j);
           merge(fir,sec,i,j);
     }
}
void merge1(int fir[],int k,int l)
{
     int mid,i,j,c=k;
     mid=(k+l)/2;
     i=k;j=mid+1;
     while(i<=mid && j<=l)
     {
           if(fir[i]>=fir[j])
           {
               ans1[c]=fir[j];
               c++;j++;
           }
           else
            {
                ans1[c]=fir[i];
                c++;i++;
            }
     }
     while(i<=mid)
     {
                ans1[c]=fir[i];
                c++;i++;
     }
     while(j<=l)
     {
               ans1[c]=fir[j];
               c++;j++;
     }
     for(i=k;i<=l;i++)
     {
           		fir[i]=ans1[i];
     }
}
void mergesort1(int fir[],int i,int j)
{
     int mid;
     if(i>=j)
           return;
     else
     {
           mid=(i+j)/2;
           mergesort1(fir,i,mid);
           mergesort1(fir,mid+1,j);
           merge1(fir,i,j);
     }
}
int main()
{
	int n,a,b,c,d,e,f,g,h,i,j,val=2,fl=0,sta;
	scanf("%d",&n);
	if(n==0)
	{
		printf("4");
		return 0;
	}
	if(n==1)
	{
		scanf("%d %d",&a,&b);
		printf("3");
		return 0;
	}
	for(i=1;i<=n;i++)
	{
		scanf("%d %d",&arr[i],&brr[i]);
	}
	mergesort(arr,brr,1,n);
	for(i=0;i<=9000010;i++)
	{	hash[i][0]=-1;
		hash[i][1]=-1;
	}
	a=arr[1];
	hash[arr[1]+M][0]=1;
	b=1;
	for(i=2;i<=n;i++)
	{
		if(arr[i]==a)
			continue;
		hash[a+M][1]=i-1;
		mergesort1(brr,b,i-1);
		b=i;
		a=arr[i];	
		hash[a+M][0]=i;
	}
	hash[a+M][1]=i-1;
	mergesort1(brr,b,n);
	for(i=1;i<n;i++)
	{
		for(j=i+1;j<=n;j++)
		{
			a=arr[i];b=brr[i];
			c=arr[j];d=brr[j];
			if(a==c && b==d)
				continue;	
			e=b-d+a;f=c-a+b;
			g=b-d+c;h=c-a+d;
			fl=0;
			if(hash[e+M][0]!=-1)
			{
				sta=binsea(brr,n,f,hash[e+M][0],hash[e+M][1]);
				if(sta==1)
					fl=1;
			}
			if(hash[g+M][0]!=-1)
			{
				sta=binsea(brr,n,h,hash[g+M][0],hash[g+M][1]);
				if(sta==1)
				{
					if(fl==1)
					{
						val=0;
						puts("0");
						return 0;
					}
					else
						val=1;
				}	
			}
			if(fl==1)
				val=1;
			e=d-b+a;f=a-c+b;
			g=d-b+c;h=a-c+d;
			fl=0;
			if(hash[e+M][0]!=-1)
			{
				sta=binsea(brr,n,f,hash[e+M][0],hash[e+M][1]);
				if(sta==1)
					fl=1;
			}
			if(hash[g+M][0]!=-1)
			{
				sta=binsea(brr,n,h,hash[g+M][0],hash[g+M][1]);
				if(sta==1)
				{
					if(fl==1)
					{
						val=0;
						printf("0");
						return 0;
					}
					else
						val=1;
				}	
			}
			if(fl==1)
				val=1;		
		}
	}
	if(val==1)
		printf("1");
	else
	{
		printf("2");	
	}	
	return 0;
} 