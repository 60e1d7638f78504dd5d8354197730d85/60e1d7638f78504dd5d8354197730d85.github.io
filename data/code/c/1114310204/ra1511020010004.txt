    #include<stdio.h>
    #include<stdlib.h>
    #define shift 1000000
    int cmp(const void *a,const void *b)
    {
    	int *pa=(int *)a;
    	int *pb=(int *)b;
    	if(pa[0]>pb[0])
    	{
    		return 1;
    	}
    	else if(pa[0]<pb[0])
    	{
    		return -1;
    	}
    	else
    	{
    		return pa[1]-pb[1];
    	}
    }
    int max(int a,int b)
    {
    	if(a>b)
    		return a;
    	return b;
    }
    int pos_st[2000001],pos_end[2000001],arr[2000][2],x[2000001],y[2000001];
    int bs(int px,int py)
    {
    	int l,u,mid;
    	l=pos_st[px],u=pos_end[px];
    	while(l<=u)
    	{   
    		mid=(l+u)/2;
    		if(py==arr[mid][1])
    		{   
    			return 1;
    			break;
    		}   
    		else if(py<arr[mid][1])
    		{   
    			u=mid-1;
    		}   
    		else
    			l=mid+1;
    	}   
    	return 0;
    }
     
    int main()
    {
    	int n,i,j,k,xc,yc,xe,ye,px1,py1,px2,py2,cnt,fl,cnt1;
    	scanf("%d",&n);
    	cnt=0;
    	for(i=0;i<n;i++)
    	{
    		scanf("%d%d",&j,&k);
    		j+=shift;
    		k+=shift;
    //		printf("%d %d\n",j,k);
    		x[j]=1;
    		y[k]=1;
    		arr[i][0]=j;
    		arr[i][1]=k;
    	}
    	if(n==0)
    		printf("4\n");
    	else if(n==1)
    		printf("3\n");
    	else if(n==2)
    		printf("2\n");
    	else
    	{
    		qsort(arr,n,2*(sizeof(int)),cmp);
    		pos_st[arr[0][0]]=0;
    		for(i=1;i<n;i++)
    		{
    			if(arr[i][0]!=arr[i-1][0])
    			{
    				pos_end[arr[i-1][0]]=i-1;
    				pos_st[arr[i][0]]=i;
    			}
    		}
    		pos_end[arr[i-1][0]]=i-1;
    		for(i=0;i<n;i++)
    		{
    			for(j=i+1;j<n;j++)
    			{
    				cnt1=0;
    				xc=(arr[i][0]+arr[j][0]);
    				yc=(arr[i][1]+arr[j][1]);
    				xe=(arr[i][0]-arr[j][0]);
    				ye=(arr[i][1]-arr[j][1]);
    				if((((xc+ye)%2)==0)&& (((yc+xe)%2)==0))
    				{
    					px1=(xc+ye)/2;
    					px2=(xc-ye)/2;
    					py1=(yc-xe)/2;
    					py2=(yc+xe)/2;
    					if((px1>=0 && px1<=2000000) && (py1>=0 && py1<=2000000) && (x[px1]!=0) && (y[py1]!=0))
    					{
    						fl=bs(px1,py1);
    						if(fl==1)
    						{
    							cnt1++;
    						}
    					}
    					if((px2>=0 && px2<=2000000) && (py2>=0 && py2<=2000000) && (x[px2]!=0) && (y[py2]!=0))
    					{
    						fl=bs(px2,py2);
    						if(fl==1)
    						{
    							cnt1++;
    						}
    					}
    					cnt=max(cnt,cnt1);
    				}
    			}
    		}
    		cnt=2-cnt;
    		printf("%d\n",cnt);
    	}
    	return 0;
    }
     