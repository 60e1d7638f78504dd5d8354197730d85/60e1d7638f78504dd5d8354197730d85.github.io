/* A Naive recursive implementation of LCS problem */
#include<stdio.h>
#include<string.h>
int max(int a, int b);
 
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
   if (m == 0 || n == 0)
     return 0;
   if (X[m-1] == Y[n-1])
     return 1 + lcs(X, Y, m-1, n-1);
   else
     return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
}
 
/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a > b)? a : b;
}
 
/* Driver program to test above function */
int main()
{
  char X[100],Y[100],A[100],B[100];
  int i,c1=0,c2=0;
  scanf("%s",X);
  scanf("%s",Y);
  for(i=0;X[i]!='\0';i++)
  {
    if(X[i] != 'a' && X[i] != 'e' && X[i] != 'i' && X[i] != 'o' && X[i] != 'u')
      A[c1++] = X[i];
  }
  for(i=0;Y[i]!='\0';i++)
  {
    if(X[i] != 'a' && X[i] != 'e' && X[i] != 'i' && X[i] != 'o' && X[i] != 'u')
      B[c2++] = Y[i];
  }
  int m = strlen(A);
  int n = strlen(B);
 
  printf("%d", lcs( A, B, m, n ) );
 
  return 0;
}