#include<stdio.h>
#include<stdlib.h>
#define mod 1000000007
 
typedef struct segtree{
    long long fibb[2][2];
    struct segtree *left,*right;
}sgt;
 
long long num[1000005],temp_fibb[2][2],temp_fibb1[2][2],temp_fibb2[2][2];
 
/*function Matrix_ModExp(Matrix A, int b, int c)
    if (b == 0):
        return I  // The identity matrix
    if (b mod 2 == 1):
        return (A * Matrix_ModExp(A, b - 1, c)) mod c
    Matrix D := Matrix_ModExp(A, b / 2, c)
    return (D * D) mod c*/
 
void matadd(long long  a[][2],long long  b[][2],long long c[][2])//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            c[i][j]=(c[i][j]+a[i][j]+b[i][j])%mod;
        }
    }
 
}
 
void matmult(long long  a[][2],long long  b[][2],long long c[][2])//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            c[i][j]=0;
            for(k=0;k<2;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j]);
                c[i][j]=c[i][j]%mod;
            }
        }
    }
 
}
 
void matpow(long long Z[][2],int n,long long ans[][2])
//find ( Z^n )% M and return result in ans
{
 
    long long temp[2][2];
    //assign ans= the identity matrix
    ans[0][0]=1;
    ans[1][0]=0;
    ans[0][1]=0;
    ans[1][1]=1;
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp);
            for(i=0;i<2;i++)
                for(j=0;j<2;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp);
        for(i=0;i<2;i++)
            for(j=0;j<2;j++)
                Z[i][j]=temp[i][j];
 
 
        n=n/2;
    }
    return;
 
}
 
void findFibonacci(long long n,long long result[][2])
{
 
    long long fib;
    //if(n>2)
    {
        long long int Z[2][2]={{1,1},{1,0}};//,result[2][2];//modify matrix a[][] for other recurrence relations
        matpow(Z,n,result);
        fib=result[1][0]*1;    //final multiplication of Z^(n-2) with the initial terms of the series
    }
    /*else{
        fib=1;
        result[0][0]=result[0][1]=result[1][0]=1;
        result[1][1]=0;
    }*/
    //return fib;
    return;
}
 
sgt* construct(int l,int r,int n){
    sgt* node = (sgt*)malloc(sizeof(sgt));
    node->left=node->right=NULL;
    if(l>=0 && l!=r)
        node->left=construct(l,l+(r-l)/2,n);
    if(r<n && l!=r)
        node->right=construct(l+(r-l)/2+1,r,n);
    if(node->left==NULL && node->right==NULL){
        findFibonacci(num[l],node->fibb);
    }
    else{
        matmult(node->left->fibb,node->right->fibb,node->fibb);
        matadd(node->left->fibb,node->right->fibb,node->fibb);
    }
    return node;
}
 
void inorder(sgt* root){
    if(root==NULL)
        return;
    inorder(root->left);
    printf("%lld ||%lld\n",root->fibb[0][0],root->fibb[0][1]);
    printf("%lld ||%lld\n",root->fibb[1][0],root->fibb[1][1]);
    inorder(root->right);
}
 
void update(sgt* root,int a,int b,int pos){
    if(a==b){
        findFibonacci(num[a],root->fibb);
    }
    else{
        if(a<=pos&&pos<=a+(b-a)/2){
            update(root->left,a,a+(b-a)/2,pos);
        }
        else{
            update(root->right,a+(b-a)/2+1,b,pos);
        }
        matmult(root->left->fibb,root->right->fibb,root->fibb);
        matadd(root->left->fibb,root->right->fibb,root->fibb);
    }
    return;
}
 
void find_fibb(sgt* root,int l,int r,int a,int b){
    if(root==NULL){
        return;
    }
    if(r<a || l>b){
        return;
    }
    else if(l<=a && b<=r){
        matmult(temp_fibb,root->fibb,temp_fibb1);
        temp_fibb2[1][1]=temp_fibb2[0][1]=temp_fibb2[1][0]=temp_fibb2[0][0]=0;
        matadd(temp_fibb,root->fibb,temp_fibb2);
        temp_fibb[1][1]=temp_fibb[0][1]=temp_fibb[1][0]=temp_fibb[0][0]=0;
        matadd(temp_fibb1,temp_fibb2,temp_fibb);
        return;
    }
    find_fibb(root->left,l,r,a,a+(b-a)/2);
    find_fibb(root->right,l,r,a+(b-a)/2+1,b);
    return;
}
 
int main(){
    int t,n,m,a,b,i,j,k;
    char line[50],ch;
    sgt* root = NULL;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
        scanf("%lld",&num[i]);
    root = construct(0,n-1,n);
    //inorder(root);
    for(i=0;i<m;i++){
        scanf("%s%d%d",line,&a,&b);
        ch=line[0];
        //printf("%c\n",ch);
        if(ch=='Q'){
            temp_fibb[1][1]=temp_fibb[0][1]=temp_fibb[1][0]=temp_fibb[0][0]=0;
            temp_fibb1[1][1]=temp_fibb1[0][1]=temp_fibb1[1][0]=temp_fibb1[0][0]=0;
            temp_fibb2[1][1]=temp_fibb2[0][1]=temp_fibb2[1][0]=temp_fibb2[0][0]=0;
            find_fibb(root,a-1,b-1,0,n-1);
            printf("%lld\n",temp_fibb[0][1]);
        }
        else if(ch=='C'){
            num[a-1]=b;
            update(root,0,n-1,a-1);
            //root = construct(0,n-1,n);
            //inorder(root);
        }
    }
    return 0;
}
 