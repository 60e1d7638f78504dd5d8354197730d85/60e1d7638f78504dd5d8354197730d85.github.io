#include <stdio.h>
int val=1000000007;
long long temp[2][2],s[31][2][2];
long long res[2][2];
void mul(long long a[2][2],long long b[2][2],long long res[2][2])
 {
   	temp[0][0]=((a[0][0]*b[0][0])%val+(a[0][1]*b[1][0])%val)%val;
   	temp[0][1]=((a[0][0]*b[0][1])%val+(a[0][1]*b[1][1])%val)%val;
   	temp[1][0]=((a[1][0]*b[0][0])%val+(a[1][1]*b[1][0])%val)%val;
   	temp[1][1]=((a[1][0]*b[0][1])%val+(a[1][1]*b[1][1])%val)%val;
   	res[0][0]=temp[0][0];
   	res[0][1]=temp[0][1];
   	res[1][0]=temp[1][0];
   	res[1][1]=temp[1][1];
 }
 void power(long long b)
  {
  	res[0][0]=res[1][1]=1;
   	res[0][1]=res[1][0]=0;
   	int si = 0;
       while(b)
       {
           if(b & 1)
               mul(res,s[si],res);
           b >>= 1;
   		si++;
       }
   }
   struct num
   {
        int a,b;
    };
    typedef struct num num;
    void finds()
    {
        s[0][0][0]=s[0][0][1]=s[0][1][0]=1;
    	s[0][1][1]=0;
    	int i;
    	for(i=1; i<31;i++)
            mul(s[i-1],s[i-1],s[i]);
    }
    void combine(int s1,int s3,int s2,int s4,int *val1,int *val2)
    {
        if(s2==s4 && s2==-1)
        {
            *val1=s1;*val2=s3;
        }
        else if(s1==s3 && s1==-1)
        {
            *val1=s2;*val2=s4;
        }
        else
        {
        int t1=((long long)s1+s2)%val;
        t1=((long long)t1+((long long)s2*s3)%val)%val;
        int t2=((long long)s2+s4)%val;
        t2=((long long)t2*s1)%val;
        *val1=((long long)t1+t2)%val;
        t1=((long long)s3+s4)%val;
        t1=((long long)t1+((long long)s1*s2)%val+((long long)s3*s4)%val)%val;
        *val2=t1;
        }
    }
    void build(num tree[],int arr[],int node,int start,int end)
    {
        if(start==end)
        {
            power(arr[start]);
            tree[node].a=res[1][0];
            power(arr[start]-1);
            tree[node].b=res[1][0];
        }
        else
        {
            int mid=(start+end)/2;
            build(tree,arr,2*node,start,mid);
            build(tree,arr,2*node+1,mid+1,end);
            int val1,val2;
            int s1=tree[2*node].a,s3=tree[2*node].b;
            int s2=tree[2*node+1].a,s4=tree[2*node+1].b;
            combine(s1,s3,s2,s4,&val1,&val2);
            tree[node].a=val1;
            tree[node].b=val2;
        }
    }
    void query(num tree[],int node,int start,int end,int l,int r,int *val1,int *val2)
    {
        if(r<start || end<l)
        {
            *val1=*val2=-1;
            return;
        }    
        if(l<=start && end<=r)
        {
            *val1=tree[node].a,*val2=tree[node].b;
            return; 
        }
        int mid=(start+end)/2;
        int val3,val4,val5,val6;
        query(tree,2*node,start,mid,l,r,&val3,&val4);
        query(tree,2*node+1,mid+1,end,l,r,&val5,&val6);
        combine(val3,val4,val5,val6,val1,val2);
        return;
    }
    void update(num tree[],int node,int start,int end,int idx,int val1,int val2)
    {
        if(start==end)
        {
            tree[node].a=val1,tree[node].b=val2;
        }
        else
        {
            int mid=(start+end)/2;
            if(start<=idx && idx<=mid)
            update(tree,2*node,start,mid,idx,val1,val2);
            else update(tree,2*node+1,mid+1,end,idx,val1,val2);
        int s1=tree[2*node].a,s3=tree[2*node].b;
        int s2=tree[2*node+1].a,s4=tree[2*node+1].b;
        int val3,val4;
        combine(s1,s3,s2,s4,&val3,&val4);
        tree[node].a=val3;
        tree[node].b=val4;
        }
    }
    int main()
    {
    	finds();
    	int N,M,i,j,n1,n2;
    	char ch;
    	scanf("%d %d ",&N,&M);
    	int size;
    	for(i=1;i<N;i*=2);
    	size=2*i;
    	num tree[size];
    	int arr[N];
    	for(i=0;i<N;++i)
    		scanf("%d ",&arr[i]);
    	build(tree,arr,1,0,N-1);
    	for(i=0;i<M;i++)
    	{
    	    scanf("%c %d %d ",&ch,&n1,&n2);
    	    if(ch=='C')
    	    {
    	     power(n2);
    	     int a=res[1][0];
    	     power(n2-1);
    	     int b=res[1][0];
    	     update(tree,1,0,N-1,n1-1,a,b);
    	    }
    	    else
    	    {
    	        int val1,val2;
    	        query(tree,1,0,N-1,n1-1,n2-1,&val1,&val2);
    	        printf("%d\n",val1);
    	    }
    	}
    	return 0;
 }   