#include<stdio.h>
#include<ctype.h>
#define mod 1000000007
 
long long int tree[270000][2][2],arr[100001],zmatrix[100001][2][2];
 
void identity(long long k,long long c[][2][2])
{
	c[k][0][0]=1;
	c[k][0][1]=0;
	c[k][1][0]=0;
	c[k][1][1]=1;
}
 
void matrix_power(long long n,long long a[][2][2]){
 
	long long int x=arr[n],y,z,v,w;
	identity(n,a);
	int j=0;
	long long int b[2][2]={1,1,1,0};
	while(x!=0){
	if(x%2==1){
	v=a[n][0][0];
	w=a[n][0][1];
	y=a[n][1][0];
	z=a[n][1][1];
	a[n][0][0]=(v*b[0][0]+w*b[1][0])%mod;
	a[n][0][1]=(v*b[0][1]+w*b[1][1])%mod;
	a[n][1][0]=(y*b[0][0]+z*b[1][0])%mod;
	a[n][1][1]=(y*b[0][1]+z*b[1][1])%mod;
	}
	v=b[0][0];
	w=b[0][1];
	y=b[1][0];
	z=b[1][1];
	b[0][0]=(v*v+w*y)%mod;
	b[0][1]=(v*w+w*z)%mod;
	b[1][0]=(y*v+z*y)%mod;
	b[1][1]=(y*w+z*z)%mod;
	x=x/2;
	}
	a[n][0][0]=(a[n][0][0]+1)%mod;
	a[n][0][1]=(a[n][0][1]+0)%mod;
	a[n][1][0]=(a[n][1][0]+0)%mod;
	a[n][1][1]=(a[n][1][1]+1)%mod;
}
 
void build_seg(long long k,long long i,long long j){
 
	if(i>j){
	identity(k,tree);
	return;
	}
	else if(i==j){
	tree[k][0][0]=zmatrix[i][0][0];
	tree[k][0][1]=zmatrix[i][0][1];
	tree[k][1][0]=zmatrix[i][1][0];
	tree[k][1][1]=zmatrix[i][1][1];
	return;
	}
	else{
	build_seg(2*k+1,i,(i+j)/2);
	build_seg(2*k+2,(i+j)/2+1,j);
	tree[k][0][0]=(tree[2*k+1][0][0]*tree[2*k+2][0][0]+tree[2*k+1][0][1]*tree[2*k+2][1][0])%mod;
	tree[k][0][1]=(tree[2*k+1][0][0]*tree[2*k+2][0][1]+tree[2*k+1][0][1]*tree[2*k+2][1][1])%mod;
	tree[k][1][0]=(tree[2*k+1][1][0]*tree[2*k+2][0][0]+tree[2*k+1][1][1]*tree[2*k+2][1][0])%mod;
	tree[k][1][1]=(tree[2*k+1][1][0]*tree[2*k+2][0][1]+tree[2*k+1][1][1]*tree[2*k+2][1][1])%mod;
	return;
	}
}
 
void update(long long x,long long y,long long i,long long j,long long k,long long temp_matrix[2][2]){
 
	if(i>j || x>j || x<i)
	return;
	else if(i==j && i==x){
	zmatrix[i][0][0]=temp_matrix[0][0];
	zmatrix[i][0][1]=temp_matrix[0][1];
	zmatrix[i][1][0]=temp_matrix[1][0];
	zmatrix[i][1][1]=temp_matrix[1][1];
	tree[k][0][0]=zmatrix[i][0][0];
	tree[k][0][1]=zmatrix[i][0][1];
	tree[k][1][0]=zmatrix[i][1][0];
	tree[k][1][1]=zmatrix[i][1][1];
	return;
	}
 
	else{
	update(x,y,i,(i+j)/2,2*k+1,temp_matrix);
	update(x,y,(i+j)/2+1,j,2*k+2,temp_matrix);
	tree[k][0][0]=(tree[2*k+1][0][0]*tree[2*k+2][0][0]+tree[2*k+1][0][1]*tree[2*k+2][1][0])%mod;
	tree[k][0][1]=(tree[2*k+1][0][0]*tree[2*k+2][0][1]+tree[2*k+1][0][1]*tree[2*k+2][1][1])%mod;
	tree[k][1][0]=(tree[2*k+1][1][0]*tree[2*k+2][0][0]+tree[2*k+1][1][1]*tree[2*k+2][1][0])%mod;
	tree[k][1][1]=(tree[2*k+1][1][0]*tree[2*k+2][0][1]+tree[2*k+1][1][1]*tree[2*k+2][1][1])%mod;
	return;
	}
}
 
void query(long long l,long long r,long long i,long long j,long long k,long long temp[2][2]){
 
	if(r<i||i>j||l>j)
	return;
	else if(i>=l && j<=r){
	long long a=temp[0][0],b=temp[0][1],c=temp[1][0],d=temp[1][1];
	temp[0][0]=(a*tree[k][0][0]+b*tree[k][1][0])%mod;
	temp[0][1]=(a*tree[k][0][1]+b*tree[k][1][1])%mod;
	temp[1][0]=(c*tree[k][0][0]+d*tree[k][1][0])%mod;
	temp[1][1]=(c*tree[k][0][1]+d*tree[k][1][1])%mod;
	return;
	}
	else{
	query(l,r,i,(i+j)/2,2*k+1,temp);
	query(l,r,(i+j)/2+1,j,2*k+2,temp);
	return;
	}
}
 
int main(){
	long long n,l,i,r,new_arr[2][2],m;
	char c;
	scanf("%lld %lld",&n,&m);
	for(i=1;i<=n;i++){
	scanf("%lld",&arr[i]);
	matrix_power(i,zmatrix);
	}
	build_seg(0,1,n);
	while(m--){
	new_arr[0][0]=1;
	new_arr[0][1]=0;
	new_arr[1][0]=0;
	new_arr[1][1]=1;
	scanf(" %c ",&c);
	scanf("%lld %lld",&l,&r);
	if(c=='Q'){
	query(l,r,1,n,0,new_arr);
	printf("%lld\n",new_arr[1][0]);
	}
	else if(c=='C'){
	arr[0]=r;
	matrix_power(0,zmatrix);
	new_arr[0][0]=zmatrix[0][0][0];
	new_arr[0][1]=zmatrix[0][0][1];
	new_arr[1][0]=zmatrix[0][1][0];
	new_arr[1][1]=zmatrix[0][1][1];
	update(l,r,1,n,0,new_arr);
	}	
}
return 0;
}