#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
 
int read(){
char c=getchar_unlocked();
int n=0;
while(!(c>='0' && c<='9'))
c=getchar_unlocked();
while(c>='0' && c<='9'){
n=n*10 + (c-'0');
c=getchar_unlocked();
}
return n;
}
 
void merge(int arr[],int min,int mid,int max)
{
  int tmp[1000];
  int i,j,k,m; 
  j=min;
  m=mid+1;
  for(i=min; j<=mid && m<=max ; i++)
  {
	  if(arr[j]<=arr[m])
     {
         tmp[i]=arr[j];
         j++;
     }
     else
     {
         tmp[i]=arr[m];
         m++;
     }
  }
  if(j>mid)
  {
     for(k=m; k<=max; k++)
     {
         tmp[i]=arr[k];
         i++;
     }
  }
  else
  {
     for(k=j; k<=mid; k++)
     {
        tmp[i]=arr[k];
        i++;
     }
  }
  for(k=min; k<=max; k++)
     arr[k]=tmp[k];
}
 
void sort_1(int arr[],int min,int max)
{
 int mid;
 if(min<max)
 {
   mid=(min+max)/2;
   sort_1(arr,min,mid);
   sort_1(arr,mid+1,max);
   merge(arr,min,mid,max);
 }
}
 
int main(){
int n,m,k,t,i,j,l,max;
int *arr,*arr1,*temp,**cost,**point;
long sum;
t=read();
while(t--){
    n=read();m=read();k=read();
    arr=(int *)malloc(n*sizeof(int));
	arr1=(int *)malloc(n*sizeof(int));
	temp=(int *)malloc(n*sizeof(int));
    cost=(int **)malloc(n*sizeof(int *));
    point=(int **)malloc(n*sizeof(int *));
    for(i=0;i<n;i++){
        cost[i]=(int *)malloc(m*sizeof(int));
	    point[i]=(int *)malloc(m*sizeof(int));
    }
    sum=0;
    for(i=0;i<n;i++){
        arr[i]=read();
    }
	for(i=0;i<n;i++){
		for(j=0;j<m;j++){
            point[i][j]=read();
			if(j+1==arr[i]){
				arr1[i]=point[i][j];
                sum+=(long)arr1[i];
			}
		}
	}
	l=0;
	for(i=0;i<n;i++){
		max=-1;
		for(j=0;j<m;j++){
            cost[i][j]=read();
			if(point[i][j]-cost[i][j]>arr1[i]){
                if(point[i][j]-cost[i][j]-arr1[i]>max)
					max=point[i][j]-cost[i][j]-arr1[i];
			}
		}
		if(max!=-1)
			temp[l++]=max;
	}
	sort_1(temp,0,l-1);
	j=0;
	for(i=l-1;i>=0 && j<k;i--,j++)
        sum+=(long)temp[i];
	printf("%ld\n",sum);
	free(arr);
	free(arr1);
	free(point);
	free(cost);
	free(temp);
}
return 0;
}  