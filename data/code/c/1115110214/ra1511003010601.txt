#include <stdio.h>
#include <string.h>
#define MAXN 50
#define MOD 1000000007LL
#define INF
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
 int i,a;
#define REP(i,n) for(i=0;i<(n);i++)
#define FOR(a,b,c) for(a=b;a<=(c);a++)
#define FORD(a,b,c) for (a=b;a>=(c);a--)
#define VAR(v,n) __typeof(n) v=(n)
#define ALL(c) c.begin(),c.end()
#define FOREACH(i,c) for(VAR(i,(c).begin());i!=(c).end();i++)
 
typedef long long LL;  
 
int test,n,m;
LL wek[MAXN],pomwek[MAXN],ma[MAXN][MAXN],pomm[MAXN][MAXN];
 
void dfs(int r, int c, int i) {
	if (c < 0 || c >= m) return;
	if (r == 3) {
		++ma[i][c];
		return;
	}
	if (r == 1) {
		dfs(r+1,c-1,i);
		dfs(r+1,c+1,i);
	}
	if (r == 2) {
		dfs(r+1,c-1,i);
		dfs(r+1,c,i);
		dfs(r+1,c+1,i);
	}
}
 
int main(){
  int j,k;
	scanf("%d",&test);
	while (test--) {
		scanf("%d%d",&n,&m);
		REP(i,m) REP(j,m) ma[i][j] = 0;
		REP(i,m) {
			dfs(1,i,i);
		}
		REP(i,m) wek[i] = 1;
		--n;
		int pom = n/2;
		while (pom) {
			if (pom&1) {
				REP(i,m) REP(j,m) pomwek[i] = (pomwek[i]+wek[j]*ma[i][j])%MOD;
				REP(i,m) {
					wek[i] = pomwek[i];
					pomwek[i] = 0;
				}
			}
			
			REP(i,m) REP(j,m) REP(k,m) {
				pomm[i][j] = (pomm[i][j] + ma[i][k]*ma[k][j])%MOD;
			}
			REP(i,m) REP(j,m) {
				ma[i][j] = pomm[i][j];
				pomm[i][j] = 0;
			}
			pom /= 2;
		}
		if (n&1) {
			REP(i,m-1) {
				pomwek[i+1] += wek[i];
			}
			FOR(i,1,m-1) {
				pomwek[i-1] += wek[i];
			}
			REP(i,m) {
					wek[i] = pomwek[i];
					pomwek[i] = 0;
			}
		}
		LL res = 0;
		REP(i,m) res += wek[i];
		printf("%lld\n",res%MOD);
	}
	return 0;
}
 