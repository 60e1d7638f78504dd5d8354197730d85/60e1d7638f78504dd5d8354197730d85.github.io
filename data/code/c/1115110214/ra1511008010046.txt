#include <stdio.h>
#include <memory.h>
const int MD = 1000000000 + 7;
const long long MD2 = 1000000000 + 7;
 
long long f[66][66][33];
long long ans[66][66], c[66][66];
int main()
{
    int tc;
    scanf("%d", &tc);
    while (tc--) {
    int n, m;
    scanf("%d%d", &n, &m);
    if (m == 1) {
    //    printf("%d\n", (n == 1));
      //  continue;
    }
    memset(f, 0, sizeof(f));
    int i;
    for (i = 1; i <= m; i++) {
        f[i][m + i + 1][0] = 1;
        if(i != 1)
        f[i][m + i - 1][0] = 1;
        f[i + m][i - 1][0] = 1;
        f[i + m][i][0] = 1;
        if (i != m)
        f[i + m][i + 1][0] = 1;
    }
    int d,j,u;
    for (d = 0; d <= 31; d++) {
        for (i = 1; i <= m + m; i++) {
            for (j = 1; j <= m + m; j++) {
                for (u = 1; u <= m + m; u++) {
                    f[i][j][d + 1] += (f[i][u][d] * f[u][j][d]);
                    if (f[i][j][d + 1] >= MD2) f[i][j][d + 1] -= MD2;
                }
                f[i][j][d + 1] %= MD;
            }
        }
    }
    n--;
    int steps = (n);
    memset(ans, 0, sizeof(ans));
    for (i = 1; i <= m + m; i++) {
        ans[i][i] = 1;
    }
      int ii;
    for ( ii = 0; ii <= 30; ii++) {
        if ((1 << ii) & steps) {
        for ( i = 1; i <= m + m; i++) {
            for (j = 1; j <= m + m; j++) {
                c[i][j] = 0;
                for ( u = 1; u <= m + m; u++) {
                    c[i][j] += (ans[i][u] * f[u][j][ii]);
                    if (c[i][j] >= MD2) c[i][j] -= MD2;
                }
                c[i][j] %= MD;
            }
        }
        for ( i = 1 ; i <= m + m; i++) {
            for ( j = 1; j <= m + m; j++) {
                ans[i][j] = c[i][j];
               // printf("%d ", ans[i][j]);
            }
           // printf("\n");
        }
        }
    }
    long long res = 0;
    for (i = 1; i <= m; i++) {
        for (j = 1;  j <= m; j++) {
            int k = (n % 2);
            res = (res + ans[i][j + m * k]) % MD;
        }
    }
    printf("%lld\n", res);
    }
    return 0;
}
 