#include <stdio.h>
#define MAXN 13
//Comb(13,4)
#define NSTATES 715
int n;
char puzzle[MAXN+1];
int States[NSTATES];
int ParentIndex[NSTATES];
int ParentMove[NSTATES];
const int BITS[] = {1,2,4,8,16,32,64,128,256,512,1024,2048,4096};
const int Moves[6][7] = {{10,12,9,6,4,7,10},
{10,7,4,6,9,12,10},
{5,3,6,9,11,8,5},
{5,8,11,9,6,3,5},
{4,6,3,1,0,2,4},
{4,2,0,1,3,6,4}};
const int GoalState = 0x258;
int GetChild( int move, int parent )
{
int chld = parent,i;
for( i = 0; i < 6; i++ )
{
if( ( parent & BITS[Moves[move][i+1]] ) != 0 )
chld |= BITS[Moves[move][i]];
else
chld &= (~BITS[Moves[move][i]]);
}
return chld;
}
int count;
int FindIndex( int chld )
{
int i;
for( i = count - 1; i >= 0; i-- )
if( chld == States[i] )
return i;
return -1;
}
void GenerateStates( void )
{
int ptr,move,chld;
States[0] = GoalState;
ptr = 0;
count = 1;
while( ptr < count )
{
for( move = 0; move < 6; move++ )
{
chld = GetChild( move, States[ptr] );
if( FindIndex( chld ) == -1 )
{
States[count] = chld;
ParentIndex[count] = ptr;
ParentMove[count++] = move ^ 0x1;
}
}
ptr++;
}
}
int ConvertToInt( char puzzle[] )
{
int i,state = 0;
for( i = 0; i < MAXN; i++ )
{
if( puzzle[i] == '1' )
state |= BITS[ MAXN - i - 1 ];
}
return state;
}
void FindPath( int state )
{
int i=0,j,path[12],index;
index = FindIndex( state );
while( index != 0 )
{
path[i++] = ParentMove[index];
index = ParentIndex[index];
}
printf("%d\n",i);
for(j=0;j<i;j++)
printf("%d %d\n",(path[j]>>1),(path[j]%2));
}
int main(void)
{
int i,t;
scanf("%d",&t);
GenerateStates();
while(t--)
{
scanf("%s",puzzle);
FindPath( ConvertToInt(puzzle) );
}
return 0;
} 