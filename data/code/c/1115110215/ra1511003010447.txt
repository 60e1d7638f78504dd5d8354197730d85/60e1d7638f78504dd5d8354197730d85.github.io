#include <stdio.h>
#include<string.h>
char puzzle[14];
int state[715],parentI[715],parentMove[715],BITS[]={1,2,4,8,16,32,64,128,256,512,1024,2048,4096},moves[6][7]={{10,12,9,6,4,7,10},{10,7,4,6,9,12,10},{5,3,6,9,11,8,5},{5,8,11,9,6,3,5},{4,6,3,1,0,2,4},{4,2,0,1,3,6,4}};
int goal=0x258,count;

int getChild(int move,int parent){
	int child,i;
  child=parent;
  for(i=0;i<6;i++){
  if((parent & BITS[moves[move][i+1]])!=0)
    child|=BITS[moves[move][i]];
    else
      child &= (~BITS[moves[move][i]]);
    
  }
  return child;
}

int findIndex(int child){

int i;
  for(i=count-1;i>=0;i--){
  
  if(child==state[i])
  return i;
  }
return -1;
}

void generateState(){
int ptr,move,child;
  state[0]=goal;
  ptr=0;
  count=1;
  while(ptr<count){
  for(move=0;move<6;move++){
  child=getChild(move,state[ptr]);
    if(findIndex(child)==-1){
    state[count]=child;
      parentI[count]=ptr;
      parentMove[count++]=move^0x1;
    }
  }
    ptr++;
  }
}

int toInt(char puzzle[]){
int i,stateNum=0;
  
  for(i=0;i<13;i++){
  if(puzzle[i]=='1')
    stateNum|=BITS[13-i-1];
  }
  return stateNum;
}

void findPath(int stateNum){

int i=0,j,path[12],index;

index=findIndex(stateNum);
while(index!=0){
path[i++]=parentMove[index];
  index=parentI[index];
}
printf("%d\n",i);
  for(j=0;j<i;j++){
  printf("%d %d\n",(path[j]>>1),(path[j]%2));
  }
}

int main(){
int i,t;
  scanf("%d",&t);
  generateState();
  while(t--){
  
  scanf("%s",puzzle);
  findPath(toInt(puzzle));
  }
return 0;
}