#include <stdio.h>
 
#define get getchar_unlocked
 
inline int input() {
	int n = 0, s = 1;
	char p = get();
 
	while((p < '0' || p > '9') && p != EOF && p != '-')
		p = get();
 
	if(p == '-'){ s = -1, p = get(); }
 
	while(p >= '0' && p <= '9') {
		n = (n << 3) + (n << 1) + (p - '0');
		p = get();
	}
	return n*s;
}
 
void merge(int* array, int low, int mid, int high){
	int i = low, j = mid + 1, k = 0, temp[100];
 
	while(i <= mid && j <= high) {
		if(array[i] <= array[j]) {
			temp[k++] = array[i++];
		} else {
			temp[k++] = array[j++];
		}
	}
 
	while(i <= mid){
		temp[k++] = array[i++];
	}
 
	while(j <= high){
		temp[k++] = array[j++];
	}
 
	for (i = low; i <= high; i++)
	{
		array[i] = temp[i-low];
	}
}
 
void mergesort(int* array, int low, int high){
	if(low < high){
		int mid = (low + high)/2;
		mergesort(array, low, mid);
		mergesort(array, mid + 1, high);
		merge(array, low, mid, high);
	}
}
 
int main() {
	int t, n, a[100], i, k;
	t = input();
	while(t--) {
		n = input();
		for(i = 0; i<n; i++)
			a[i] = input();
		k = input();
		k = a[k-1];
		//printf("%d\n", k);
		mergesort(a, 0, n-1);
		//printf("%d\n", a[1]);
		for(i = 0; i<n; i++) {
			if(a[i] == k) {
				printf("%d\n", i+1);
				break;
			}
		}
	}
	return 0;
} 