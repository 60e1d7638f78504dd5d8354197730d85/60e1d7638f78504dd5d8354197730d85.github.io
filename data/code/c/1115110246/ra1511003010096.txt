#include<stdio.h>
#define size 262143
#define MOD(a) (((a)<(0))?((-1)*(a)):(a))
struct tree
{
    int c0,c1,c2;
}a[size];
int arr[100001],lazy[size];
char str[100001];
void build_tree(int p,int r,int node)
{
    int q=(p+r)>>1,n=node<<1;
    if(p==r)
    {
        if(arr[p]==0)
            a[node].c0=1;
        else if(arr[p]==1)
            a[node].c1=1;
        else
            a[node].c2=1;
        return ;
    }
    build_tree(p,q,n+1);
    build_tree(q+1,r,n+2);
    a[node].c0=a[n+1].c0+a[n+2].c0;
    a[node].c1=a[n+1].c1+a[n+2].c1;
    a[node].c2=a[n+1].c2+a[n+2].c2;
}
void update_tree(int p,int r,int i,int j,int val,int node)
{
    int y,t1,t2,t3,q=(p+r)>>1,n=node<<1;
    if(lazy[node]!=0)
    {
        y=lazy[node];
        if(y>0)
        {
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t3;
                a[node].c1=t1;
                a[node].c2=t2;
            }
        }
        else
        {
            y=MOD(y);
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t2;
                a[node].c1=t3;
                a[node].c2=t1;
            }
        }
        if(p!=r)
        {
            lazy[n+1]+=lazy[node];
            lazy[n+2]+=lazy[node];
        }
        lazy[node]=0;
    }
    if((p>j)||(r<i))
        return ;
    if((p>=i)&&(r<=j))
    {
        y=val;
        if(y>0)
        {
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t3;
                a[node].c1=t1;
                a[node].c2=t2;
            }
        }
        else
        {
            y=MOD(y);
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t2;
                a[node].c1=t3;
                a[node].c2=t1;
            }
        }
        if(p!=r)
        {
            lazy[n+1]+=val;
            lazy[n+2]+=val;
        }
        return ;
    }
    update_tree(p,q,i,j,val,n+1);
    update_tree(q+1,r,i,j,val,n+2);
    a[node].c0=a[n+1].c0+a[n+2].c0;
    a[node].c1=a[n+1].c1+a[n+2].c1;
    a[node].c2=a[n+1].c2+a[n+2].c2;
}
struct tree query_tree(int p,int r,int i,int j,int node)
{
    int q=(p+r)>>1,n=node<<1,y;
    int t1,t2,t3;
    struct tree n1,n2,n3;
    if(lazy[node]!=0)
    {
        y=lazy[node];
        if(y>0)
        {
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t3;
                a[node].c1=t1;
                a[node].c2=t2;
            }
        }
        else
        {
            y=MOD(y);
            y=y%3;
            while(y--)
            {
                t1=a[node].c0;
                t2=a[node].c1;
                t3=a[node].c2;
                a[node].c0=t2;
                a[node].c1=t3;
                a[node].c2=t1;
            }
        }
        if(p!=r)
        {
            lazy[n+1]+=lazy[node];
            lazy[n+2]+=lazy[node];
        }
        lazy[node]=0;
    }
    if((p>j)||(r<i))
    {
        struct tree tmp;
        tmp.c0=tmp.c1=tmp.c2=0;
        return tmp;
    }
    if((p>=i)&&(r<=j))
    {
        return a[node];
    }
    n1=query_tree(p,q,i,j,n+1);
    n2=query_tree(q+1,r,i,j,n+2);
    n3.c0=n1.c0+n2.c0;
    n3.c1=n1.c1+n2.c1;
    n3.c2=n1.c2+n2.c2;
    return n3;
}
int main()
{
    int n,m,i,x,y,pval,nval,val;
    long long int n1,n2,n3,sum;
    scanf("%d%d",&n,&m);
    scanf("%s",str);
    arr[0]=0;
    arr[1]=(str[0]-'0')%3;
    for(i=1;i<n;i++)
        arr[i+1]=(arr[i]+(str[i]-'0')%3)%3;
    build_tree(0,n,0);
    while(m--)
    {
        scanf("%d%d%d",&i,&x,&y);
        if(i==1)
        {
            pval=(str[x-1]-'0')%3;
            str[x-1]=y+'0';
            nval=y%3;
            if(((nval-pval)==1)||((nval-pval)==-2))
                val=1;
            else
                val=-1;
            if(nval==pval)
                continue;
            update_tree(0,n,x,n,val,0);
        }
        else
        {
            struct tree ans;
            ans=query_tree(0,n,x-1,y,0);
            n1=ans.c0;
            n2=ans.c1;
            n3=ans.c2;
            sum=((n1-1)*(n1))/2+((n2-1)*(n2))/2+((n3-1)*(n3))/2;
            printf("%lld\n",sum);
        }
    }
    return 0;
}
