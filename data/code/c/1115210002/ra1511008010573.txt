#include<stdio.h>
 int max(int a, int b) { return (a > b)? a : b; }
 long  knapSack(int W, int wt[], int val[], int n)
{
   int i;
   long w;
   long  K[n+1][W+1];
 
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
 
int main()
{
    int t;
    scanf("%d",&t);
    while(t)
    { t--;
      int n;
       scanf("%d",&n);
       int i,capacity;
       scanf("%d",&capacity);
       int weightofindividualitems[n],valueofindividualitems[n];
       for(i=0;i<n;i++)
       {
          scanf("%d",&weightofindividualitems[i]); 
       }
       
       for(i=0;i<n;i++)
       {
          scanf("%d",&valueofindividualitems[i]); 
       }
       
     long  ans=knapSack(capacity,weightofindividualitems,valueofindividualitems,n);
        printf("%ld\n",ans);
    }
    
    return 0;
}