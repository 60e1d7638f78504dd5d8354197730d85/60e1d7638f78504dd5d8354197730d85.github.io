#include<stdio.h>
#include<stdlib.h>
int sort(int **a,int p,int q);
int partition(int **a,int p,int q);
long long int max(long long int a,long long int b);
int main(){
    //sort in increasing order of profit
    int i,j,k,n,w,c,d,p;
    scanf("%d%d",&n,&w);
    int **a = (int**)malloc(sizeof(int*)*n);
    for(i=0;i<n;i++)
        a[i] = (int*)malloc(sizeof(int)*2);
    k=0;
    for(i=0;i<n;i++){
        scanf("%d%d",&c,&d);
        if(d<=w){
            a[k][0] = c;
            a[k][1] = d;
            k++;
        }
    }
    n = k;
    if(n==0){
        printf("0\n");
        return(0);
    }
    sort(a,0,n-1);
    long long int prime[11];
    prime[0] = 1;
    prime[1] = 2;prime[2] = 3;prime[3] = 5;prime[4] = 7;prime[5] = 11;prime[6] = 13;prime[7] = 17;prime[8] = 19;
    prime[9] = 23;prime[10] = 29;
    long long int ***dp = (long long int ***)malloc(sizeof(long long int**)*n);
    for(i=0;i<n;i++){
        dp[i] = (long long int **)malloc(sizeof(long long int*)*(w+1));
        for(j=0;j<=w;j++)
            dp[i][j] = (long long int*)malloc(sizeof(long long int)*11);
    }
 
    //start dp initialization
    for(i=0;i<=10;i++)
        dp[0][0][i]= 0;
 
    for(i=0;i<=w;i++){
        for(j=0;j<=10;j++){
            if(i < a[0][1])
               dp[0][i][j] = 0;
            else
               dp[0][i][j] = prime[j]*((long long int)a[0][0]);
               //if(i<=1 )
                //printf("dp[0][%d][%d] = %lld\n",i,j,dp[0][i][j]);
        }
    }
    //printf("is error hee\n");
    for(i=0;i<n;i++){
        for(j=0;j<=10;j++){
            dp[i][0][j] = 0;
 
            //printf("%d %d\n",i,j);
        }
    }
    //printf("is it comint here\n");
    //end dp initialization
    //dp[i][j][p] = max { dp[i-1][j][p] , dp[i-1][j-a[i][0]][p] + a[i][1] , dp[i-1][j-a[i][0]][p-1] + prime[p]*a[i][1] }
    //dp[i][j][0] = max { dp[i-1][j][0] , dp[i-1][j-a[i][0]][0] + a[i][1] }
    //printf("dp[0][1][10]=%lld,dp[0][0][10]=%lld\n",dp[0][1][10],dp[0][0][10]);
    for(i=1;i<n;i++){
        for(j=1;j<=w;j++)
        {
            if(j - a[i][1] >= 0)
                dp[i][j][0] = max(dp[i-1][j][0] , dp[i-1][j-a[i][1]][0] + (long long int)a[i][0]);
            else
                dp[i][j][0] = dp[i-1][j][0];
            for(p=1;p<=10;p++){
                if(j - a[i][1] >= 0)
                    dp[i][j][p] = max(max(dp[i-1][j][p] ,dp[i-1][j-a[i][1]][p-1]+((long long int)a[i][0])*prime[p]),dp[i-1][j-a[i][1]][p]+(long long int)a[i][0]);
                else
                    dp[i][j][p] = dp[i-1][j][p];
                //printf("dp[%d][%d][%d] = %lld\n",i,j,p,dp[i][j][p]);
 
            }
        }
    }
    printf("%lld\n",dp[n-1][w][10]);
 
    return(0);
}
 
int sort(int **a,int p,int q){
    int x;
    if(p < q){
       x = partition(a,p,q);
       sort(a,p,x-1);
       sort(a,x+1,q);
    }
  return 0;
}
 
int partition(int **a,int p,int q){
    int i,j,temp;
    i = p-1;
    for(j=p;j<=q;j++){
        if(a[j][0] <= a[q][0]){
            i++;
            temp = a[i][0];
            a[i][0] = a[j][0];
            a[j][0] = temp;
 
            temp = a[i][1];
            a[i][1] = a[j][1];
            a[j][1] = temp;
 
        }
    }
    return(i);
}
long long int max(long long int a,long long int b) {
    if(a < b)
        return(b);
    return(a);
 
}