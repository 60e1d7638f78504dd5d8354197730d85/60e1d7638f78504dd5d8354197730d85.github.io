#include <stdio.h>
#define SIZE 1000000
 
typedef struct max_heap{
	long long arr[SIZE];
	long long size;
}MAX_HEAP;
 
long long parent(long long index){
	return (index-1)/2;
}
 
void swap(long long arr[], long long a, long long b){
	long long temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}
 
void maxHeapify(MAX_HEAP *m1, long long index){
	
	long long left_child = 2*index+1, right_child = 2*index+2,largest = index;
	
	if((left_child < m1->size) && (m1->arr[left_child] > m1->arr[largest])){
		largest = left_child;
	}
	
	if((right_child < m1->size) && (m1->arr[right_child] > m1->arr[largest])){
		largest = right_child;
	}
	
	if(largest != index){
		swap(m1->arr,index,largest);
		maxHeapify(m1,largest);
	}
}
 
void createMaxHeap(MAX_HEAP *m1){
	long long i, size = m1->size;
	for(i = size/2; i >= 0; i--){
		maxHeapify(m1,i);
	}
}
 
long long getMaximum(MAX_HEAP *m1){
	return m1->arr[0];
}
 
void changeValue(MAX_HEAP *m1){
	(m1->arr[0])--;
	maxHeapify(m1,0);
}
 
int main(){
	
	long long m,n,i,x,sum = 0;
	scanf("%lld %lld",&m,&n);
	
	MAX_HEAP m1;
	m1.size = m;
	
	for(i = 0; i < m; i++){
		scanf("%lld",&(m1.arr[i]));
	}
	

	createMaxHeap(&m1);
	

	
		x = getMaximum(&m1);
	
	while((x > 0) && (n--)){
		sum += x;
		changeValue(&m1);
		x = getMaximum(&m1);
	}
	
	printf("%lld",sum);
		
    return 0;
}