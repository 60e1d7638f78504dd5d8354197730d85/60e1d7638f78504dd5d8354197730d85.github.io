#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
 
#define MAX 2503
#define IN 99999999
typedef struct tpoint {
  int x;
  int y;
}pt;
 
pt tree[MAX];
int cost[MAX][MAX]={{0,0}};
 
inline dist(pt *a, pt *b){
  return (a->x-b->x)*(a->x-b->x) + (a->y-b->y)*(a->y-b->y);
}
 
 
int dijsktra(int cost[][MAX],int source,int target, int N)
{
    int dist[MAX],prev[MAX],selected[MAX]={0},i,m,min,start,d,j;
    char path[MAX];
    for(i=0;i< N;i++)
    {
        dist[i] = IN;
        prev[i] = -1;
    }
    start = source;
    selected[start]=1;
    dist[start] = 0;
    while(selected[target] ==0)
    {
        min = IN;
        m = 0;
        for(i=0;i< N;i++)
        {
            d = dist[start] +cost[start][i];
            if(d< dist[i]&&selected[i]==0)
            {
                dist[i] = d;
                prev[i] = start;
            }
            if(min>dist[i] && selected[i]==0)
            {
                min = dist[i];
                m = i;
            }
        }
        start = m;
        selected[start] = 1;
    }
    start = target;
    j = 0;
    while(start != -1)
    {
        path[j++] = start+65;
        start = prev[start];
    }
    path[j]='\0';
    return dist[target];
}
 
main(){
  int T, i,N, j;
  pt a, b;
  scanf("%d", &T);
  while(T--){
    scanf("%d", &N);
    for(i = 0; i<N; i++){
      scanf("%d %d", &(tree[i].x), &(tree[i].y));
      for(j=0; j<i; j++){
	cost[j][i] = cost[i][j] = dist(&(tree[i]), &(tree[j]));
      }
    }
    scanf("%d %d", &(a.x), &(a.y));
    scanf("%d %d", &(b.x), &(b.y));
    for(i=0; i<N; i++){
      cost[i][N] = cost[N][i] = dist(&tree[i], &a);
      cost[i][N+1] = cost[N+1][i] = dist(&tree[i], &b);
    }
    cost[N+1][N] = cost[N][N+1] = dist(&a, &b);
    printf("%d\n", dijsktra(cost, N, N+1, N+2));
  }
}
 