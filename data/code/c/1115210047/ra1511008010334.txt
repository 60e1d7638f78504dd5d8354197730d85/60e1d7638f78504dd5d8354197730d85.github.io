#include<stdio.h>
#include<stdlib.h>
int **cost;
int search(int *dist, int *s, int n)
{
    int i, min, temp, index;
    for(i=0; i<n; i++)
    {
        if(s[i]==0)
        {
            min=dist[i];
            temp=i;
            index=i;
            break;
        }
    }
    for(i=temp+1; i<n; i++)
    {
        if(s[i]==0)
        {
            if(dist[i]<min)
            {
                min=dist[i];
                index=i;
            }
        }
 
    }
    return index;
}
int fun(int n, int v)
{
    int dist[n], s[n], j, index;
    int i;
    for(i=0; i<n; i++)
    {
        s[i]=0;
        dist[i]=cost[v][i];
    }
    s[v]=1;
    dist[v]=0;
    
    for(i=1; i<n; i++)
    {
        index=search(dist, s, n);
        s[index]=1;
        for(j=0; j<n; j++)
        {
            if(s[j]==0)
            {
                if(dist[j]>dist[index]+cost[index][j])
                dist[j]=dist[index]+cost[index][j];
            }
        }
    }
    printf("%d\n", dist[n-1]);
  return 0;
}
int main()
{
    int i;
    cost=(int **)malloc(2505*sizeof(int *));
    for(i=0;i<2505;i++)
    cost[i]=(int *)malloc(2505*sizeof(int));
    int t, n, j;
    scanf("%d", &t);
    while(t--)
    {
        scanf("%d", &n);
        n=n+2;
        int p[n][2];
        for(i=0; i<n; i++)
        scanf("%d%d",&p[i][0], &p[i][1]);
        for(i=0; i<n; i++)
        {
            for(j=0; j<n; j++)
            {
                cost[i][j]= (p[i][0]-p[j][0])*(p[i][0]-p[j][0])+(p[i][1]-p[j][1])*(p[i][1]-p[j][1]);
            }
        }
        fun(n, n-2);
    }
    return 0;
}