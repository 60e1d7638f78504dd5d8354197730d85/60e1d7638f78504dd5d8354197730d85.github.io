#include <stdio.h>
    #include <stdlib.h>
    #define MOD 1000000007
    #define MAX 500001
     
    long long fact[MAX] = {0};
     
    void fun();
    long long power(long long, int);
    int right_most_binary_search(int*, int, int, int, int);
    long long combination(int, int);
     
    int sort_compare_func(const void *a, const void *b) {
     return *(int*)a - *(int*)b;
    }
     
     
    int main()
    {
        fun();
        int n, k, x, i;
        scanf("%d %d %d", &n, &k, &x);
        int *a = (int*)malloc(n * sizeof(int));
        for(i = 0; i < n; i++) scanf("%d", &a[i]);
        qsort(a, n, sizeof(int), sort_compare_func);
        long long res = 0;
        for(i = 0; i < n; i++) {
         int e = x + a[i];
         int ind = right_most_binary_search(a, 0, n, n, e);
         if(ind - i < k - 1) {
          if(ind == n) break;
          continue;
         }
         res += combination(ind - i, k - 1);
         res %= MOD;
        }
        printf("%lld", res);
        return 0;
    }
     
    void fun() {
     fact[0] = 1;
     int i;
     for(i = 1; i < MAX; i++) fact[i] = (fact[i - 1] * i) % MOD;
    }
     
    int right_most_binary_search(int *a, int l, int r, int n, int e)
    {
        int m;
     
        while( r - l > 1 )
        {
            m = l + (r - l)/2;
     
            if( a[m] <= e )
                l = m;
            else
                r = m;
        }
        if(l == n || a[l] > e) return l - 1;
     
        return l;
    }
     
    long long combination(int n, int r) {
     if(r > n) return 0;
     long long numerator = fact[n], denominator = (fact[n - r] * fact[r]) % MOD;
     denominator = power(denominator, MOD - 2);
     
     return (numerator * denominator) % MOD;
    }
     
    long long power(long long x, int n) {
     if(n == 0) return 1;
     if(n == 1) return x;
     long long t = power(x, n / 2);
     t = (t * t) % MOD;
     return (t * power(x, n % 2)) % MOD;
    }