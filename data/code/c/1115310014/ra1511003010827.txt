#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define INT_MAX 10000000
inline void scanString(char str[])
{
    register char c;
    register int i = 0;
    while((c = getchar_unlocked()) == '\n' || c == ' '){}
    while(c != '\n' && c != ' ' && (int)c != EOF)
    {
        str[i++] = c;
        c = getchar_unlocked();
    }
        
    str[i] = '\0';
}
 
inline void scanint(int* x)
{
    register char c = getchar_unlocked();
    *x = 0;
    for(; (c<48)||(c>57);c = getchar_unlocked());
    for(; (c>47)&&(c<58);c = getchar_unlocked())
        *x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);
}
int min(int a,int b) {return a<b?a:b;}
int p[102][102];
int shadow[102][102];
int dp[102][102][2];
 
int main()
{
    int t;
    scanint(&t);
    while(t--)
    {
        int n,m , i ,j;
        scanint(&n);
        scanint(&m);       
        memset(shadow,0,sizeof(shadow));
        memset(p,0,sizeof(p));
        for( i=0;i<n;i++)
        {
            char s[102];
 
            scanString(s);
            for( j=0;j<m;j++)
            {
                p[i][j]= s[j]-'0';
                dp[i][j][0]=0;
                dp[i][j][1]=0;
                if(p[i][j])
                {
                    if(i-1>=0)
                        shadow[i-1][j]++;
                    if(i+1<=n-1)
                        shadow[i+1][j]++;
                    if(j-1>=0)
                        shadow[i][j-1]++;
                    if(j+1<=m-1)
                        shadow[i][j+1]++;
                }
            }
        }
        dp[0][0][0]=dp[0][0][1]= shadow[0][0];
        for( i=1;i<n;i++)
        {
            dp[i][0][1]= shadow[i][0] - p[i-1][0] + dp[i-1][0][1];
            dp[i][0][0]=INT_MAX;
        }
        for( i=1;i<m;i++)
        {
            dp[0][i][0]= shadow[0][i] - p[0][i-1] + dp[0][i-1][0];
            dp[0][i][1]=INT_MAX;
        }
        for( i=1;i<n;i++)
        {
            for( j=1;j<m;j++)
            {
 
                dp[i][j][0]= shadow[i][j]- p[i][j-1] + min(dp[i][j-1][0] , dp[i][j-1][1]-p[i-1][j]);
                dp[i][j][1]= shadow[i][j] - p[i-1][j] + min(dp[i-1][j][1],dp[i-1][j][0] - p[i][j-1]);
            }
 
        }
        printf("%d\n" ,min(dp[n-1][m-1][0],dp[n-1][m-1][1])+ p[0][0]);
 
 
    }
}
 