    #include <stdio.h>
    #include <stdlib.h>
    #include <math.h>
     
    int compare(const void *a, const void *b)
    {
    	if (*(int *)a > *(int *)b)
    		return 1;
    	else if(*(int *)a == *(int *)b) 
    		return 0;
    	else
    		return -1;
    } 
     
    int main()
    {
    	int T, N, skill, num, M;
    	int i, j, sum, mask; 
    	long long limit, low_limit;
    	int part1, part2;
    	int *a; 
    	long long *m;
     
    	scanf("%d", &T);
    	while(T--) {
    		scanf("\n%d", &N);
    		a = (int *)malloc(sizeof(int) * N);
    		sum = 0;
    		part1 = 0;
    		part2 = 0;
    		num = N;
     
    		while (num--) {
    			scanf("%d", &skill);
    			sum += skill;
    			a[num] = skill;
    		}
    		qsort((void *)a, N, sizeof(int), compare);
    		
    		M = sum/2;		
    	
    		if(N%2) {
    			num = N/2 + 1;
    			low_limit = pow(2, num -1);
    		} else {
    			num = N/2;
    		}
    		limit = pow(2,num);
    		
    		m = (long long *)calloc((M + 1), sizeof(long long));
    		m[0] = 1;
    		
    		for (i = 0; i < N ; i++) 
    			for (j = M; j >= a[i]; j--) {
    				if (m[j - a[i]] < limit) {
    					m[j] |= (m[j-a[i]] << 1); 
    				} else {
    					mask = m[j - a[i]] & (limit - 1);
    					if (mask) 
    						m[j] |= (mask << 1);
    				}
    			}
    		
    		for (i = M; i >= 0 ; i--) {
    			if ((m[i] & limit) || ((m[i] & low_limit))) {
    				part1 = i;
    				part2 = sum - i;
    				if (part1 >= part2) 
    					printf("%d %d\n", part2, part1);
    				else
    					printf("%d %d\n", part1, part2);
    				break;
    			}
    		}
    		free(a);
    		free(m);
    			
    		if (T != 0) 
    			printf("\n");
    	}
      return 0;
    }  