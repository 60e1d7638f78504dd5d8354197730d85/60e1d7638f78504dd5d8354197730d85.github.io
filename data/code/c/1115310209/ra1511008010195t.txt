#include <stdio.h>
#include <math.h>
#define M 1000000007
 
void matmult(long long  a[][2],long long  b[][2],long long c[][2])//multiply matrix a and b. put result in c
{
    int i,j,k;
    for(i=0;i<2;i++)
    {
        for(j=0;j<2;j++)
        {
            c[i][j]=0;
            for(k=0;k<2;k++)
            {
                c[i][j]+=(a[i][k]*b[k][j]);
                c[i][j]=c[i][j]%M;
            }
        }
    }
 
}
void matpow(long long Z[][2],int n,long long ans[][2])
//find ( Z^n )% M and return result in ans
{
 
    long long temp[2][2];
    //assign ans= the identity matrix
    ans[0][0]=1;
    ans[1][0]=0;
    ans[0][1]=0;
    ans[1][1]=1;
    int i,j;
    while(n>0)
    {
        if(n&1)
        {
            matmult(ans,Z,temp);
            for(i=0;i<2;i++)
                for(j=0;j<2;j++)
                    ans[i][j]=temp[i][j];
        }
        matmult(Z,Z,temp);
        for(i=0;i<2;i++)
            for(j=0;j<2;j++)
                Z[i][j]=temp[i][j];
 
 
        n=n/2;
    }
    return;
     
}
long long find(long long n)
{
     
    long long fib;
    if(n>2)
    {
        long long int Z[2][2]={{2,2},{1,0}},result[2][2];
        matpow(Z,n-2,result);
        fib=(result[0][0]*3 + result[0][1]*1)%M;  
    }
    else
        fib=pow(2,n)-1;
    return fib;
}
 
 
 
int main(void) {
	long long int t,n,ans;
	
	scanf("%lld",&t);
	
	while(t--)
	{
		scanf("%lld",&n);
		
		ans=find(n);
		
		printf("%lld\n",ans);
	}
	return 0;
}