#include<stdio.h>
#include<string.h>
#define M 1000000007
long long int g[28],sum,n1,r,sum1,sum2,sum3,x[28],j;
unsigned long long int func(unsigned long long int a, unsigned long long int b, unsigned long long int c)
{
    unsigned long long int r = 1;
    while (b > 0)
    {
        if (b % 2 == 1)
            r = (r *a) % c;
        b = b >> 1;
        a = (a *a) % c;
    }
    return r;
}
long long int fact[100009];
void f(long long int array[11],long long int r){
	long long int a,b,c,temp,i;
 
	  if(r==4){
		temp=sum3%M;
		for(i=0;i<4;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		sum=((sum)%M+(3*temp)%M)%M;
	}
	  else if(r==3){
	temp=sum3%M;
		for(i=0;i<3;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=temp%M;
		sum1=((sum1)%M+(2*temp)%M)%M;
	 if(g[array[0]-1]>1){
	     temp=sum3%M;
	     for(i=0;i<3;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=(temp*(g[array[0]-1]-1)%M)%M;
		temp=temp%M;
		sum1=((sum1)%M+(temp)%M)%M;
	 }
	  if(g[array[1]-1]>1){
	  		  temp=sum3%M;
	     for(i=0;i<3;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=(temp*(g[array[1]-1]-1)%M)%M;
		temp=temp%M;
		sum1=((sum1)%M+(temp)%M)%M;
 
	  }
	  if(g[array[2]-1]>1){
	   temp=sum3%M;
	     for(i=0;i<3;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=(temp*(g[array[2]-1]-1)%M)%M;
		temp=temp%M;
		sum1=((sum1)%M+(temp)%M)%M;
	  }
	  }
	  else if(r==2){
	  temp=sum3%M;
	     for(i=0;i<2;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=temp%M;
		sum2=((sum2)%M+(temp)%M)%M;
	  if(g[array[0]-1]>1&&g[array[1]-1]>1){
	    temp=sum3%M;
	     for(i=0;i<2;i++)
		temp=(temp*(g[array[i]-1])%M)%M;
		temp=(temp*(g[array[0]-1]-1)%M)%M;
		temp=(temp*(g[array[1]-1]-1)%M)%M;
		temp=temp%M;
		temp=(temp*(func(4,M-2,M))%M)%M;
		sum2=((sum2)%M+(temp)%M)%M;
	  }
	  
}
	  
}
void combinationUtil(long long int arr[], long long int n,long long int r,long long int index,long long int data[],long long int i)
{
	long long int array[10],j1;
    if (index == r)
    {
        for (j1=0; j1<r; j1++){
        	array[j1]=data[j1];
		}
		f(array,r);
 
        return;
    }
    if (i >= n)
        return;
    data[index] = arr[i];
    combinationUtil(arr, n,r, index+1, data, i+1);
    combinationUtil(arr, n, r,index, data, i+1);
}
 void printCombination(long long int arr[],long long int n,long long int r)
{
    long long int data[r];
    combinationUtil(arr, n,r, 0, data, 0);
}
int main(){
	long long int tcase,i,n,x,arr[28],ans,k;
 
	char a[100009];
	scanf("%lld",&tcase);
	fact[0]=1;
	fact[1]=1;
	for(i=2;i<100005;i++){
		fact[i]=(i*(fact[i-1])%M)%M;
	}
	while(tcase--){
		sum=0;
		sum1=0;
		sum2=0;
		sum3=0;
		scanf("%s",a);
		n1=strlen(a);
		for(i=0;i<26;i++)
		g[i]=0;
		for(i=0;i<n1;i++){
			x=a[i]-97;
			g[x]++;
		}
		j=0;
		k=0;
		sum3=fact[n1];
		for(i=0;i<26;i++){
			if(g[i]!=0){
				g[j]=g[i];
				j++;
				sum3=(sum3*(func(fact[g[i]],M-2,M))%M)%M;
 
			}
			
		}
		for(i=0;i<j;i++){
			arr[i]=i+1;
		}
		printCombination(arr, j, 4);
		printCombination(arr, j, 3);
		printCombination(arr, j, 2);
		sum=(sum+sum1)%M;
		sum2=(sum2+sum3)%M;
		sum=(sum+sum2)%M;
		ans=sum3*sum3;
		ans=(ans-sum)%M;
		sum=ans;
 
		printf("%lld\n",sum);
	}
	return 0;
}  