#include <stdio.h>
typedef long long int LLI;
 
#define MOD 1000000007
#define MAX_N 100001
#define MAX_ABC 26
int facMod[MAX_N];
char s[MAX_N+1];
int h[MAX_ABC];
int n;
 
LLI powMod(LLI n, int p, int mod) {
	LLI res=1;
	while(p>0) {
		if(p&1) {
			res=res*n;
			if(res>=mod) res=res%mod;
		}
		p >>=1;
		n=n*n;
		if(n>=mod) n=n%mod;
	}
	return res;
}
int inverse(int n) {
	return (int)powMod(n,MOD-2,MOD);
}
 
void precalc() {
	int i;
	LLI r;
	facMod[0]=facMod[1]=1;
	r=facMod[2]=2;
	for(i=3; i<MAX_N; ++i) {
		r*=i; if(r>=MOD) r%=MOD;
		facMod[i]=(int)r;
	}
}
 
#define MAX_B 100000
#define MAX_S 11
int a[MAX_S],c[MAX_S];
int b[MAX_B][MAX_S];
int m;
 
void init() {
	int i;
	for(i=0; i<MAX_ABC; ++i) h[i]=0;
	n=0; while(s[n]) ++h[s[n++]-'a'];
}
 
int calcFactor() {
	int i;
	LLI f;
 
	f=facMod[n];
	for(i=0; i<MAX_ABC; ++i) {
		if(h[i]>1) {
			f*=inverse(facMod[h[i]]);
			if(f>=MOD) f%=MOD;
		}
	}
	return (int)f;
}
 
int isUnequal(int*a, int*b) {
	int i;
	for(i=0; i<n; ++i) if(a[i]!=b[i]) return 1;
	return 0;
}
 
void add(int*a) {
	int i,ok;
 
	ok=1;
	for(i=0; i<m; ++i)
		if(!isUnequal(a,b[i])) { ok=0; break; }
	if(!ok) return;
 
	for(i=0; i<n; ++i) b[m][i]=a[i];
	++m;
}
 
LLI calcDirect() {
	int i,j,i1,j1,k,sw;
	LLI f;
	
	f=calcFactor();
	
	for(i=0; i<n; ++i) a[i]=s[i];
	
	m=0;
	add(a);
 
	for(i=0; i<n; ++i) {
		for(j=i+1; j<n; ++j) {
			for(k=0; k<n; ++k) c[k]=a[k];
			sw=c[i]; c[i]=c[j]; c[j]=sw;
			add(c);
		}
	}
	
	for(i=0; i<n; ++i) {
		for(j=i+1; j<n; ++j) {
			for(i1=0; i1<n; ++i1) {
				for(j1=i1+1; j1<n; ++j1) {
					for(k=0; k<n; ++k) c[k]=a[k];
					sw=c[i]; c[i]=c[j]; c[j]=sw;
					sw=c[i1]; c[i1]=c[j1]; c[j1]=sw;
					add(c);
				}
			}
		}
	}
 
 
	//printf("m=%d\n",m);
	return ((f%MOD)*((f-m)%MOD))%MOD;
}
 
 
 
int calc() {
	LLI res,f,g;
	
	init();
	if(n<=10) return (int) calcDirect();
 
	f=calcFactor();
	
	g=1;
	
	res=f-g;
	if(res<0) res+=MOD;
	res*=f;
	if(res>=MOD) res%=MOD;
 
	return (int)res;
}
 
int main() {
	int t;
	precalc();
	scanf("%d",&t);
	while(t--) {
		scanf("%s",s);
		printf("%d\n",calc());
	}
	return 0;
}