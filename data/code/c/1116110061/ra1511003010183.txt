#include <stdio.h>
 
#define ISTOK(c) ((c) == 'R' || (c) == 'A')
#define NOTOK(c) ((c) != 'R' && (c) != 'A')
#define MAX(a, b) ((a)>=(b) ? (a) : (b))
 
int
read_count()
{
    int c, cfirst, count = 0;
 
    cfirst = getchar();
 
    if(ISTOK(cfirst)) {
        count++;
        do {
            c = getchar();
            count++;
        } while(c == cfirst);
        count--;
        ungetc(c, stdin);
    }
 
    return count;
}
 
int
dochain()
{
    int c_0, c_1, c_2, done = 0, bc = 0, cur[2], i, n;
    int max1 = 0, max2 = 0, nsingle=0;
 
    /* Skip whitespace. */
    do {
        c_0 = getchar();
    } while(NOTOK(c_0));
    ungetc(c_0, stdin);
 
    /* Now we're at the first 'R' or 'A' */
    c_0 = read_count();
    do {
        if(bc == 0) {
            c_1 = read_count();
            if(!c_1) {
                cur[0] = c_0; 
                done = 1;
            } else
                cur[0] = 0;
            cur[1] = 0;
        } else if(bc % 2) {
            c_2 = read_count();
            if(!c_2) {
                cur[0] = c_1; cur[1] = c_0;
                done = 1;
            } else {
                cur[0] = c_1;
                cur[1] = 0;
            }
        } else {
            c_1 = read_count();
            if(!c_1) {
                cur[0] = c_2 + c_0;
                done = 1;
            } else
                cur[0] = c_2;
            cur[1] = 0;
        }
 
        if(cur[1])
            n = 2;
        else if(cur[0])
            n=1;
        else
            n=0;
        for(i = 0; i < n; i++) {
            if(cur[i] == 1)
                nsingle++;
            /* Start of the real body of the loop. c[i] runs through all stone-string lengths as you
             * go around the chain 1 time. */
            if(cur[i] > max1) {
                max2 = max1;
                max1 = cur[i];
            } else if(cur[i] >= max2)
                max2 = cur[i];
            /* End of loop body */
        }
        bc++;
    } while(!done);
 
    if(max1 > 2) {
        if(max2) {
            return MAX((int) (max1 / 2), max2); 
        } else
            return max1 - 1;
    } else {
        if(max1 == 2) {
            if(nsingle)
                return 2;
            else if(max2)
                return 3;
            else
                return 1;
        } else {
            if(nsingle == 1)
               return 1;
            else if(nsingle == 2)
                return 2;
            else
                return 3;
        }
    }
}
 
int
main()
{
    int ncases, i;
 
    scanf("%d", &ncases);
 
    for(i = 0; i < ncases; i++) {
        printf("%d\n",dochain());
    }
 
    return 0;
}
 