#include <stdio.h>
#include <string.h>
#include<stdlib.h>
 
struct can
{
	long long int c;
	long long int p;
};
 
typedef struct can cha;
 
int cmpfunc (const void * m, const void * n)
{
    long long int t=((*(cha*)m).c - (*(cha*)n).c );
	if(t<0)
	{
		return (-1);
	}
	else if(t>0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
 
long long int dupli(cha arr[],long long int brr[],long long int n);
long long int powr(long long int a,long long int b)
{
	long long int ans=1;
	while(b>0)
	{
		ans*=a;
		b--;
	}
	return ans;
}
 
int main()
{
	long long int n,m,k,i,j,n2;
    scanf("%lld",&k);
    while(k>0)
    {
    	cha arr[50];
    	long long int brr[50],mat[50][50],ways[50][50],x=0,y=0,z=0,ans=0,t,kl=0;
       	
       	scanf("%lld %lld",&n,&m);
       	for(i=0;i<n;i++)
    	{
    		scanf("%lld %lld",&arr[i].c,&arr[i].p);
     	}
    	
    	qsort(arr,n,sizeof(cha),cmpfunc);
    	
    	n2=dupli(arr,brr,n);
    	
    	for(i=0;i<=n2;i++)
    	{
    		mat[i][0]=1;
    		mat[0][i]=0;
    	}
    	mat[0][0]=1;
    	for(i=1;i<=n2;i++)
    	{
    		for(j=1;j<=i;j++)
    		{
    			mat[i][j]=(mat[i-1][j-1]*brr[i-1])+mat[i-1][j];
    		}
        }
        
        for(i=1;i<=n2;i++)
    	{
    		ways[i][0]=1;
    		ways[0][i]=0;
     	}
     	ways[0][0]=1;
    	for(i=1;i<=n2;i++)
    	{
    		for(j=1;j<=n2;j++)
    		{
    			ways[i][j]=mat[n2][j]-(ways[i][j-1]*brr[i-1]);
    		}
        }
        z=0,j=0;
        for(i=0;i<n;i++)
    	{
    		x=0;
    		t=arr[i].c;
    		kl++;
    		while((i<n)&&(arr[i].c==t))
    		{
    			x+=(arr[i].p);
    			i++;
    		}
    		y=0;
    		for(j=m-1;j<n2;j++)
    		{
    			y+=ways[kl][j];
    		}
    		ans+=(x*y*((brr[kl-1]+1)/2));
    		i--;
        }
        
        for(i=m;i<=n2;i++)
        {
        	z+=mat[n2][i];
        }
        
        printf("%0.9lf\n",((ans*1.0)/z*(1.0)));
    	k--;
    }	
    return 0;
}
 
long long int dupli(cha arr[],long long int brr[],long long int n)
{
	long long int i,j=0,t=0,s=0,pt=0,cn=0;
	for(i=0;i<n;i++)
	{
		s=arr[i].c;
		pt=0;
		cn=0;
		while((i<n)&&(arr[i].c==s))
		{
			pt+=arr[i].p;
			i++;
			cn++;
		}
		brr[j]=(powr(2,cn)-1);
		i--;
		j++;
	}
	return j;
}  
 