#include <stdio.h>
double ans,tempans,matrix[26][26],residue[26][26],copy[26][26];
unsigned long n,k,t;
unsigned short lenin,lenout,i,j,p,dic[27][27][27],found;
unsigned char c,inp[4],out[4];
void multiply(double a[26][26],double b[26][26])
{
    for(i=0;i<26;i++)
        for(j=0;j<26;j++)
            copy[i][j]=a[i][j];
    for(i=0;i<26;i++)
        for(j=0;j<26;j++)
        {
            a[i][j]=0;
            for(p=0;p<26;p++)
                a[i][j]+=copy[i][p]*b[p][j];
        }
}
void square(double a[26][26])
{
    for(i=0;i<26;i++)
        for(j=0;j<26;j++)
            copy[i][j]=a[i][j];
    for(i=0;i<26;i++)
        for(j=0;j<26;j++)
        {
            a[i][j]=0;
            for(p=0;p<26;p++)
                a[i][j]+=copy[i][p]*copy[p][j];
        }
}
int main()
{
    scanf("%lu",&t);
    while(t--)
    {
        for(i=0;i<26;i++)
            for(j=0;j<27;j++)
                for(p=0;p<27;p++)
                    dic[i][j][p]=0;
        scanf("%lu%lu",&n,&k);
        c=getchar_unlocked();
        while(c==' '||(c>8&&c<14))
            c=getchar_unlocked();
        lenin=0;
        while(c>96&&c<123)
        {
            inp[lenin++]=c;
            c=getchar_unlocked();
        }
        for(i=0;i<26;i++)
            for(j=0;j<26;j++)
                scanf("%lf",&matrix[i][j]);
        for(i=0;i<26;i++)
            for(j=0;j<26;j++)
            {
                if(i==j)
                    residue[i][j]=1;
                else
                    residue[i][j]=0;
            }
        while(k!=1)
        {
            if(k&1)
            {
                multiply(residue,matrix);
                square(matrix);
                k>>=1;
            }
            else
            {
                square(matrix);
                k>>=1;
            }
        }
        multiply(residue,matrix);
        ans=0;
        while(n--)
        {
            c=getchar_unlocked();
            while(c==' '||(c>8&&c<14))
                c=getchar_unlocked();
            lenout=0;
            while(c>96&&c<123)
            {
                out[lenout++]=c;
                c=getchar_unlocked();
            }
            if(lenout!=lenin);
            else
            {
                //CHECK DICTIONARY
                found=0;
                if(lenout==3)
                {
                    if(dic[out[0]-97][out[1]-97][out[2]-97])
                        found=1;
                }
                else if(lenout==2)
                {
                    if(dic[26][out[0]-97][out[1]-97])
                        found=1;
                }
                else
                {
                    if(dic[26][26][out[0]-97])
                        found=1;
                }
                if(!found)
                {
                    //ADD TO DICTIONARY
                    if(lenout==3)
                        dic[out[0]-97][out[1]-97][out[2]-97]=1;
                    else if(lenout==2)
                        dic[26][out[0]-97][out[1]-97]=1;
                    else
                        dic[26][26][out[0]-97]=1;
                    //COMPLETE
                    tempans=residue[inp[0]-97][out[0]-97];
                    for(lenout=1;lenout<lenin;lenout++)
                        tempans*=residue[inp[lenout]-97][out[lenout]-97];
                    ans+=tempans;
                }
            }
        }
        printf("%0.10lf\n",ans);
    }
    return 0;
} 