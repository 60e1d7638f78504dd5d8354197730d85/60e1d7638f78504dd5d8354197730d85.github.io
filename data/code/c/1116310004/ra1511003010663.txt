#include<stdio.h>
#include<string.h>
#define ll int
#define ge getchar_unlocked
int search1(int l,int r,int x,int val0[],int val1[],int K)
{
    int mid,prev;
    while(l<=r)
    {
        mid=(l+r)/2;
        if((val0[mid]-val0[x-1])<=K &&(val1[mid]-val1[x-1])<=K)
        {
            prev=mid;
            //printf("%d\n",prev);
            l=mid+1;
        }
        else r=mid-1;
    }
    return prev;
}
int search(int l,int r,int x,int val0[],int val1[],int K)
{
    int mid,prev,flag=1;
    while(l<=r)
    {
        mid=(l+r)/2;
        if((val0[x]-val0[mid])<=K&&(val1[x]-val1[mid])<=K)
        {
            prev=mid;
            r=mid-1;
            flag=0;
        }
        else l=mid+1;
    }
    if(flag)
    return 0;
    return prev+1;
}
ll scani()
{
	ll  x=0;
  	 int neg=0;
	register int c=ge();
	for(;((c<'0' || c>'9') && c!='-');c=ge());
	if(c=='-')
	{neg=1;
	c=ge();
	}
	for(;c>='0' && c<='9';c=ge())
	x=(x<<1)+(x<<3)+c-'0';
	if(neg==1)
	return -x;
	return x;
}
int min(int a,int b)
{
    if(a<b)
    return a;
    return b;
}
int max(int a,int b)
{
    if(a>b)
    return a;
    return b;
}
int main()
{
    int T,N,K,Q,i;
    T=scani();
    while(T--)
    {
        char str[100002];
        N=scani();
        K=scani();
        Q=scani();
        scanf("%s",str+1);
        int val0[100002],val1[100002],c0=0,c1=0;
        long long int oneton[100002];
        val0[0]=0;
        val1[0]=0;
        for(i=1;i<=N;i++)
        {
            int ans=0;
            if(str[i]=='0'){
                val0[i]=++c0;
                val1[i]=c1;
            }
            else{
                val1[i]=++c1;
                val0[i]=c0;
            }
            /*for(j=i;j>0;j--)
            {
                if((val[i][0]-val[j-1][0])<=K &&(val[i][1]-val[j-1][1])<=K)
                ans++;
                else break;
            }*/
            ans=i-search(0,i-1,i,val0,val1,K)+1;
            //printf("%d\n",ans);
            oneton[i]=oneton[i-1]+(long long)ans;
           //printf("%d\n",oneton[i]);
        }
        while(Q--)
        {
            int L,R;
            long long int res1,res2;
            L=scani();
            R=scani();
            if(L==1)
            printf("%lld\n",oneton[R]);
            else
            {/*
                res1=oneton[R]-oneton[L]+1;
                int m,n,l;
                long long int tem;
                l=max(0,L-2*K);
                for(m=min(R,L+2*K-1);m>L;m--)
                {
                    tem=oneton[m]-oneton[m-1];
                    if(tem>m-L+1)
                    res2+=(tem-(long long)(m-L+1));
                }
                //printf("%lld\n",res2);
                printf("%lld\n",res1-res2); */
                int m,x;
                m=min(R,L+2*K-1);
                x=search1(L-2,m,L-1,val0,val1,K);
                //printf("%d\n",x);
                res2=x-L+1;
                res2=(res2*(res2+1))/2;
                res1=oneton[R]-oneton[x]+res2;
                 printf("%lld\n",res1);
            }
        }
    }
    return 0;
}      