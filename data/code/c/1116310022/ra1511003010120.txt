#include <stdio.h>
#include <string.h>
#define DEBUG 0
#define MAX_SIZE 100005
 
char P[MAX_SIZE];
int N, Q, redCount;
 
int parityArray[MAX_SIZE];
int sizeReduceMap[1 << 26];
long long freqArray[MAX_SIZE];
long long sums[MAX_SIZE];
long long squareSums[MAX_SIZE];
 
int mapParityValue(int i) {
    if (sizeReduceMap[i] == -1) {
        sizeReduceMap[i] = redCount;
        ++redCount;
    }
    return sizeReduceMap[i];
}
 
void constructParityArray() {
    int prev;
 
    prev = 0;
    sizeReduceMap[prev] = -1;
    int i = 0;
    for(i = 0; i < N; ++i) {
        prev ^= 1 << (P[i] - 'a');
        sizeReduceMap[prev] = -1;
    }
    redCount = 0;
 
    parityArray[0] = mapParityValue(0);
    if (DEBUG == 1)
        printf("parity Array : %d ", parityArray[0]);
    prev = 0;
    for (i = 0; i < N; ++i) {
        parityArray[i+1] = prev ^ (1 << (P[i] - 'a'));
        prev = parityArray[i+1];
        parityArray[i+1] = mapParityValue(prev);
        if (DEBUG == 1)
            printf("%d ", parityArray[i+1]);
    }
    if (DEBUG == 1)
        printf("\n");
 
    return;
}
 
int constructFreqAndSumArray(int L, int R, int type) {
    --L;
    int i;
    for(i = 0; i < redCount; ++i){
        freqArray[i] = 0;
        sums[i] = 0;
        squareSums[i] = 0;
    }
 
    long long ans0 = 0, ans1 = 0, ans2 = 0;
    for(i = L; i <= R; ++i) {
        ans2 += freqArray[parityArray[i]] * i * i -
                2 * i * sums[parityArray[i]] + squareSums[parityArray[i]];
        ans1 += freqArray[parityArray[i]] * i - sums[parityArray[i]];
        ans0 += freqArray[parityArray[i]];
        ++freqArray[parityArray[i]];
        sums[parityArray[i]] += i;
        squareSums[parityArray[i]] += i * i;
    }
    if (DEBUG == 1) {
        for(i=0; i < redCount; ++i) {
            printf("%lld ", sums[i]);
        }
        printf("\n");
    }
    long long ans = 0;
    if (type == 0)
        ans = ans0;
    else if (type == 1)
        ans = ans1;
    else
        ans = ans2;
    return ans;
}
 
void decode(){
    long long A = 0 ; // initialising first key
    long long B = 0 ; // initialising second key
    int Q; // number_of_queries;
    scanf("%d", &Q);
    while( Q -- ) {
        int X, Y, type;
        scanf("%d %d %d", &X, &Y, &type);
        int L, R;
        if (DEBUG == 0) {
            L = (X + A) % N + 1; // decoding L
            R = (Y + B) % N + 1; // decoding R
        } else {
            L = X;
            R = Y;
        }
        // N is the length of the given string
        if (L > R) {
            // swap L and R
            int T = L;
            L = R;
            R = T;
        }
        long long ans = constructFreqAndSumArray(L,R,type); // calculate answer for current query
        printf("%lld\n", ans);
        A = B;     // updating key A
        B = ans;   // updating key B
    }
}
 
int main() {
 
    int T;
    scanf("%d", &T);
    while(T--) {
        scanf("%s", P);
        N = strlen(P);
        constructParityArray();
        decode();
    }
 
    return 0;
 
} 
