
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
 
/* Structure to hold the queue(string S) */
typedef struct queue {
	char *S;
	unsigned long f, r;
} queue;
 
/* List node to maintain a list of distinct substrings */
typedef struct str_list {
	unsigned int str_hash;
	struct str_list *next;
} str_list;
 
unsigned long long sum;
 
/* Function declarations */
void queue_operations(queue *, char *);
unsigned int generateHash(const char * string, size_t len);
void get_sub_str(queue *);
void add2list(str_list **head, unsigned int hash_val);
char dup_entry(str_list **head, unsigned int hash_val);
void chk_dup_add2list(str_list **, char *, unsigned long);
 
 
int main() {
	unsigned long Q, i;
	queue q;
	char ip_opr[4];
 
	scanf("%ld", &Q);
	if (Q < 1 || Q > (unsigned long) 1000000)
		return -1;
 
 
	q.S = (char *)calloc(Q + 1,sizeof(char));
	if(q.S == NULL)
		exit(-4);
 
	q.f = q.r = 0;
 
	/* Get the data continuously from the user and compute the results */
	for (i = 0; i < Q; i++) {
		scanf(" %3[^\n]s", ip_opr);
		fflush(stdin);
 
		queue_operations(&q, ip_opr);
		get_sub_str(&q);
	}
 
	printf("\n%Ld\n", sum % (unsigned long long)1000000007);
	free(q.S);
	return 0;
}
 
void get_sub_str(queue *q) {
	unsigned long window;
	unsigned long q_len = q->r - q->f;
 
	char *temp_str = (char *) calloc(q_len + 1, sizeof(char));
	if (temp_str == NULL)
		exit(-4);
 
 
	str_list *head;
 
	for (window = 1; window <= q_len; window++) {
		head = NULL;
		strncpy(temp_str, (q->S) + (q->f), q_len);
		temp_str[q_len] = 0;
		chk_dup_add2list(&head, temp_str, window);
	}
 
	free(temp_str);
}
 
void chk_dup_add2list(str_list **head, char *str, unsigned long window) {
	unsigned long i, str_len;
	unsigned int hash_val;
	char *temp_str = (char *) calloc(window + 1, sizeof(char));
	if (temp_str == NULL)
		exit(-4);
 
	str_len = strlen(str);
 
	/* Iterate over the current queue string for a particular window size */
	for (i = 0; i < (str_len - window + 1); i++) {
		strncpy(temp_str, str + i, window);
		temp_str[window] = 0;
 
		hash_val = generateHash(temp_str,window);
 
		/* Check if a duplicate entry exists in the list */
		if (dup_entry(head, hash_val))
			continue;
 
		/* If not add to the list and get the length of the list */
		add2list(head, hash_val);
	}
}
 
/* Function to add a distinct substring to the list */
void add2list(str_list **head, unsigned int hash_val) {
	str_list *temp_node = (str_list *) malloc(sizeof(str_list));
	if (temp_node == NULL)
		exit(-4);
 
	temp_node->str_hash = hash_val;
 
	temp_node->next = *head;
	*head = temp_node;
 
	sum++;
}
 
/* Function to check if a duplicate substring exists in the list */
char dup_entry(str_list **head, unsigned int hash_val) {
	str_list *temp_list = *head;
 
	for (; temp_list != NULL; temp_list	= temp_list->next)
		if(hash_val == temp_list->str_hash)
			return 1;
 
	return 0;
}
 
unsigned int generateHash(const char * string, size_t len) {
 
    unsigned int i,hash = 0;
    for(i = 0; i < len; ++i)
        hash = 65599 * hash + string[i];
    return hash ^ (hash >> 16);
}
 
/* Function to perform queue operations */
void queue_operations(queue *q, char *ip_opr) {
	/* Add element to the queue */
	if (ip_opr[0] == '+' && ip_opr[1] == ' ' && ip_opr[2] >= 'a' && ip_opr[2] <= 'z')
		q->S[(q->r)++] = ip_opr[2];
 
	/* Check for underflow condition and add otherwise */
	else if (ip_opr[0] == '-') {
		if (q->f >= q->r)
			exit(-2);
 
		(q->f)++;
	}
 
	else
		exit(-3);
}