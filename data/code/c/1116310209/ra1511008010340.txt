#include<stdio.h>
#include<string.h>
#define M 1000000007
 
unsigned long long int fast_pow(unsigned long long int base,unsigned long long int n)
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    unsigned long long halfn=fast_pow(base,n/2);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}
 
unsigned long long int  findMMI_fermat(int n)
{
    return fast_pow(n,M-2);
}
 
unsigned long long int fact[100009];
 
char str[100009];
 
int alpha[29];
 
 
 
int main()
{

	int i,n,T,j;
	unsigned long long int ans,a,b,p,q,r,s,t,u,x,y,y1,z,am,bm,a2m,b2m,pm,qm,rm,sm,tm,um,xm,ym,zm,numerator,a1m,b1m,denominator,mmi_denominator,comb1,comb2,num1,denom1,mmi_denom1;
	scanf("%d",&T);
	fact[0]=1;
    i=1;
    
    while(i<=100005)
    {
        fact[i]=(fact[i-1]%M*i%M)%M;
        i++;
    }

	while(T--)
		{
			am=bm=pm=qm=rm=sm=tm=um=xm=ym=zm=0;
			
			for(i=0;i<=27;i++)
				alpha[i]=0;
			
			scanf("%s",str);
			n=strlen(str);
			
			if(n<=3)
			{
				printf("0\n");
				continue;
			}
				
			for(i=0;i<=n-1;i++)	
				{
					alpha[str[i]-'a'+1]++;
				}
		
						xm=fact[n];
		
						y=1;
						for(i=1;i<=26;i++)
							{
	
								y=(y%M*fact[alpha[i]]%M)%M;
							}
							
							z=(xm*findMMI_fermat(y))%M;
			
			pm=z;
	
			
			for(i=1;i<=26;i++)
				{
					if(alpha[i]>=2&&n-alpha[i]>=2)
						{
							 numerator=fact[alpha[i]];
        					 denominator=(fact[2]%M*fact[alpha[i]-2]%M)%M;
        					 mmi_denominator=findMMI_fermat(denominator);
        					 comb1=(numerator%M*mmi_denominator%M)%M;
        					 
        					 numerator=fact[n-alpha[i]];
        					 denominator=(fact[2]%M*fact[n-alpha[i]-2]%M)%M;
        					 mmi_denominator=findMMI_fermat(denominator);
        					 comb2=(numerator%M*mmi_denominator%M)%M;
        					 
							 rm=(rm%M+(comb1*comb2)%M)%M;				
						}
						
					if(alpha[i]>=3)
						{
							 numerator=fact[alpha[i]];
        					 denominator=(fact[3]%M*fact[alpha[i]-3]%M)%M;
        					 mmi_denominator=findMMI_fermat(denominator);
        					 comb1=(numerator%M*mmi_denominator%M)%M;
							 comb2=((n-alpha[i])%M*3%M)%M;
							  rm=(rm%M+(comb1*comb2)%M)%M;
						}
				
					if(alpha[i]>=4)
						{
							 numerator=fact[alpha[i]];
        					 denominator=(fact[4]%M*fact[alpha[i]-4]%M)%M;
        					 mmi_denominator=findMMI_fermat(denominator);
        					 comb1=(numerator%M*mmi_denominator%M)%M;
							  rm=(rm%M+(3%M*comb1)%M)%M;
						}
 
				}
				
	
			for(i=1;i<=26;i++)
				{
					if(alpha[i]>=2)
					{
					num1=fact[alpha[i]];
        			denom1=(fact[2]%M*fact[alpha[i]-2]%M)%M;
        			mmi_denom1=findMMI_fermat(denom1);
        			comb1=(num1%M*mmi_denom1%M)%M;
					}
					
					else if(alpha[i]<2)
						comb1=0;
					
					
					for(j=i+1;j<=26;j++)
						{
							if(alpha[j]>=2)
							{
							numerator=fact[alpha[j]];
        					denominator=(fact[2]%M*fact[alpha[j]-2]%M)%M;
        					mmi_denominator=findMMI_fermat(denominator);
        					comb2=(numerator%M*mmi_denominator%M)%M;
							}
							else
							{
								comb2=0;
							}
						
						sm=(sm%M+(comb1*comb2)%M)%M;
						}
				}
			

				numerator=fact[n];
        		denominator=(fact[4]%M*fact[n-4]%M)%M;
        		mmi_denominator=findMMI_fermat(denominator);
        		comb1=(numerator%M*mmi_denominator%M)%M;
				qm=(3%M*comb1)%M;
	
				
				numerator=fact[n];
        		denominator=(fact[2]%M*fact[n-2]%M)%M;
        		mmi_denominator=findMMI_fermat(denominator);
        		comb1=(numerator%M*mmi_denominator%M)%M;
		
				a1m=comb1;
	
				b1m=0;		
				for(i=1;i<=26;i++)
					{
						if(alpha[i]>=2)
							{
									numerator=fact[alpha[i]];
        							denominator=(fact[2]%M*fact[alpha[i]-2]%M)%M;
        							mmi_denominator=findMMI_fermat(denominator);
        							comb1=(numerator%M*mmi_denominator%M)%M;
								
									b1m=(b1m%M+(comb1)%M)%M;
							}	
					}
					
				tm=(a1m-b1m+M)%M;	
				
	
			
				numerator=fact[n];
        		denominator=(fact[3]%M*fact[n-3]%M)%M;
        		mmi_denominator=findMMI_fermat(denominator);
        		comb1=(numerator%M*mmi_denominator%M)%M;
		
				a2m=((2%M*comb1)%M)%M;
				
				b2m=0;		
				for(i=1;i<=26;i++)
					{
						if(alpha[i]>=3)
							{
									numerator=fact[alpha[i]];
        							denominator=(fact[3]%M*fact[alpha[i]-3]%M)%M;
        							mmi_denominator=findMMI_fermat(denominator);
        							comb1=(numerator%M*mmi_denominator%M)%M;
								
									b2m=(b2m%M+(2%M*comb1)%M)%M;
							}	
							
						if(alpha[i]>=2)
							{
									numerator=fact[alpha[i]];
        							denominator=(fact[2]%M*fact[alpha[i]-2]%M)%M;
        							mmi_denominator=findMMI_fermat(denominator);
        							comb1=(numerator%M*mmi_denominator%M)%M;
								
									b2m=(b2m%M+((2%M*comb1)%M*(n-alpha[i])%M)%M)%M;
							}
					}
					
				um=(a2m-b2m+M)%M;
			
				am=(pm+rm)%M;
				bm=(1+qm+tm+um)%M;
				
				ans=(am-bm+M)%M;
				ans=(z*ans)%M;
				
			
				
				
				printf("%llu\n",ans);
					
					
		}
		

	return(0);
}