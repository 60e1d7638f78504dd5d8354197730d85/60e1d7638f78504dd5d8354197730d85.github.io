#include<stdio.h>
int initialise(int p[],int r[],int n)
{
    int i;
    for(i=1;i<=n;i++)
    {
        p[i]=i;
        r[i]=1;
    }
}
 
int findRoot(int p[],int e)
{
    int root=e;
      while(root!=p[root])
      {
          root=p[root];
      }
      
      p[e]=root;
      
      return root;
}
 
void findUnion(int p[],int r[],int c1,int c2)
{
    int p1=findRoot(p,c1);
    int p2=findRoot(p,c2);
    
    if(p1==p2)
     return ;
     
     if(r[p1]>r[p2])
     {
         r[p2]+=r[p1];
         p[p1]=p2;
     }
     else
     {r[p1]+=r[p2];
         p[p2]=p1;
         
     }
}
int main()
{
    int n,f,e;
    scanf("%d%d",&n,&f);
    int p[n+1],r[n+1];
    initialise(p,r,n);
    int i;
    for(i=0;i<f;i++)
    {
       int f1,f2;
       scanf("%d%d",&f1,&f2);
       
       findUnion(p,r,f1,f2);
    }
    
    scanf("%d",&e);
    int max=0;
    int flag[n+1];
    for(i=1;i<=n;i++)flag[i]=1;
    
    for(i=0;i<e;i++)
    {
        int p1,p2;
        scanf("%d%d",&p1,&p2);
        
        int r1=findRoot(p,p1);
        int r2=findRoot(p,p2);
        
        if(r1==r2)
         flag[r1]=0;
    }
    
    for(i=1;i<=n;i++)
    {
        if(findRoot(p,i)==i&&flag[i]!=0&&r[i]>max)
        max=r[i];
        
    }
    
    printf("%d",max);
    
    
    return 0;
}