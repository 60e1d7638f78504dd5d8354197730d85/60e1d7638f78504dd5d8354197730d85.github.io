#include <stdio.h>
#define inchar getchar_unlocked
inline int inIntPos() {
	int ch,n;
	while((ch=inchar())<'0');
	n=(ch-'0');
	while((ch=inchar())>='0')
		n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
void qsortDesc(int* d, int l, int r) {
	int ll, rr, p, a;
	if (r > l) {
		ll = l;
		rr = r;
		p = d[(rr + ll) >> 1];
		while (ll <= rr) {
			while (ll < r && d[ll] > p) ++ll;
			while (rr > l && d[rr] < p) --rr;
			if(ll <= rr) {
				a = d[ll]; d[ll] = d[rr]; d[rr] = a;
				++ll;
				--rr;
			}
		}
		if (l < rr)	qsortDesc(d, l, rr);
		if (ll < r)	qsortDesc(d, ll, r);
	}
}
 
#define MAX_N 1001
int a[MAX_N];
int g[MAX_N];
int b[MAX_N][MAX_N];
 
 
int main() {
	int t,n,m,k,i,j,res,p,ma,win,g_size;
 
	t=inIntPos();
	while(t--) {
		n=inIntPos();
		m=inIntPos();
		k=inIntPos();
 
		for(i=1; i<=n; ++i) a[i]=inIntPos();
 
		for(i=1; i<=n; ++i)
			for(j=1; j<=m; ++j)
				b[i][j]=inIntPos();
 
		res=0;
		for(i=1; i<=n; ++i)
			res+=b[i][a[i]];
 
		g_size=0;
		for(i=1; i<=n; ++i) {
			p=b[i][a[i]];
			ma=-1;
			for(j=1; j<=m; ++j) {
				win=b[i][j]-p-inIntPos();
				if(ma<win) ma=win;
			}
			if(ma>0) g[g_size++]=ma;
		}
 
		if(k>0 && g_size>0) {
			qsortDesc(g,0,g_size-1);
			if(k>g_size) k=g_size;
			for(i=0; i<k; ++i) res+=g[i];
		}
 
		printf("%d\n",res);
	}
	return 0;
}
