#include<stdio.h>
#include<malloc.h>
typedef struct xxx
{
    int r;int c;
}cell;
cell ar[2001];
void merge(cell*a,cell*b,cell*c,int n,int m)
{
    int i=0,j=0,k=0;
    while(i<n && j<m)
    {
        if(a[i].c<b[j].c)
            c[k++]=a[i++];
        else if(a[i].c>b[j].c)
            c[k++]=b[j++];
        else
        {
            if(a[i].r<=b[j].r)
                c[k++]=a[i++];
            else
                c[k++]=b[j++];
        }
    }
    while(i<n)
    {
        c[k++]=a[i++];
    }
    while(j<m)
        c[k++]=b[j++];
}
void mergesort(cell*a,int n)
{
    if(n<=1)
        return ;
    cell*b=(cell*)malloc(n*sizeof(cell));
    int i,mid=n/2;
    mergesort(a,mid);
    mergesort(a+mid,n-mid);
    merge(a,a+mid,b,mid,n-mid);
    for(i=0;i<n;i++)
        a[i]=b[i];
    free(b);
}
int binary(int l,int h,int x,int y)
{
    int m=(l+h)/2;
    while(l<h)
    {
        m=(l+h)/2;
        if(ar[m].r==x && ar[m].c==y)
            return 1;
        if(ar[m].c<y)
            l=m+1;
        else if(ar[m].c>y)
            h=m-1;
        else
        {
            if(ar[m].r<x)
                l=m+1;
            else
                h=m-1;
        }
    }
    return 0;
}
int main()
{
    int n,x,y,i,ans=3,j,min=3,k;
    scanf("%d",&n);
    for(i=0;i<n;i++)
        scanf("%d%d",&ar[i].r,&ar[i].c);
    mergesort(ar,n);
   // for(i=0;i<n;i++)
   //     printf("%d %d\n",ar[i].r,ar[i].c);
   // printf("------\n");
   if(n==0)
   {
       printf("4\n");
       return 0;
   }
   if(n==1)
   {
       printf("3\n");
       return 0;
   }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            for(k=0;k<3;k++)
            {
                ans=2;
                if(k==0)
                {
                if((ar[i].r+ar[i].c+ar[j].r-ar[j].c)%2==0 && (ar[i].c+ar[j].r+ar[j].c-ar[i].r)%2==0)
                {
                    x=(ar[i].r+ar[i].c+ar[j].r-ar[j].c)/2;
                    y=(ar[i].c+ar[j].r+ar[j].c-ar[i].r)/2;
                   // printf("%d%d\n",x,y);
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
                }
                if((ar[i].r-ar[i].c+ar[j].r+ar[j].c)%2==0 && (ar[i].c-ar[j].r+ar[j].c+ar[i].r)%2==0)
                {
                    x=(ar[i].r-ar[i].c+ar[j].r+ar[j].c)/2;
                    y=(ar[i].c-ar[j].r+ar[j].c+ar[i].r)/2;
                   // printf("%d %d\n",x,y);
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
                }
                }
                else if(k==1)
                {
                    x=ar[i].r+ar[i].c-ar[j].c;
                    y=ar[i].c+ar[j].r-ar[i].r;
                   // printf("%d %d\n",x,y);
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
                    x=ar[j].r+ar[i].c-ar[j].c;
                    y=ar[j].c+ar[j].r-ar[i].r;
                   // printf("%d %d\n",x,y);
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
 
 
                }
                else if(k==2)
                {
                    x=ar[j].c-ar[i].c+ar[i].r;
                    y=ar[i].r+ar[i].c-ar[j].r;
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
                    y=ar[j].c+ar[i].r-ar[j].r;
                    x=ar[j].c-ar[i].c+ar[j].r;
                    if(binary(0,n-1,x,y))
                    {
                        ans--;
                        if(ans<min)
                            min=ans;
                    }
                }
                if(ans<min)
                    min=ans;
                if(min==0)
                {
                    printf("0\n");
                    return 0;
                }
            }
 
        }
    }
    printf("%d\n",min);
    return 0;
}