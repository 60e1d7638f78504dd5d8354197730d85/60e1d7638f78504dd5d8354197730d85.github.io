#include<stdio.h>
#include<stdlib.h>
struct dl
 {
    int X,Y;
	struct dl *next,*prv;
 };
void quick(int *A,int *B,int *S,int l,int h);
struct dl * make_my_list(int *A,int *lst,int N,int);
int main()
 {
	 int A[100010],blist[100010],slist[100010],big,small,T,N,i,j;
	 unsigned long long int area=0;
	 long long int ta;
	 struct dl bhead,shead,*temp,*t1,*t2;
	 
	 scanf("%d",&T);
	 
	 while(T--)
	  {
		scanf("%d",&N);
		area=0;
		for(i=0;i<N;i++)
			scanf("%d",A+i);
		big=A[0];
		small=A[0];
		for(i=0;i<N-1;i++)
		 {
			if(A[i]==big)
			for(j=i+1,big=A[i+1];j<N;j++)
				if(A[j]>big)
				 big=A[j];
				 
			if(A[i]==small)
			 for(j=i+1,small=A[i+1];j<N;j++)
				if(A[j]<small)
				 small=A[j];
			blist[i]=big;
			slist[i]=small; 
		 }
		quick(A,blist,slist,0,N-2);
		bhead.next=make_my_list(A,blist,N,0);
		shead.next=make_my_list(A,slist,N,1);
					 
		temp=bhead.next;
		t1=shead.next;
		t2=shead.next->next;
		 if(bhead.next->X==shead.next->X && bhead.next->Y==shead.next->Y)
		  {
			t1=t2;
			t2=t2->next;
		  }
		do
		 {
			ta=(long long int )(temp->X)*(t1->Y-t2->Y)+(long long int )(t1->X)*(t2->Y-temp->Y)+(long long int )(t2->X)*(temp->Y-t1->Y);
			if(ta<0)
			 ta=ta*-1;
			
			area=area+ta;
			t1=t2;
			t2=t2->next;
		 }while(t1!=shead.next->prv);
		
		temp=bhead.next;
		t1=bhead.next;
		t2=bhead.next->next;
		do
		 {
			ta=(long long int )(temp->X)*(t1->Y-t2->Y)+(long long int )(t1->X)*(t2->Y-temp->Y)+(long long int )(t2->X)*(temp->Y-t1->Y);
			if(ta<0)
			 ta=ta*-1;
			
			area=area+ta;
			t1=t2;
			t2=t2->next;
		 }while(t1!=bhead.next->prv);
		
		if(bhead.next->prv->X==shead.next->prv->X && bhead.next->prv->Y!=shead.next->prv->Y)
		 {
			temp=bhead.next;
			t1=bhead.next->prv;
			t2=shead.next->prv;
			
			ta=(long long int )(temp->X)*(t1->Y-t2->Y)+(long long int )(t1->X)*(t2->Y-temp->Y)+(long long int )(t2->X)*(temp->Y-t1->Y);
			if(ta<0)
			 ta=ta*-1;
			
			area=area+ta;		 
		 }
		printf("%lld\n",area);
		temp=bhead.next;
		t1=bhead.next->next;
		do
		{
			free(temp);
			temp=t1;
			t1=t1->next;
		}while(t1!=bhead.next);
		temp=shead.next;
		t1=shead.next->next;
		do
		{
			free(temp);
			temp=t1;
			t1=t1->next;
		}while(t1!=shead.next);
	  }
     return 0;
 }
struct dl * make_my_list(int *A,int *lst,int N,int flag)
 {
	struct dl header,*temp,*t1,*t2,*t3;
	int i,size,count,change=-1,d;
	long long int m;
		header.next=NULL;
		for(i=0;i<N-1;i++)
		 {
		    if(header.next==NULL)
			  {
				header.next=(struct dl *)malloc(sizeof(struct dl));
				temp=header.next;
				temp->X=A[i];
				temp->Y=lst[i];
				temp->next=temp;
				temp->prv=temp;
			  }
			else
			 {
				temp->next=(struct dl *)malloc(sizeof(struct dl));
				temp->next->prv=temp;
				temp->next->next=header.next;
				temp=temp->next;
				header.next->prv=temp;
				temp->X=A[i];
				temp->Y=lst[i];
			 }
         }
		
		count=N-1;
		size=N-1;
		while(change!=0){
		temp=header.next;
		change=0;
		while(count>2)
		 {
			t1=temp;
			t2=temp->next;
			t3=temp->next->next;
			m=((long long int)(t2->Y-t1->Y)*(t3->X-t1->X) -((long long int)(t3->Y-t1->Y))*(t2->X-t1->X));
			if((long long int)(t3->X-t1->X)<0)
			 m=m*-1;
			d=flag==0?m<=0:m>=0;
			if(d)
			 {
				t1->next=t3;
				t3->prv=t1;				
				free(t2);
				count--;
				size--;
				change++;
			 }
			count--;
			temp=t1->next;
			
		 }
		 
		 count=size;
	   }
	return header.next;
 }
void quick(int *A,int *B,int *S,int l,int h)
 {
	int pos,j;
	int temp,item=A[l];
	if(l>=h)
	 return;
	
	pos=l;
	for(j=l+1;j<=h;j++)
	 {
		if(item>A[j])
		 {
			pos++;
			temp=A[pos];
			A[pos]=A[j];
			A[j]=temp;
			
			temp=B[pos];
			B[pos]=B[j];
			B[j]=temp;
			
			temp=S[pos];
			S[pos]=S[j];
			S[j]=temp;
		 }	
	 }
	temp=A[pos];
	A[pos]=A[l];
    A[l]=temp;
			
	temp=B[pos];
	B[pos]=B[l];
    B[l]=temp;
			
	temp=S[pos];
	S[pos]=S[l];
	S[l]=temp;
	
	quick(A,B,S,l,pos-1);
	quick(A,B,S,pos+1,h);
 } 