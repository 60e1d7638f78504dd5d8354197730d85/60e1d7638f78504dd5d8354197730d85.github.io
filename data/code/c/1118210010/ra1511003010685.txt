#include "stdio.h"
#include "stdlib.h"
#include "ctype.h"
#include "string.h"
 
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define IS_DIGIT(x) ((x) >= '0' && (x) <= '9')
int parse_uint()
{
  int i = 0;
  char c = getchar_unlocked();
  while(!IS_DIGIT(c)) c = getchar_unlocked();
  do {
    i = (i<<3) + (i<<1) + c-'0';
    c = getchar_unlocked();
  }while(IS_DIGIT(c));
  return i;
}
 
typedef struct{
  int age;
  int reports[2];
} chef_t;
 
int stack[100000];
int stacksize = 0;
void push(int n)
{
  //printf("[push %d]", n);
  stack[stacksize++] = n;
}
int pop()
{
  //printf("[pop %d]", stack[stacksize-1]);
  return stack[--stacksize];
}
 
void chefs_to_str(chef_t *c, char *str)
{
  char *strpos = str;
 
  push(1);
 
  while(stacksize > 0){
    int chef = pop();
    if(chef == 0){
      *strpos++ = 127;
      //printf("x ");
      continue;
    }
    else{
      //printf("\n");
      //printf("%d: %d ", chef, c[chef].age);
      *strpos++ = c[chef].age;
      push(c[chef].reports[1]);
      push(c[chef].reports[0]);
      //printf("\n");
    }
  }
  //printf("done\n");
  *strpos = 0;
 
  strpos = str;
  while(*strpos){
    //printf("%d ", *strpos);
    strpos++;
  }
  //  printf("\n");
}
 
void read_org(char *str)
{
  int N = parse_uint();
  int i;
  static chef_t c[100001];
  int head = 0;
 
  // printf("sz: %d, ", N);
  memset(c+1, 0, N*sizeof(chef_t));
 
  for(i = 0; i < N; i++){
    c[i+1].age = parse_uint();
    head += i+1;
  }
 
  for(i = 0; i < N-1; i++){
    int senior = parse_uint();
    int reporting = parse_uint();
    char time;
    head -= reporting;
    time = getchar_unlocked();
    c[senior].reports[time=='E'] = reporting;
  }
 
  if(head != 1){
    int *x = NULL;
    *x = 1;
  }
 
  chefs_to_str(c, str);
}
 
int main(int a, char **v)
{
  char c[2*200000+1], q[2*200000+1];
  int i;
  int Q;
 
  read_org(c);
 
  Q = parse_uint();
  for(i = 0; i < Q; i++){
    read_org(q);
    //    printf("%d: ", i);
    strstr(c, q) ? puts("YES") : puts("NO");
  }return 0;
}
  