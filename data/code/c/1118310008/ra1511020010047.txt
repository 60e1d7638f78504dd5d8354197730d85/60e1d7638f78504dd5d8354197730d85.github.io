#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int cards1[100000];
int cards2[100000];
 
inline void init_cards(int n)
{
   int i;
 
   for (i = 0; i < n; i++)
   {
      cards1[i] = i + 1;
      cards2[i] = i + 1;
   }
}
 
inline void print_cards(int *cards, int n)
{
   int i;
 
   for (i = 0; i < n; i++)
   {
      printf("%d ", cards1[i]);
   }
   
   printf("\n");
}
 
inline void reverse(int *dest, int *src, int b, int offset)
{
   int i, j, k, tmp;
 
   if (offset >= 0)
   {
      for (i = 0; i < b; i++)
      {
         if (offset > 0)
         {
            dest[b - i - 1] = src[i];
	    offset--;
         }
         else
         {
	    break;
         }
      }
      j = 0;
      k = (b - i) / 2;
      for (; i < b && j < k; i++, j++)
      {
         tmp = dest[b - i - 1];
         dest[b - i - 1] = src[i];
         src[i] = tmp;
      }
   }
   else
   {
      for (i = b - 1; i >= 0; i--)
      {
         if (offset < 0)
         {
            dest[b - i - 1] = src[i];
	    offset++;
         }
         else
         {
	    break;
         }
      }
      j = 0;
      k = (i + 1) / 2;
      for (; i >= 0 && j < k; i--, j++)
      {
         tmp = dest[b - i - 1];
         dest[b - i - 1] = src[i];
         src[i] = tmp;
      }
   }
}
 
inline void shuffle(int a, int b, int c, int n)
{
   // [C]:[Br]:[R]
   if (a < c)
   {
      memcpy(&cards2[a], &cards1[a + b], (c - a) * sizeof(int));
      reverse(&cards1[c], &cards1[a], b, c - a);
      memcpy(&cards1[a], &cards2[a], (c - a) * sizeof(int));
   }
   else
   {
      memcpy(&cards2[c + b], &cards1[c], (a - c) * sizeof(int));
      reverse(&cards1[c], &cards1[a], b, c - a);
      memcpy(&cards1[c + b], &cards2[c + b], (a - c) * sizeof(int));
   }
}
 
int main()
{
   int i, n, m;
   int a, b, c;
 
   // Read the number of test cases
   scanf("%d", &n);
   scanf("%d", &m);
 
   init_cards(n);
 
   for (i = 0; i < m; i++)
   {
      scanf("%d", &a);
      scanf("%d", &b);
      scanf("%d", &c);
 
      shuffle(a, b, c, n);
   }
 
   print_cards(cards1, n);
 
   return 0;
}