#include <stdio.h>
#define inchar getchar_unlocked
inline int inIntPos() {
	int n, ch;
	while ((ch = inchar()) < '0');
	n=(ch-'0');
	while((ch = inchar()) >= '0') n=(n<<3)+(n<<1)+(ch-'0');
	return n;
}
 
typedef struct Relation {
	int a,b;
} Relation;
 
#define MAX_N 101
#define MAX_M 10001
 
int d[MAX_N];
Relation data[MAX_M];
int n,m;
 
char c[MAX_N][MAX_N];
int prev[MAX_N];
char mark[MAX_N];
 
int findNextDfs(int k) {
	int i;
	if(k<0) return 1;
	if(mark[k]) return 0;
	mark[k]=1;
	for(i=1;i<=n; ++i) {
		if(!c[k][i]) continue;
		if(findNextDfs(prev[i])) {
			prev[i]=k;
			return 1;
		}
	}
	return 0;
}
 
int calc() {
	int i,j;
	int res=0;
 
	// no relation
	for(i=1; i<=n; ++i) d[i]=0;
	for(i=0; i<m; ++i) {
		++d[data[i].a];
		++d[data[i].b];
	}
	for(i=1; i<=n; ++i) if(!d[i]) ++res;
 
	for(i=1; i<=n; ++i) 
		for(j=1; j<=n; ++j)
			c[i][j]=0;
 
	for(i=0; i<m; ++i) {
		c[data[i].a][data[i].b]=1;
		//c[data[i].b][data[i].a]=1;
	}
	for(i=1; i<=n; ++i) prev[i]=-1;
	for(i=1; i<=n; ++i) {
		if(!d[i]) continue;
		for(j=1; j<=n; ++j) mark[j]=0;
		if(!findNextDfs(i)) ++res;
	}
 
	return res;
}
 
int main() {
	int t,i;
	t=inIntPos();
	while(t--) {
		n=inIntPos();
		m=inIntPos();
		for(i=0; i<m; ++i) {
			data[i].a=inIntPos();
			data[i].b=inIntPos();
		}
		printf("%d\n",calc());
	}
	return 0;
}