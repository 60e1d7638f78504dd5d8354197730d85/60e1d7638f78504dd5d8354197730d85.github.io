#include<stdio.h>
#include<stdlib.h>
#define MAXSOLDIERS 100001
 
struct soldier {
    int s, e, skill, visited;
};
 
struct node {
    int data;
    struct node *next;
};
 
struct node * graph[MAXSOLDIERS];
struct soldier soldiers[MAXSOLDIERS];
int arr[MAXSOLDIERS];
int stree[8*MAXSOLDIERS];
int max = 0;
int t = 0;
 
/*void mapByDFS(int node) {
    soldiers[node].visited = 1;
    soldiers[node].s = t;
    arr[t] = soldiers[node].skill;
    int i;
    for(i = 0; i < MAXSOLDIERS; i++) {
        if (graph[node][i] && !soldiers[i].visited) { // if there's an edge
            t += 1;
            //printf("\n Visiting node %d from %d with time %d..", i, node, t);
            mapByDFS(i);
        }
    }
    soldiers[node].e = t;
}*/
 
void mapByDFS(int v) {
    soldiers[v].visited = 1;
    soldiers[v].s = t;
    arr[t] = soldiers[v].skill;
    struct node *temp = graph[v];
    while (temp) { // if there's an edge
        if (!soldiers[temp->data].visited) {
            t += 1;
            // printf("\n Visiting node %d from %d with time %d..", temp->data, v, t);
            mapByDFS(temp->data);
        }
        temp = temp->next;
    }
    soldiers[v].e = t;
}
 
void buildSTree(int idx, int start, int end) {
 
    max = (idx >= max) ? idx : max;
    int mid;
 
    if (start == end) {
        stree[idx] = arr[start];
    } else {
        mid = (start + end) / 2;
        buildSTree(2*idx+1, start, mid);
        buildSTree(2*idx+2, mid+1, end);
        stree[idx] = stree[2*idx+1] + stree[2*idx+2];
    }
 
}
 
int querySTree(int idx, int start, int end, int min, int max) {
 
    if (start <= min && end >= max) {
        return stree[idx];
    }
 
    if (start > max || end < min) {
        return 0;
    }
 
    int mid = (min + max) / 2;
 
    return querySTree(2*idx+1, start, end, min, mid) + querySTree(2*idx+2, start, end, mid+1, max);
}
 
void updateSTree(int idx, int s, int e, int uid, int delta) {
    if (s <= uid && e >= uid) {
        stree[idx] += delta;
        if (s != e) {
            int mid = (s + e) / 2;
            updateSTree(2*idx+1, s, mid, uid, delta);
            updateSTree(2*idx+2, mid+1, e, uid, delta);
        }
    }
}
 
int main()
{
 
        int i, j, n, m, u, v, qitem, x, y;
        char q[20];
 
        scanf("%d%d", &n, &m);
        for (i = 0; i < n; i++) {
            scanf("%d", &soldiers[i].skill);
            soldiers[i].visited = 0;
            graph[i] = NULL;
        }
 
        for (i = 0; i < n-1; i++) {
            scanf("%d%d", &u, &v);
            u -= 1;
            v -= 1;
 
            struct node *nd;
            nd = (struct node *)malloc(sizeof(struct node));
            nd->next = graph[v];
            nd->data = u;
            graph[v] = nd;
 
            nd = (struct node *)malloc(sizeof(struct node));
            nd->next = graph[u];
            nd->data = v;
            graph[u] = nd;
        }
 
        // printf("\n   ");
        // for (j = 0; j < n; j++) {
        //     printf("%d ", j);
        // }
 
        // for (i = 0; i < n; i++) {
        //     printf("\n%d: ", i);
        //     struct node *temp = graph[i];
        //     while (temp) {
        //         printf("%d ", temp->data);
        //         temp = temp->next;
        //     }
        // }
 
        mapByDFS(0);
 
        // for (i = 0; i < n; i++) {
        //     printf("\n Soldier %d: ", i);
        //     printf("%d %d", soldiers[i].s, soldiers[i].e);
        // }
 
        buildSTree(0, 0, n-1);
 
 
        // printf("\n");
        // for (i = 0; i <= max; i++) {
        //     printf("%d ", stree[i]);
        // }
 
        //return 0;
        printf("\n");
        for (i = 0; i < m; i++) {
            scanf("%s", q);
            if (q[0] == 'Q') {
                scanf("%d", &qitem);
                printf("%d\n", querySTree(0, soldiers[qitem-1].s, soldiers[qitem-1].e, 0, n-1));
            } else if (q[0] == 'U') {
                scanf("%d%d", &x, &y);
                updateSTree(0, 0, n-1, soldiers[x-1].s, y - soldiers[x-1].skill);
                soldiers[x-1].skill = y;
            }
        }
        return 0;
}