#include <stdio.h>
#include <stdlib.h>
 
typedef long long int lint;
 
#define MOD 1000000007
 
long long int multInverse(lint n);
void sort(int* array, int start, int end, int* temp)
{
    if (start >= end - 1)
    {
        return;
    }
    int mid = start + (end - start) / 2;
    sort(array, start, mid, temp);
    sort(array, mid, end, temp);
    int findex = start;
    int sindex = mid;
    int nextindex = 0;
    while (nextindex != end - start)
    {
        if (findex == mid || (sindex != end && array[findex] > array[sindex]))
        {
            temp[nextindex] = array[sindex];
            nextindex++;
            sindex++;
        }
        else
        {
            temp[nextindex] = array[findex];
            nextindex++;
            findex++;
        }
    }
    nextindex = 0;
    while (nextindex != end - start)
    {
        array[start + nextindex] = temp[nextindex];
        nextindex++;
    }
}
void helper(long long int a, long long int b, long long int* x, long long int* y)
{
    long long int mult = a / b;
    long long int rem = a % b;
    if (rem == 1)
    {
        *x = (lint)1;
        *y = mult;
        return;
    }
    long long int recx;
    long long int recy;
    helper(b, rem, &recx, &recy);
    *x = -recy;
    *y = -recy * mult - recx;
    *y %= MOD;
    return;
}
 long long int multInverse(lint n)
{
    if (n == 1)
    {
        return 1;
    }
    lint x;
    lint y;
    helper(MOD, n, &x, &y);
    y %= MOD;
    y *= -1;
    while (y < 0)
    {
        y += MOD;
    }
    if (y >= MOD)
    {
        y %= MOD;
    }
    return y;
}
 
int main()
{
    int n, k, x, i;
    scanf("%d %d %d", &n, &k, &x);
    if (k == 1)
    {
        printf("%d\n", n);
    }
    // cache[i] = i + 1 choose k - 1
    lint* binoms = malloc(sizeof(lint) * 500000);
    for (i = 0; i < k - 2; i++)
    {
        binoms[i] = 0;
    }
    binoms[k - 2] = 1;
    for ( i = k - 1; i < 500000; i++)
    {
        binoms[i] = binoms[i - 1] * (i + 1);
        binoms[i] %= MOD;
        binoms[i] *= multInverse(i + 2 - k);
        binoms[i] %= MOD;
    }
    int* array = malloc(sizeof(int) * n);
    for ( i = 0; i < n; i++)
    {
        scanf("%d", array + i);
    }
    int* temp = malloc(sizeof(int) * n);
    sort(array, 0, n, temp);
    lint result = 0;
    int lastpos = 0;
    for ( i = 0; i < n; i++)
    {
        int tofind = array[i] + x;
        int start = lastpos;
        int end = n;
        while (start < end - 1)
        {
            int mid = start + (end - start) / 2;
            if (array[mid] > tofind)
            {
                end = mid;
            }
            else
            {
                start = mid + 1;
            }
        }
        if (start != n && array[start] <= tofind)
        {
            start++;
        }
        lastpos = start;
        int count = start - i;
        if (count > 1)
        {
            result += binoms[count - 2];
            if (result >= MOD)
            {
                result -= MOD;
            }
        }
    }
    printf("%lld\n", result);
    free(binoms);
    free(array);
    free(temp);
    return 0;
}
 

 
