#include<stdio.h>
#include<stdlib.h>
 
typedef struct
{
    int *A;
    int head;
    int tail;
} Q;
 
void enqueue(Q *bfs, int x)
{
    (bfs->tail)++;
    bfs->A[bfs->tail] = x;
}
 
int dequeue(Q *bfs)
{
    (bfs->head)++;
    return bfs->A[(bfs->head)-1];
}
 
typedef struct
{
    int no;
    int col;
    int P;
    int d;
    int min;
} V;
 
typedef struct node
{
    V *ver;
    struct node *next;
} NODE;
 
void BFS(V *A, NODE **list, V S, int n, int k)
{
    int i, x;
    for(i=0;i<n;i++)
        A[i].col = 0;
    Q bfs;
    bfs.A = (int *)malloc((n+2)*sizeof(int));
    bfs.head = 0;
    bfs.tail = -1;
    enqueue(&bfs, S.no);
    S.col = 1;
    NODE *tmp;
    while(bfs.head!=(bfs.tail+1))
    {
        x = dequeue(&bfs);
        tmp = list[x]->next;
        while(tmp!=NULL)
        {
            if(tmp->ver->col==0)
            {
                enqueue(&bfs, tmp->ver->no);
                tmp->ver->col = 1;
                if(k==0)
                    tmp->ver->d = A[x].d + 1;
                else
                {
                    tmp->ver->P = x;
                    if(tmp->ver->d < A[x].min)
                        tmp->ver->min = tmp->ver->d;
                    else
                        tmp->ver->min = A[x].min;
                }
            }
            tmp = tmp->next;
        }
        A[x].col = 2;
    }
}
 
int main()
{
    int n, k, b, i, x, y, *F, q, a, p;
    scanf("%d %d", &n, &k);
    F = (int *)malloc(n*sizeof(int));
    V *A;
    A = (V *)malloc(n*sizeof(V));
    NODE **list, *tmp;
    list = (NODE **)malloc(n*sizeof(NODE *));
    for(i=0;i<n;i++)
    {
        A[i].no = i;
        A[i].P = -1;
        A[i].d = 1000;
        A[i].min = 1000;
        list[i] = (NODE *)malloc(sizeof(NODE));
        list[i]->ver = A+i;
        list[i]->next = NULL;
    }
    scanf("%d", &b);
    A[b-1].d = 0;
    for(i=0;i<n-1;i++)
    {
        scanf("%d %d", &x, &y);
        tmp = list[x-1];
        while(tmp->next!=NULL)
            tmp = tmp->next;
        tmp->next = (NODE *)malloc(sizeof(NODE));
        tmp->next->ver = A+(y-1);
        tmp->next->next = NULL;
 
        tmp = list[y-1];
        while(tmp->next!=NULL)
            tmp = tmp->next;
        tmp->next = (NODE *)malloc(sizeof(NODE));
        tmp->next->ver = A+(x-1);
        tmp->next->next = NULL;
    }
    BFS(A, list, A[b-1], n, 0);
    for(i=0;i<n;i++)
        scanf("%d", F+i);
    scanf("%d", &q);
    for(;q>0;q--)
    {
        scanf("%d %d", &a, &p);
        A[a-1].min = A[a-1].d;
        BFS(A, list, A[a-1], n, 1);
        for(i=0, x=-1, y=-2;i<n;i++)
        {
            if(F[i]==p)
            {
                if(A[i].min>x)
                {
                    x = A[i].min;
                    y = i;
                }
            }
        }
        y++;
        printf("%d\n", y);
    }
    return 0;
}