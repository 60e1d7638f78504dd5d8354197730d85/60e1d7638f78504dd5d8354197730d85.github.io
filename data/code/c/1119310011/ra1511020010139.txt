#include <stdio.h>
#define LL long long
#define mod 1000000007
long long int fact[1048577];
long long int ifact[1048577];
long long int pow2(long long int a,long long int b)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>mod) x%=mod;
        }
        y = (y*y);
        if(y>mod)
            y%=mod;
        b /= 2;
    }
    return x;
}
void factorial()
{
    int i;
    fact[0]=1;fact[1]=1;
    ifact[0]=1;
    for(i=2;i<800004;i++)
    {
        fact[i]=(i*fact[i-1])%mod;
    }
    ifact[800000] = pow2(fact[800000],mod-2);
    for(i=800000;i>1;i--)
        ifact[i-1] = ifact[i]*i%mod;
}
 
 
 
/*  Modular Multiplicative Inverse
 Using Euler's Theorem
 a^(phi(m)) = 1 (mod m)
 a^(-1) = a^(m-2) (mod m) */
long long int InverseEuler(long long int n)
{
    return pow2(n,mod-2);
}
 
long long int nCr(long long int n, long long int r)
{
    return (((fact[n]*ifact[r])%mod)*ifact[n-r])%mod;
}
int main(int argc, const char * argv[]) {
    // insert code here...
    factorial();
    int r,i;
    scanf("%d",&r);
    while (r--)
    {
        LL int n,m,a,b;
        scanf("%lld %lld %lld %lld",&n,&m,&a,&b);
        // (a-b)%m = ( a%m - b%m + m )%m
        
        /*LL int x = nCr(n+m, n);
        LL int y=0;
        for(i=0;i<b;i++)
        {
            y+=(nCr(n-a, i)*nCr(a, b-i))%mod;
            y=y%mod;
        }
        //LL int y = nCr(a+b, a);
        LL int ans = (x-y+mod)%mod;
        ans = (ans)%mod;
        printf("%lld\n",ans);*/
        
        long long int ans=0;
        for(i=0;i<=n-a;i++)
        {
            ans+=((nCr(b-1+i,b-1)*nCr(m+n-b-i,m-b))%mod);
            ans%=mod;
        }
        printf("%lld\n",ans);
            
    }
    return 0;
}
 