#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
int prime[100000] = {0} , array[100000] , h ;
long long int ipow(long long int base, long long int exp , long long int m );
long long int tor( long long int a  );
long long int tors( long long int a );
int v[11][11];
void f()
{
    int i , j ;
    int l = sqrt(1000000000);
    for( i = 2 ; i < l ; i++)
        if( prime[i] == 0)
            for( j = 2*i ; j < l ; j += i )
                prime[j]++;
    j = 0;
    for( i = 2 ; i < l ; i++ )
        if( prime[i] == 0)
            array[j++] = i; 
    h = j;
}
int pw[] = { 0 , 1 , 4 , 27 , 256 , 3125};
int main()
{
    f();
    long long int t , n , m , q , r , i , j;
    for( i = 0 ; i < 11 ; i++)
    	for( j = 0 ; j < 11 ; j++)
    		v[i][j] = -1;
    v[2][2] = 2;
    v[3][3] = 3;
    v[4][2] = 8;
    v[5][5] = 5; 
    v[6][2] = 6;
    v[6][3] = 6;
    v[7][7] = 7;
    v[8][2] = 24;
    v[9][3] = 18;
    v[10][2] = 10;
    v[10][5] = 10;
    int num[12]  , ii;
 
    long long int arr[100005] , p1 , p2 , p3 , fuck , tmp;
    scanf("%lld" , &t);
    while(t--)
    {
        scanf("%lld %lld %lld" , &n , &m , &q);
        arr[0] = 1;
        if( n <= 5 )
        {
            arr[0] = 1;
            for( i = 1 ; i <= ( n/ 2 ) ; i++)
            {
                p1 = pw[n-i+1] ;
                p2 = pw[i];
                p3 = (p1/p2);
                p3 %= m;
                arr[i] = (p3*arr[i-1] ) % m ;
            }
        }
        else if( n <= 10)
        {
        	memset( num , 0 , sizeof(num) );
        //	memset( dem , 0 , sizeof(dem) );
        	 for( i = 1 ; i <= (n / 2) ; i++)
            {
            	tmp = 1;
                for( ii = 2 ; ii < 11 ; ii++)
                	if( v[n-i+1][ii] != -1)
                		num[ii] += v[n-i+1][ii];
                for( ii = 2 ; ii < 11 ; ii++)
                	if( v[i][ii] != -1)
                		num[ii] -= v[i][ii];
                for( ii = 2 ; ii < 11 ; ii++)
                	if( num[ii] > 0 )
                		{
                			tmp *= ipow( ii , num[ii], m );
                			tmp %= m;
                		}
                  arr[i] = (tmp)%m ;
            }
        }
        else 
        {
            if( m != 1 )fuck = tors(m) - 1;
            else goto p;
            for( i = 1 ; i <= (n / 2) ; i++)
            {
                p1 = ipow( n - i + 1 ,  n - i + 1 , m ) % m;
                p2 = ipow(  ipow( i , fuck , m ), i  , m ) % m;
                p3 = ( p1*p2)%m;
                //            printf("%lld %lld %lld %lld %lld\n\n" , n-i+1 , m , p1 , p2 , p3);
                arr[i] = (arr[i-1]*p3)%m ;
            }
        }
        p:       
        while(q--)
        {
            scanf("%lld" , &r);
            if( m == 1)
            	puts("0");
            else if( r > n / 2 )
            {
                printf("%lld\n" , arr[ n - r ] );
            }
            else printf("%lld\n" , arr[r] );
        }
    }
    return 0;
}
 
long long int ipow(long long int base, long long int exp , long long int m )
{
    if( exp == 0)
        return 1;
    if( exp % 2 == 0)
    {
        long long int x = ipow( base , exp / 2 , m ) % m;
        return (x*x)%m;
    }
    return  ( base*ipow( base , exp-1 , m ) ) % m;
}
 
long long int tors( long long int n )
{
    int  i ; 
    long long int  ans = n;
 
    for( i = 0 ; i < h && array[i] < n; i++)
    {
        if( n % array[i] == 0 )
        {
 
            ans /= array[i];
            ans *= ( array[i] - 1);
            while( n % array[i] == 0 )
                n /= array[i];
        }
        if( n == 1 )
            return ans;
    }
    ans /= n;
    ans *= ( n - 1 );
    return ans;
}
