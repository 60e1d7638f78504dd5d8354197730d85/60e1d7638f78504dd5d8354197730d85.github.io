#include <stdio.h>
#include <string.h>
#define mod 1000000007
#define MOD 1000000007 
long long int fact[100001]={0};
 
/*long long int fact(long long int n)
{
  long long int ans=1;
  if(factorial[n]>0)
    return factorial[n];
  else
  {
    while(n>1)
      ans=(ans*n--)%mod;
    factorial[n]=ans;
  }
  return ans; 
}*/
 
long long int power(long long int n, long long int exp)
{
  if(exp==0 || n==1)
    return 1;
  if(exp & 1)
  {
    long long int temp = power(n, exp>>1);
    return (  (temp * temp) % mod  * n  ) % mod;
  }
  else
  {
    long long int temp = power(n, exp>>1);
    return (temp * temp) % mod;
  }
}
 
long long int ncr(long long int n, long long int r)
{
  if(n==r || r==0)
    return 1;
  if(n<r)
    return 0;
  long long int num=1,den=1;
  long long int j=r;
  while(j--)
  {
      num=(num*n)%mod;
      n--;
  }
  den=power(fact[r],mod-2);
  return (num*den)%mod;
}
 
 
/*long long ncr(long long n,long long r)
{register long long i=0,j,k;
long long num,den=1;
if((r==0)||(n==r))return 1;
if(n<r) return 0;
num=1;
j=r;
while(j--)
  {
    num=(num*(n))%MOD;
    n--;}
den=power(fact[r],MOD-2);
return ((num*den)%MOD);}
*/
 
int main()
{
  char str[100005];
  int t;
  fact[0]=1,fact[1]=1;
  int i=2;
  while(i<100001)
  {
    fact[i]=(fact[i-1]*i)%mod;
    i++;
  }
  scanf("%d", &t);
  while(t--)
  {
    long long int  len, i, j, k, l;
    long long int count[26]={0},nc2[26], ans=0, div=1, temp, perms;
    scanf("%s", str);
    len=strlen(str);
    for(i=0;i<len;i++)
      count[str[i]-97]++;
      
    //calcuate nc2
    for(i=0;i<26;i++)
      nc2[i]=ncr(count[i],2);
    
    //calculate number of permutations
    for(i=0;i<26;i++)
      if(count[i]>1)
        div=(div * fact[count[i]] ) % mod;
    //printf("%lld\n",div);   
    div=power(div, 1000000005); 
    perms=(fact[len]*div)%mod;
    
    //no swap
    ans+=1;
    
    //1 swap
    temp=0;
    for(i=0;i<26;i++)
    {
      for(j=i+1;j<26;j++)
        temp = (temp + (count[i]*count[j]) % mod) % mod;
    }
    //printf("%lld\n",temp);
    ans=(ans+temp)%mod;
    
    //2 swaps -- overlapping swaps
    temp=0;
    for(i=0;i<26;i++)
      for(j=i+1;j<26;j++)
        for(k=j+1;k<26;k++)
          temp=(temp  + ( ((count[i]*count[j])%mod) * count[k]) %mod  )%mod;
          //temp=(temp+(count[i]*count[j]*count[k])%mod)%mod;
    temp=(temp*2)%mod;
    //printf("%lld\n",temp);
    ans=(ans+temp)%mod;
    
    //2 swaps -- disjoint swaps -- 2 chars common
    temp=0;
    for(i=0;i<26;i++)
      for(j=i+1;j<26;j++)
      {
        /*if(count[i]<=1 || count[j]<=1)
          continue;
        else*/
        {
          //temp=(temp +  (((count[i]*(count[i]-1))%mod)*temp)%mod  * (((count[j]*(count[j]-1))%mod)*temp1)%mod       )%mod;
          temp=(temp + (nc2[i]*nc2[j])%mod) %mod;
        }
      }
    //printf("%lld\n",temp);  
    ans=(ans+temp)%mod;
    
    //2 swaps -- disjoint swaps  -- 1 char common
    temp=0;
    for(i=0;i<26;i++)
      for(j=0;j<26;j++)
        for(k=j+1;k<26;k++)
          if(/*count[i]>=2*/ 1 && i!=j  && i!=k)
            //temp=(temp +  ((((count[i]*(count[i]-1))%mod)*count[j])%mod)*count[k]%mod  )%mod;
            temp=(temp+(count[i]*(count[i]-1)%mod*(count[j]*count[k])%mod)%mod)%mod;
    //printf("%lld\n",temp);        
    ans=(ans+temp)%mod;
    
    //2 swaps -- disjoint swaps -- no chars common
    temp=0;
    for(i=0;i<26;i++)
      for(j=i+1;j<26;j++)
        for(k=j+1;k<26;k++)
          for(l=k+1;l<26;l++)
            temp=(temp + (((((count[i]*count[j])%mod)*count[k])%mod)*count[l]%mod)          )%mod;
            //temp=(temp+((count[i]*count[j])%mod*(count[k]*count[l])%mod)%mod)%mod;
    temp=(temp*3)%mod;
    //printf("%lld\n",temp);
    ans=(ans+temp)%mod;
    
    ans=(ans*perms)%mod;
    printf("%lld\n",((power(perms,2)-ans+mod)%mod));
  }
  return 0;
} 