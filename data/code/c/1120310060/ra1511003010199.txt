#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int compare(const void *a,const void *b)
{
  return *(int*)a-*(int*)b;
}
typedef struct __node
{
  int val,start,end;
}_node;
_node node[7000000];
int b[250005],x[250005],y[250005],s[250005][3],z[250005];
char c[250005][2];
int binarysearch(int arr[],int key,int low,int high)
{
  while(low<=high)
    {
      int mid=(low+high)>>1;
      if(arr[mid]==key)return mid;
      else if(key>arr[mid])low=mid+1;
      else high=mid-1;
    }
  return low;
}
void initialize(int i,int p,int q)
{
  node[i].start=p;
  node[i].end=q;
  node[i].val=0;
  if(node[i].start!=node[i].end)
    {
      initialize((i<<1)+1,p,(p+q)>>1);
      initialize((i<<1)+2,((p+q)>>1)+1,q);
    }
}
void update(int i,int p,int q,int value)
{
  if(node[i].end<p || node[i].start>q)
    return;
  if(node[i].start>=p && node[i].end<=q)
    {
      node[i].val+=value;
      return;
    }
  if(node[i].start!=node[i].end)
    {
      update((i<<1)+1,p,q,value);
      update((i<<1)+2,p,q,value);
    }
}
int query(int i,int p)
{
  if(node[i].start==node[i].end)return node[i].val;
  int x=(node[i].start+node[i].end)>>1;
  if(x>=p)
    return node[i].val+query((i<<1)+1,p);
  else
    return node[i].val+query((i<<1)+2,p);
}
int main()
{
  int i,n,m,bcount,obcount,j,ans,k;
  bcount=0;
  scanf("%d %d",&n,&m);
  for(i=0;i<m;i++)
    {
      scanf("%s",c[i]);
      if(strcmp(c[i],"P")==0)
	{
	  scanf("%d %d",&s[i][0],&s[i][1]);
	}
      else if(strcmp(c[i],"B")==0)
	{
	  scanf("%d",&s[i][0]);
	  b[bcount++]=s[i][0];
	}
      else if(strcmp(c[i],"M")==0)
	{
	  scanf("%d %d",&s[i][0],&s[i][1]);
	}
    }
  qsort(b,bcount,sizeof(int),&compare);
  obcount=0;
  for(i=1;i<bcount;i++)
    {
      if(b[i]!=b[i-1])
	{
	  b[obcount++]=b[i-1];
	}
    }
  b[obcount++]=b[i-1];
  initialize(0,0,obcount-1);
  j=0;
  for(i=0;i<m;i++)
    {
      if(strcmp(c[i],"P")==0)
	{
	  x[j]=binarysearch(b,s[i][0],0,obcount-1);
	  if(b[x[j]]<s[i][0])
	    x[j]++;
	  y[j]=binarysearch(b,s[i][1],0,obcount-1);
	  if(b[y[j]]>s[i][1])
	    y[j]--;
	  z[j]=i;
	  update(0,x[j],y[j],1);
	  j++;
	}
      else if(strcmp(c[i],"B")==0)
	{
	  ans=binarysearch(b,s[i][0],0,obcount-1);
	  printf("%d\n",query(0,ans));
	}
      else if(strcmp(c[i],"M")==0)
	{
	  k=s[i][0]-1;
	  update(0,x[k],y[k],-1);
	  s[z[k]][0]+=s[i][1];
	  s[z[k]][1]+=s[i][1];
	  x[k]=binarysearch(b,s[z[k]][0],0,obcount-1);
	  if(b[x[k]]<s[z[k]][0])
	    x[k]++;
	  y[k]=binarysearch(b,s[z[k]][1],0,obcount-1);
	  if(b[y[k]]>s[z[k]][1])
	    y[k]--;
	  update(0,x[k],y[k],1);
	}
    }
  return 0;
}
 