#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
//#include <unordered_set>
//#include <unordered_map>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
const int N = 10;
const int M = 107;
const int MOD = 1e9 + 7;
int p[M];
int q[2][ 1 << N ];
void st(int a[], int pos)
{
  a[ pos / 32 ] |= 1 << ( pos % 32 );
}
int addM( int a, int b )
{
  a += b;
  return a >= MOD ? a - MOD : a;
}
int subM( int a, int b)
{
  a -= b;
  return a < 0 ? a + MOD : a;
}
int mulM( ll a, ll b )
{
  a *= b;
  return a >= MOD ? a % MOD : a;
}
int main()
{
  int T;
  scanf("%d\n", &T);
  for( ; T--; )
    {
      int n;
      scanf("%d\n", &n);
      memset( p, 0, sizeof(p) );
      for( int i = 0 ; i < n ; ++i )
	{
	  for( ; ; )
	    {
	      char c;
	      int val(0);
	      int r(0);
	      for( ; ; )
		{
		  r = scanf("%c", &c);
		  if( r == EOF || c < '0' || c > '9' )
		    break;
		  val = val * 10 + c - '0';
		}
	      p[val] |= 1 << i;
	      if( r == EOF || c == '\n' )
		break;
	    }
	}
      int f = 0, to = 1;
      memset( q[f], 0, sizeof(q[f]) );
      q[f][0] = 1;
      for( int i = 1 ; i <= 100 ; ++i )
	{
	  memcpy( q[to], q[f], sizeof(q[to]) );
	  for( int j = 1 ; j < ( 1 << n ) ; ++j )
	    for( int k = p[i] & j; k; k ^= ( k & ( -k ) ) )
	      {
		q[to][j] = addM( q[to][j], q[f][j ^ ( k & (-k) ) ] );
	      }
	  swap( f, to);
	}
      printf("%d\n", q[f][ ( 1 << n ) - 1 ] );
    }
  return 0;
}