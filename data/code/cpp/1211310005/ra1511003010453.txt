#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
 
using std::cout;
using std::cin;
using std::endl;
using std::vector;
using std::string;
 
class Point {
public:
	Point() : x{0}, y{0} { }
	Point(int xc, int yc) : x{xc}, y{yc} { }
 
	int get_x() const { return x; }
	int get_y() const { return y; }
 
private:
	int x;
	int y;
};
 
int tri_area(Point p1, Point p2, Point p3) { 
	return std::abs( (p1.get_x()*p2.get_y() - p2.get_x()*p1.get_y()) +
					 (p2.get_x()*p3.get_y() - p3.get_x()*p2.get_y()) +
					 (p3.get_x()*p1.get_y() - p1.get_x()*p3.get_y()) 
					);
} 
 
std::ostream& operator<<(std::ostream& os, Point p) {
	return os << p.get_x() << " " << p.get_y();
}
 
int main() {
	int n;
	scanf("%d", &n);
 
	int max_area = -1;
	int min_area = 999999999;
	int current_area;
	int min_index = 0, max_index = 0;
	int x1, y1, x2, y2, x3, y3;
	for(int i = 0; i < n; ++i) {
		scanf("%d %d %d %d %d %d", &x1, &y1, &x2, &y2, &x3, &y3);
		current_area = tri_area(Point{x1, y1}, Point{x2, y2}, Point{x3, y3});
		if(current_area >= max_area) {
			max_area = current_area;
			max_index = i + 1;
		}
		if(current_area <= min_area) {
			min_area = current_area;
			min_index = i + 1;
		}
	}
 
	printf("%d %d\n", min_index, max_index);
 
	return 0;
}