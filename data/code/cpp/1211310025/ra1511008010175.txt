#ifdef _MONYURA_
#pragma comment(linker,"/STACK:256000000")
#endif
 
#include <iostream>
#include <cstdio>
#include <bitset>
#include <memory>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <cstring>
#include <fstream>
#include <functional>
#include <stack>
#include <complex>
#include <wchar.h>
#include <wctype.h>
#include <cmath>
#include <queue>
#include <ctime>
#include <numeric>
 
 
using namespace std;
 
#define rep(x,y,z) for(int x=(y),e##x=(z);x<e##x;x++)
#define SQ(x) ((x)*(x))
#define all(c) (c).begin(), (c).end()
 
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef short int si;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<ll,int> pli;
 
const double PI=acos(-1.0);
 
typedef pair<pli,pli> pp;
 
bool can9[11]={0,1,0,1,1,1,0,1,0,1,1};
bool Can[11][11]={0};
int Best[11][11];
 
int getRes(int *M,int *S,int *Ten,int cnt,int n,int s,int m)
{
	int res=s;
	int m89[10]={0};
	int next=0;
	rep(i,0,cnt)
	{
		int add=8;
		if (can9[S[i]])
			add=9;
		m89[i+1]=Ten[i]*add+next;
		next=m89[i+1];
	}
	int curr=0;
	bool ok = true;
	bool firstDig = true;
	for (int i=cnt-1;i>=0;i--)
	{
		int d = Best[S[i]][M[i]];
		if (d!=-1)
		{
			if (!((curr*10+d)==0 && firstDig && S[i]!=10))
				res=max(res,(curr*10+d)*Ten[i]+m89[i]);
		}
		if (!Can[S[i]][M[i]])
		{
			ok=false;
			break;
		}
		else
		{
			curr=curr*10+M[i];
		}
		if (S[i]!=10)
			firstDig=false;
	}
	if (ok)
		res=max(res,m);
	return res;
}
 
void test()
{
	int s,m;
	scanf("%d%d",&s,&m);
	int M[10]={0};
	int S[10]={0};
	int A[10]={0};
	int tmp=m;
	int cnt=0;
	while (tmp)
	{
		M[cnt++]=tmp%10;
		tmp/=10;
	}
	if (m==0)
	{
		M[cnt++]=0;
	}
	tmp=s;
	int n=0;
	while (tmp)
	{
		A[n++]=tmp%10;
		tmp/=10;
	}
	if (s==0)
	{
		A[n++]=0;
	}
	int Ten[8]={1};
	rep(i,1,8)
		Ten[i]=Ten[i-1]*10;
	int res=s;
	rep(i,0,cnt-n+1)
	{
		rep(j,0,cnt)
			S[j]=10;
		rep(j,0,n)
			S[i+j]=A[j];
		int curr=getRes(M,S,Ten,cnt,n,s,m);
		res=max(curr,res);
	}
	printf("%d\n",res);
}
 
void run()
{
	int A[11][12]={
		{0,8,-1},
		{0,1,3,4,7,8,9,-1},
		{2,8,-1},
		{3,8,9,-1},
		{4,8,9,-1},
		{5,6,8,9,-1},
		{6,8,-1},
		{0,3,7,8,9,-1},
		{8,-1},
		{8,9,-1},
		{0,1,2,3,4,5,6,7,8,9,-1}};
	rep(i,0,11)
		rep(j,0,12)
			if (A[i][j]==-1)
				break;
			else
				Can[i][A[i][j]]=1;
	rep(i,0,11)
		rep(j,0,10)
		{
			int d=-1;
			rep(k,0,j)
				if (Can[i][k])
					d=k;
			Best[i][j]=d;
		}
	int t;
	cin>>t;
	rep(i,0,t)
		test();
	
}
 
 
 
int main()
{
#ifdef _MONYURA_
	freopen("test.in","r",stdin);
	freopen("test.out","w",stdout);
	time_t st=clock();
#else
	
#endif
	run();
#ifdef _MONYURA_
	printf("=============\n");
	printf("Time: %.2lf sec\n",(clock()-st)/double(CLOCKS_PER_SEC));
#endif
 
	return 0;
}