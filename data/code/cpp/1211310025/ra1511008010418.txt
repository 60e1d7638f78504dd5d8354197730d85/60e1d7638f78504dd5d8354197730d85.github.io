#include <cstdio>
#include <algorithm>
using namespace std;
 
const int Inf = 1000000000;
const int Maxd = 10;
const int len[Maxd] = {2, 7, 2, 3, 3, 4, 2, 5, 1, 2};
const int C[Maxd][Maxd] = {{0, 8},
							{0, 1, 3, 4, 7, 8, 9},
							{2, 8},
							{3, 8, 9},
							{4, 8, 9},
							{5, 6, 8, 9},
							{6, 8},
							{0, 3, 7, 8, 9},
							{8},
							{8, 9}};
 
int t;
int s, m;
int res;
 
int getBest(bool fir, int lvl1, int lvl2, int m, int s, int pw)
{
	//printf("(%d, %d, %d, %d, %d, %d)\n", fir, lvl1, lvl2, m, s, pw);
	if (lvl1) {
		if (m / pw == 0) return getBest(fir, lvl1 - 1, lvl2, m, s, pw / 10);
		if (m % pw == pw - 1) return m / pw * pw + getBest(false, lvl1 - 1, lvl2, m % pw, s, pw / 10);
		return max(m / pw * pw + getBest(false, lvl1 - 1, lvl2, m % pw, s, pw / 10),
					(m / pw - 1) * pw + getBest(fir && m / pw - 1 == 0, lvl1 - 1, lvl2, pw - 1, s, pw / 10));
	} else if (lvl2) {
		int pw2 = 1;
		for (int i = 0; i < lvl2 - 1; i++) pw2 *= 10;
		int dig = s / pw2;
		int i = 0;
		while (i + 1 < len[dig] && C[dig][i + 1] <= m / pw) i++;
		//printf("dig = %d, i = %d\n", dig, i);
		if (C[dig][i] > m / pw || i == 0 && C[dig][i] == 0 && fir) return -Inf;
		//printf("here\n");
		if (m / pw == 0) return getBest(false, lvl1, lvl2 - 1, m, s % pw2, pw / 10);
		if (C[dig][i] < m / pw) return C[dig][i] * pw + getBest(fir && C[dig][i] == 0, lvl1, lvl2 - 1, pw - 1, s % pw2, pw / 10);
		if (i == 0 || i == 1 && C[dig][i - 1] == 0 && fir) return C[dig][i] * pw + getBest(fir && C[dig][i] == 0, lvl1, lvl2 - 1, m % pw, s % pw2, pw / 10);
		if (m % pw == pw - 1) return C[dig][i] * pw + getBest(false, lvl1, lvl2 - 1, m % pw, s % pw2, pw / 10);
		return max(C[dig][i] * pw + getBest(false, lvl1, lvl2 - 1, m % pw, s % pw2, pw / 10),
					C[dig][i - 1] * pw + getBest(fir && C[dig][i - 1] == 0, lvl1, lvl2 - 1, pw - 1, s % pw2, pw / 10));
	} else return m;
}
 
int main()
{
	scanf("%d", &t);
	while (t--) {
		scanf("%d %d", &s, &m);
		int md = 1, sd = 1;
		int pw = 1;
		while (10 * pw <= m) { 
			pw *= 10; md++;
			if (pw <= s) sd++;
		}
		res = 0;
		for (int i = 0; i <= md - sd; i++)
			res = max(res, getBest(true, i, sd, m, s, pw));
		printf("%d\n", res);
	}
	return 0;
} 