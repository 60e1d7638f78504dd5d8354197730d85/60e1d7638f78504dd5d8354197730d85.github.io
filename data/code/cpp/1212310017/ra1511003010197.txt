#include <stdio.h>
#include <assert.h>
 
#define P1 43LL
#define P2 1103LL
#define P3 2083LL
#define P4 1012201LL
#define P  (P1*P2*P3*P4)
#define N  10000
 
int inv[N+10], b[N+10], bm[N+10];
 
int extend_gcd(int a, int b, int &x, int &y)
{
  if(b == 0) {
    x = 1; y = 0;
    return a;
  } else {
    int d = extend_gcd(b, a%b, y, x);
    y -= a/b*x;
    return d;
  }
}
 
void precompute(int p, long long M[], long long C[])
{
  // inv[n] = -(p/n)*inv[p%n]
  inv[1] = 1;
  for(int i = 2; i < N+10 && i < p; i++)
    inv[i] = (int)((((long long)p - (long long)(p/i))*(long long)inv[p%i]) % p);
 
  // Motzkin number: M[n+1] = M[n] + sum(M[i]*M[n-1-i], {i,0,n-1})
  // Catalan number: M[n+1] = sum(M[i]*M[n-i], {i,0,n})
  // M[n+1] = ((2n+3)*M[n]+3n*M[n-1])/(n+3), M[0] = 1
  // C[n+1] = 2(2n+1)*C[n]/(n+2), C[0] = 1
  C[0] = C[1] = 1;
  for(int i = 2; i <= N; i++) {
    if((i+1)%p)
      C[i] = ((((long long)(4*i-2)*(long long)C[i-1]) % p) * (long long)inv[(i+1)%p] % p);
    else {
      // C[kp] = (k+1)*C[k]
      // C[kp-1] = (-C[kp])/2
      int k = (i+1)/p;
      C[i] = (((long long)p-(long long)(k+1)*C[k]%p)*(long long)((p+1)/2)) % p;
    }
  }
  M[0] = M[1] = 1; b[0] = bm[0] = 1;
  for(int i = 2; i <= N; i++) {
    if((i+2)%p)
      M[i] = ((((long long)(2*i+1)*(long long)M[i-1]+(long long)(3*i-3)*(long long)M[i-2]) % p) * (long long)inv[(i+2)%p] % p);
    else {
      // M[np] = M[np+1] = sum{ k=0..n/2, C(n,2k)*C(2k,k) }
      // M[np-1] = (M[np]-9*M[np-3])*(p+1)/2
      // M[np-2] = (M[np]+3*M[np-3])*(p+1)/2
      int n = (i+2)/p;
      b[n] = b[n-1];
      for(int k = n-1; k > 0; k--) {
        b[k] += b[k-1];
        if(b[k] >= p) b[k] -= p;
      }
      if(!(n&1)) bm[n/2] = b[n/2];
      long long x = 0;
      for(int k = 0; 2*k<=n; k++) {
        x += (long long)b[2*k]*(long long)bm[k];
        x %= p;
      }
      M[i+2] = M[i+3] = x;
      M[i+1] = ((M[i+2]-9*M[i-1])*(long long)((p+1)/2))%p;
      if(M[i+1]<0) M[i+1] += p;
      M[i] = ((M[i+2]+3*M[i-1])*(long long)((p+1)/2))%p;
      if(M[i]) M[i] = p-M[i];
      i += 3;
    }
  }
}
 
void merge(int pa, long long Ma[], long long Ca[], int pb, long long Mb[], long long Cb[])
{
  // ka*pa=1 (mod pb)
  // x=ra (mod pa), x=rb (mod pb) => x= ka*pa*(rb-ra) + ra (mod pa*pb)
  int ka, kb;
  extend_gcd(pa, pb, ka, kb);
  assert((long long)ka*(long long)pa + (long long)kb*(long long)pb == 1);
  long long n = (long long)pa*(long long)pb;
  for(int i = 0; i <= N; i++) {
    Ma[i] = ((long long)ka*(Mb[i]-Ma[i])%pb * pa + Ma[i]) % n;
    if(Ma[i] < 0) Ma[i] += n;
    Ca[i] = ((long long)ka*(Cb[i]-Ca[i])%pb * pa + Ca[i]) % n;
    if(Ca[i] < 0) Ca[i] += n;
  }
}
 
long long C[N+10], M[N+10], Cx[N+10], Mx[N+10];
int main()
{
  precompute(P1, M, C);
  precompute(P2, Mx, Cx);
  merge(P1, M, C, P2, Mx, Cx);
  precompute(P3, Mx, Cx);
  merge(P1*P2, M, C, P3, Mx, Cx);
  precompute(P4, Mx, Cx);
  merge(P1*P2*P3, M, C, P4, Mx, Cx);
  //for(int i = 0; i <= 500; i++)
  //  printf("%lld %lld\n", M[i], C[i]);
 
  int t, n, k;
  scanf("%d", &t);
  while(t--) {
    long long r;
    scanf("%d%d", &n, &k);
    if(k == 0)
      r = 1;
    else if(k == 1)
      r = M[n];
    else
      r = C[n];
    printf("%lld\n", (r==0?(P-1):(r-1)));
  }
  return 0;
}
 