#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <math.h>
#include <fstream>
#include <iostream>
#include <vector>
#include <deque>
#include <map>
#include <cstdlib>
#include <complex>
using namespace std;
 
//2012 August Long Contest, MAXGAME Game count codechef.com
//Disable warning messages C4996.
#pragma warning(disable:4996)
 
#define INPUT_FROM 0
#if INPUT_FROM
#define fromc from
#else
#define fromc cin
#endif
 
typedef complex<double> base;
 
const long long nmax=10000;
 
//long long fr(vector<long long>&, long long);
vector<long long> extended_euclid(long long, long long);
int find_v(vector<long long>&, long long);
 
deque<long long> add(deque<long long>&, deque<long long>&, long long);
deque<long long> mul(deque<long long>&, long long, long long);
deque<long long> mul(deque<long long>, deque<long long>, long long);
deque<long long> min(deque<long long>&, deque<long long>&, long long);
deque<long long> div(deque<long long>&, long long, long long);
 
int main(int argc, char **argv)
{
	//ifstream from;
	const long long q0=1012201, q1=98794607;//437110372083
	const long long p0=43, p1=1103, p2=2083, p3=1012201;
	long long test, cases, n, m, mt, res, rt, i, j, k, kt, t, ax;
	long long x0, x1, x2, y0, y1, k2, z, p, q;
	//char ch;
	//string sres[2]={"YES", "NO"};
	//string s, st, sr;
	//double dt;
 
	//if(INPUT_FROM) from.open("test.txt");
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
 
	static vector<long long> vk1(nmax+1), vk2(nmax+1);
	static vector<long long> vr(nmax+3), vr0(nmax+3), vr1(nmax+3), vr2(nmax+3), vr3(nmax+3);
	vector<long long> v3(3);
	//vector<long long> vr;
	//vector<int> v;
	//deque<long long> dq;
	//map<long long, long long> mi;
	//map<long long, long long::iterator it;
	//typedef map<string, long long>::const_iterator CI;
 
	/*static long long v1_43[232]={1,3,7,19,8,12,6,32,0,9,25,1,5,37,11,34,6,22,35,17,39,35,14,
		8,13,37,21,7,39,11,35,31,0,3,1,37,12,22,30,29,14,1,1,1,3,7,19,8,12,6,32,0,9,25,1,
		5,37,11,34,6,22,35,17,39,35,14,8,13,37,21,7,39,11,35,31,0,3,1,37,12,22,30,29,14,1,
		3,3,9,21,14,24,36,18,10,0,27,32,3,15,25,33,16,18,23,19,8,31,19,42,24,39,25,20,21,
		31,33,19,7,0,9,3,25,36,23,4,1,42,3,7,7,21,6,4,13,41,42,9,0,20,3,7,35,1,34,23,42,
		25,30,33,15,30,12,13,5,1,18,6,15,34,30,2,0,21,7,1,41,25,38,31,12,7,19,19,14,4,17,
		23,13,28,6,0,42,2,19,9,15,37,1,28,31,20,22,10,20,8,23,32,15,12,4,10,37,20,30,0,14,
		19,15,13,31,11,35,8,19,8,8,24,13,23,21,10,5,41,0,29,28,8,40,38,2,14,5};
	static long long v1_1103[9]={1,3,7,19,51,141,393,4,933};
	static long long v1_2083[4]={1,3,7,19};*/
 
	static long long v2_43[127]={42,40,33,8,3,11,4,15,28,29,13,14,34,39,39,6,41,40,20,35,
		22,42,41,37,23,16,6,22,8,30,13,15,26,28,25,35,35,12,39,37,40,27,1,40,37,25,26,5,
		18,23,24,4,39,2,35,41,32,19,19,36,31,25,34,38,3,33,23,26,15,31,17,5,37,42,1,21,2,
		22,35,6,6,34,3,26,13,12,10,8,16,5,31,1,38,39,22,18,25,9,7,34,15,21,21,33,32,5,24,
		42,35,3,6,18,17,38,25,20,19,39,4,41,8,2,11,24,24,7,12};
	//long long a43_0=20, a43_1=923, n43_2=21, n43_3=1;
	static long long v2_1103[9]={1102,1100,1093,1068,977,641,490,183,1059};
	//long long a1103=550;
	static long long v2_2083[4]={2082,2080,2073,2048};
	//long long a2083=1040;
 
	q=p0*p1*p2*p3;//100000000000007
 
	find_v(vk1, p0);
	find_v(vr, p1);
 
	rt=extended_euclid(p0, p1)[1];
	k=(rt<0)?(p1+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr[i]-vk1[i])%p1;
		rt=((z*k)%p1)*p0+vk1[i];
		while(rt<0) rt+=p0*p1;
		vk1[i]=rt%(p0*p1);
	}
 
	find_v(vr, p2);
	v3=extended_euclid(p0*p1, p2);
	rt=v3[1];
	k=(rt<0)?(p2+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr[i]-vk1[i])%p2;
		rt=((z*k)%p2)*p0*p1+vk1[i];
		while(rt<0) rt+=p0*p1*p2;
		vk1[i]=rt%(p0*p1*p2);
	}
 
	find_v(vr, p3);
	rt=extended_euclid(p0*p1*p2, p3)[1];
	k=(rt<0)?(p3+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr[i]-vk1[i])%p3;
		rt=((z*k)%p3)*p0*p1*p2+vk1[i];
		while(rt<0) rt+=q;
		rt%=q;
		//vk1[i]=rt;
		vk1[i]=(rt==0)?(q-1):(rt-1);
	}
 
	//////////
	p=p0; ax=-1; vk2[0]=rt=t=1; kt=0;
	for(i=1;i<=nmax;i++){
		if(ax>0){
			rt=0;
			ax--;
		}else if(ax==0){
			rt=v2_43[kt++];
			ax--;
		}else{
			if(t%p==0){//(2*i-1)
				if((kt+1)%((p+1)>>1)==0) ax=(p+1)*((p-1)>>1)-1;
				else ax=((p-1)>>1)-1;
				rt=0;
				ax--;
			}else{
				k=extended_euclid(i+1, p)[1];
				k=(k<0)?(p+k):k;
				rt=(2*t*rt)%p;
				rt=(k*rt)%p;
			}
		}
		vk2[i]=rt;
		t+=2;
	}
 
	p=p1; ax=-1; vr1[0]=1; rt=t=1; kt=0;
	for(i=1;i<=nmax;i++){
		if(ax>0){
			rt=0;
			ax--;
		}else if(ax==0){
			rt=v2_1103[kt++];
			ax--;
		}else{
			if(t%p==0){//(2*i-1)
				ax=((p-1)>>1)-1;
				rt=0;
				ax--;
			}else{
				k=extended_euclid(i+1, p)[1];
				k=(k<0)?(p+k):k;
				rt=(2*t*rt)%p;
				rt=(k*rt)%p;
			}
		}
		vr1[i]=rt;
		t+=2;
	}
 
	p=p2; ax=-1; vr2[0]=1; rt=t=1; kt=0;
	for(i=1;i<=nmax;i++){
		if(ax>0){
			rt=0;
			ax--;
		}else if(ax==0){
			rt=v2_2083[kt++];
			ax--;
		}else{
			if(t%p==0){//(2*i-1)
				ax=((p-1)>>1)-1;
				rt=0;
				ax--;
			}else{
				k=extended_euclid(i+1, p)[1];
				k=(k<0)?(p+k):k;
				rt=(2*t*rt)%p;
				rt=(k*rt)%p;
			}
		}
		vr2[i]=rt;
		t+=2;
	}
 
	p=p3; vr3[0]=1; rt=t=1;
	for(i=1;i<=nmax;i++){
		k=extended_euclid(i+1, p)[1];
		k=(k<0)?(p+k):k;
		rt=(2*t*rt)%p;
		rt=(k*rt)%p;
 
		vr3[i]=rt;
		t+=2;
	}
 
	////////////////
	rt=extended_euclid(p0, p1)[1];
	k=(rt<0)?(p1+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr1[i]-vk2[i])%p1;
		rt=((z*k)%p1)*p0+vk2[i];
		while(rt<0) rt+=p0*p1;
		vk2[i]=rt%(p0*p1);
	}
 
	rt=extended_euclid(p0*p1, p2)[1];
	k=(rt<0)?(p2+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr2[i]-vk2[i])%p2;
		rt=((z*k)%p2)*p0*p1+vk2[i];
		while(rt<0) rt+=p0*p1*p2;
		vk2[i]=rt%(p0*p1*p2);
	}
 
	rt=extended_euclid(p0*p1*p2, p3)[1];
	k=(rt<0)?(p3+rt):rt;
	for(i=0;i<=nmax;i++){
		z=(vr3[i]-vk2[i])%p3;
		rt=((z*k)%p3)*p0*p1*p2+vk2[i];
		while(rt<0) rt+=q;
		rt%=q;
		//vk2[i]=rt;
		vk2[i]=(rt==0)?(q-1):(rt-1);
	}
 
	scanf("%lld\n", &cases);
	for(test=1;test<=cases;test++){
		scanf("%lld %lld", &n, &k);
 
		if(k>=2) printf("%lld\n", vk2[n]);
		else if(k==1) printf("%lld\n", vk1[n]);
		else printf("0\n");
		//printf("%lld\n", ax);
	}
 
	return 0;
}
 
int find_v(vector<long long>& v, long long p){
	long long i, rt, x0, x1, x2, kt, k2;
	vector<long long> vr(nmax+3);
 
	x0=x1=vr[0]=vr[1]=1;
	kt=1;
	for(i=1;i<=nmax+1;i++){
		rt=extended_euclid(i+1, p)[1];
		rt=(rt<0)?(p+rt):rt;
		x2=((2*i+1)*x1+3*i*x0);
		if((i+1)%p==0){
			x2=vr[kt++];
			//if(vr[kt]!=x2) cout<<i<<" error/n";
		}else x2=(x2*rt)%p;
		vr[i+1]=x2;
		x0=x1;
		x1=x2;
	}
 
	rt=extended_euclid(2, p)[1];
	rt=(rt<0)?(p+rt):rt;
	k2=rt;
 
	for(i=0;i<=nmax;i++){
		rt=3*vr[i]+2*vr[i+1]+(p-vr[i+2]);
		rt=rt%p;
		rt=(rt*k2)%p;
		v[i]=rt;
	}
 
	return 0;
}
 
 
vector<long long> extended_euclid(long long a, long long b){
	long long r, r0, x, x0, y, y0, q;
	vector<long long> v(3);
 
	v[0]=r=a;
	v[1]=x=1;
	v[2]=y=0;
	r0=b;
	x0=0;
	y0=1;
	while(r0!=0){
		q=r/r0; 
		v[0]=r0; 
		v[1]=x0; 
		v[2]=y0; 
		r0=r-q*r0; 
		x0=x-q*x0; 
		y0=y-q*y0; 
		r=v[0]; 
		x=v[1]; 
		y=v[2]; 
		//(r,x,y,r0,x0,y0)=(r0,x0,y0,r-qr0,x-qx0,y-qy0) 
	} 
	return v; 
}