#include <bits/stdc++.h>
using namespace std;
 
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) ((n) & (1LL << (i)))
#define bitcount(n) __builtin_popcount(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
ll fpow(ll n, ll k, int p = (int) 1e9 + 7) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
#define EPS 1e-9
const int MOD = (int) 1e9 + 7;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos((ld) 0);
 
const int maxn = 60;
int n, k, D;
ll te[maxn], TM[maxn], th[maxn];
ll pe[maxn], pm[maxn], ph[maxn];
ll f[maxn][maxn << 1][maxn][maxn << 1];
 
ll calc(int pos, int k, int t, int r) {
	if (r - n> n - pos) return -LINF;
	if (pos == n) return 0;
	ll& res = f[pos][k][t][r];
	if (res != -1) return res;
	res = calc(pos + 1, k, t, r);
	if (r > 0) res = max(res, calc(pos + 1, k, t, r - 1));
	if (t >= te[pos]) {
		ll w = calc(pos + 1, k, t - te[pos], r);
		if (w >= 0) res = max(res, pe[pos] + w);
	}
	if (t >= TM[pos]) {
		ll w = calc(pos + 1, k, t - TM[pos], r);
		if (w >= 0) res = max(res, pm[pos] + w);
	}
	if (t >= th[pos]) {
		ll w = calc(pos + 1, k, t - th[pos], r);
		if (w >= 0) res = max(res, ph[pos] + w);
	}
	if (k > 0) {
		if (t >= te[pos] + TM[pos]) {
			ll w = calc(pos + 1, k - 1, t - te[pos] - TM[pos], r + 1);
			if (w >= 0) res = max(res, pe[pos] + pm[pos] + w);
		}
		if (t >= TM[pos] + th[pos]) {
			ll w = calc(pos + 1, k - 1, t - TM[pos] - th[pos], r + 1);
			if (w >= 0) res = max(res, pm[pos] + ph[pos] + w);
		}
		if (t >= th[pos] + te[pos]) {
			ll w = calc(pos + 1, k - 1, t - th[pos] - te[pos], r + 1);
			if (w >= 0) res = max(res, ph[pos] + pe[pos] + w);
		}
	}
	if (k > 1 && t >= te[pos] + TM[pos] + th[pos]) {
		ll w = calc(pos + 1, k - 2, t - te[pos] - TM[pos] - th[pos], r + 2);
		if (w >= 0) res = max(res, pe[pos] + pm[pos] + ph[pos] + w);
	}
	return res;
}
 
void solve() {
	int T; cin>>T;
	while (T--) {
		ms(f, -1);
		cin>>n>>k>>D;
		k = min(k, 2 * n);
		FOR(i, 0, n) cin>>te[i]>>TM[i]>>th[i];
		FOR(i, 0, n) cin>>pe[i]>>pm[i]>>ph[i];
		ll ans = calc(0, k, D, n);
		if (ans < 0) ans = 0;
		cout<<ans<<"\n";
	}
}
 
int main() {
	ios_base::sync_with_stdio(0); cin.tie(NULL);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
