#include <bits/stdc++.h>
#define MAX_N 1000100
using namespace std;
 
#define ll long long
#define ull unsigned long long
#define ii pair<int,int>
#define iii pair<ii, int>
 
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ep emplace_back
#define sz(a) (int) a.size()
#define cl(a) a.clear()
 
#define vi vector<int>
#define vii vector<ii>
 
#define LOWBIT(x) ( (x) & -(x) )
 
#define FOR(x,a,b) for (int x=a;x<=b;x++)
#define FOD(x,a,b) for (int x=a;x>=b;x--)
#define REP(x,a,b) for (int x=a;x<b;x++)
#define RED(x,a,b) for (int x=a;x>b;x--)
 
const int MAX = 1e5 + 10;
const int MAXN = 1e4 + 10;
const ll MOD = 1e9 + 7;
const int inf = 1e9;
const double pi = acos(-1.0);
const double eps = 1e-6;
 
int dx[] = {0 , -1 , 0 , 1};
int dy[] = {1 , 0 , -1 , 0};
 
int test;
int a[MAX_N] , b[MAX_N];  
int n; 
long long sumMax[MAX_N] , sumMin[MAX_N] , Max[MAX_N] , Min[MAX_N]; 
stack <pair <int , int> > stackMin , stackMax; 
 
int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
 
    //freopen("input.txt", "r" , stdin);
 
    scanf("%d" , &n); 
 
    for (int i = 1; i <= n; i++) scanf("%d" , &a[i]); 
 
    stackMax.push(make_pair(a[1] , 1));  
 
    sumMax[1] = Max[1] = a[1]; 
 
    for (int i = 2; i <= n; i++) {
        sumMax[i] = sumMax[i - 1]; 
 
        while (!stackMax.empty()) {
            pair <int , int> K = stackMax.top(); 
 
            if (K.first <= a[i]) stackMax.pop();
            else break; 
        }
 
        if (!stackMax.empty()) {
            int pos = stackMax.top().second; 
 
            (sumMax[i] += ((long long) a[i] * (long long) (i - pos)) % MOD) %= MOD; 
            (sumMax[i] += Max[pos]) %= MOD; 
        }
        else (sumMax[i] += ((long long) a[i] * (long long) i) % MOD) %= MOD;
 
        Max[i] = (sumMax[i] - sumMax[i - 1] + 100LL * MOD) % MOD;
 
        stackMax.push(make_pair(a[i] , i));
    }
 
    for (int i = 1; i <= n; i++) b[i] = a[n - i + 1]; 
 
    stackMin.push(make_pair(b[1] , 1));  
 
    sumMin[1] = Min[1] = b[1]; 
 
    for (int i = 2; i <= n; i++) {
        sumMin[i] = sumMin[i - 1]; 
 
        while (!stackMin.empty()) {
            pair <int , int> K = stackMin.top(); 
 
            if (K.first >= b[i]) stackMin.pop();
            else break; 
        }
 
        if (!stackMin.empty()) {
            int pos = stackMin.top().second; 
 
            (sumMin[i] += ((long long) b[i] * (long long) (i - pos)) % MOD) %= MOD; 
            (sumMin[i] += Min[pos]) %= MOD; 
        }
        else (sumMin[i] += ((long long) b[i] * (long long) i) % MOD) %= MOD;
 
        Min[i] = (sumMin[i] - sumMin[i - 1] + 100LL * MOD) % MOD;
 
        stackMin.push(make_pair(b[i] , i));
    }
 
    long long res = 0LL;
 
    for (int i = 1; i < n; i++) (res += ((sumMax[i] - sumMax[i - 1] + 100LL * MOD) % MOD * sumMin[n - i]) % MOD) %= MOD; 
 
    printf("%lld" , res); 
 
    return 0;
} 