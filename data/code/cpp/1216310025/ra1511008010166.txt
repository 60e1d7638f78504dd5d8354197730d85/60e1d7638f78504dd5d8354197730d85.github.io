#include <iostream>
 
int n;
 
bool dc(int x, int a[]){
 
	//std::cout << "digitcheck: x: " << x << std::endl;
	for (int i = 0; i < n; ++i)
	{
		//std::cout << "digitcheck: a[" << i << "]: " << a[i] << std::endl;
		if (x == a[i])
		{
			return true;
		}
	}
 
	return false;
}
 
int main(){
	
	// n = Number of digits to be used
	int opt = 0;
 
	std::cin >> n;
	int a[n];
 
	for (int i = 0; i < n; ++i)
	{
		std::cin >> a[i];
	}
 
	//	 * * * fac1
	// x   * * fac2 = x y
	// _______
	//   * * * x
	// * * * 0 y
	// _______
	// * * * * sol
 
	// x 3 digits big				  * * *
	// y 4 digits with zero hinte 	* * * 0
	// x + y = * * * *
 
	// Jede mÃ¶gliche kombination generieren...
	int x, y, sol;
 
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			for (int k = 0; k < n; ++k)
			{
				for (int l = 0; l < n; ++l)
				{
					for (int m = 0; m < n; ++m)
					{
 
						x = (100*a[i] + 10*a[j] + a[k]) * a[m];
						y = (100*a[i] + 10*a[j] + a[k]) * a[l];
						sol = x + y * 10;
 
						if (x <= 999 && y <= 999 && sol <= 9999){
							if(dc(x%10, a) && dc((x/10)%10, a) && dc((x/100)%10, a) 
								&& dc(y%10, a) && dc((y/10)%10, a) && dc((y/100)%10, a) 
								&& dc(sol%10, a) && dc((sol/10)%10, a) && dc((sol/100)%10, a) && dc((sol/1000)%10, a))
							{
								opt++;
							}
						}
					}
				}
			}
		}
	}
 
	std::cout << opt << std::endl;
 
	return 0;
} 