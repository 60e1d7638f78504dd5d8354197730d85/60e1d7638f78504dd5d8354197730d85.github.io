#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
#define ii pair<int,int>
#define db(x) cerr << #x << ": " << x << endl;
#define db2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define db3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define db4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define db5(a, b, c, d, e) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define db6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;j
 
 
 
 
//bool isprime(long long n) {
    //if (n<=1)
        //return false;
 
    //for (long long i=2;i*i<=n;i++)
        //if (n%i==0)
            //return false;
 
    //return true;
//}
vector<int> factorize(int x)
{
    vector<int> ret;
    for(int i=2;i*i<=x;i++)
    {
        int cnt=0;
        while(x%i==0)
        {
            x/=i;
            cnt++;
        }
        while(cnt--)
            ret.push_back(i);
    }
    if(x>1)
        ret.push_back(x);
    return ret;
}
map<int,int> done,value;
int check(int n)
{
    //db(n);
    if(done[n])
        return value[n];
    if(n==1)
        return 0;
    if(check(n-1)==0)
    {
        done[n]=1;
        value[n]=1;
        return 1;
    }
    vector<int> f=factorize(n);
    //db2(n,f.size());
    for(int i=1;i<(1<<f.size())-1;i++)
    {
        int t=1;
        for(int j=0;j<f.size();j++)
        {
            if(i&(1<<j))
            {
                t*=f[j];
            }
        }
        //db(t);
        if(check(n/t)==0)
        {
            done[n]=1;
            value[n]=1;
            return 1;
        }
    }
    done[n]=1;
    value[n]=0;
    return 0;
}
#define ll long long
ll mulmod(ll a, ll b, ll c)
{
    return (a*b)%c;
    //ll x = 0, y = a%c;
    //while(b>0)
    //{
        //if(b&1) x = (x+y)%c;
        //y = (y<<1)%c;
        //b = b>>1;
    //}
    //return x;
}
 
ll modulo(ll a, ll b, ll c)
{
    ll x = 1, y = a%c;
    while(b>0)
    {
        if(b&1) x = mulmod(x,y,c);
        y = mulmod(y,y,c);
        b = b>>1;
    }
    return x;
}
 
bool isprime(ll p, int iter)
{
    if(p<2) return false;
    if(p==2) return true;
    if(!(p&1)) return false;
    ll s = p-1, a, temp, mod;
    while(!(s&1)) s = s>>1;
    for(int i=0; i<iter; i++)
    {
        a = rand()%(p-1)+1;
        temp = s;
        mod = modulo(a, temp, p);
        while(temp!=p-1 && mod!=1 && mod!=p-1)
        {
            mod = mulmod(mod, mod, p);
            temp = temp<<1;
        }
        if(mod!=p-1 && !(temp&1)) return false;
    }
    return true;
}
bool getans(int n)
{
    if(n==2||n==17)
        return 1;
    else if(n==16||n==34||n==289)
        return 0;
    else if(isprime(n,3))
        return 0;
    else
        return 1;
}
#define MAXN 111111111
vector<bool> mark(MAXN>>1);
vector<int> primes;
void sieve()
{
    //primes.push_back(2);
    int i;
    for(i=3;i*i<MAXN;i+=2)
    {
        if(!mark[i>>1])
        {
            for(int j=i*i;j<MAXN;j+=2*i)
            {
                mark[j>>1]=1;	
            }
            //primes.push_back(i);
        }
    
    }
    //for(;i<MAXN;i+=2)
    //{
        //if(!mark[i>>1])
        //{
            //primes.push_back(i);
        //}
    //}
}
bool isp(int n) {
  if (n<=1)
    return false;
  if(n==2) return true;
 
  if(n%2==0)
      return false;
  return mark[n>>1];
 
}
 
int main()
{
    //sieve();
    //for(int i=1;i<100;i++)
        //assert(isp(i)==isprime(i));
    //return 0;
    //freopen("in","r",stdin);
 
    //vector<int> f=factorize(34);
    //for(int i=0;i<f.size();i++)
    //{
    ////cout<<f[i]<<endl;
    //}
    //for(int i=2;;i++)
    //{
    //if(!isprime(i))
    //{
    //if(check(i)==0)
    //{
    //cout<<i<<",";
    //int t;
    //cin>>t;
    //}
    //}
    //db3((!(i&1)),i,check(i));
    ////cout<<check(i)<<",";
    ////assert(check(i)==(!(i&1)));
    //}
    int test;s(test);
    while(test--)
    {
        int N;
        s(N);
        if(!getans(N))
        {
            puts("Tom");
        }
        else
            puts("Mike");
    }
 
    return 0;
}
 