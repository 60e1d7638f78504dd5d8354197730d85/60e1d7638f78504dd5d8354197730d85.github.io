#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<vector>
#include<cassert>
#include<set>
#include<queue>
#include<map>
 
using namespace std;
 
#define vi vector < int >
#define pb push_back
#define ll unsigned long long
#define MOD 1000000007
#define INF 2000000000
#define dbg(x) { cout<< #x << ": " << (x) << endl; }
#define all(x) x.begin(),x.end()
 
#define getcx getchar_unlocked
ll inp()
{
    ll ch=getcx(),n=0;
    while(ch>'9'||ch<'0')
    {
                           ch=getcx();
    }
    while(ch<='9'&&ch>='0')
    {
                           n=(n<<3)+(n<<1)+(ch-'0');
                           ch=getcx();
    }
    return n;
}
 
ll mulmod(ll a,ll b,ll c)
{
    ll x = 0,y=a%c;
	while(b > 0)
    {
		if(b&1)
        {
			x =(x+y);
            while(x>=c)
            x-=c;
		}
		
		y=2*y;
		while(y>=c)
	    y-=c;
		
		//y = (2*y)%c;
		b>>=1;
	}
    while(x>=c)
    x-=c;
	return x;
}
 
ll modpow(ll a,ll b,ll c)
{
     ll res = 1,y = a%c;
     
     while(b>0)
     {
               if(b&1)
               res = (res*y)%c;
               
               y = (y*y)%c;
               b>>=1;
     }
     return res;
}
 
int miller(ll p,int iter)
{
    if(p<2)
    return 0;
    
    if(p==2)
    return 1;
    
    if(!(p&1))
    return 0;
    
    int i;
    ll s = p-1 , a , temp , mod;
    
    while(!(s&1))
    s>>=1;
    
    for(i=0;i<iter;i++)
    {
       a = rand()%(p-1)+1;
       temp = s;
       mod = modpow(a,temp,p);
       while(temp!=p-1 && mod!=1 && mod!=p-1)
       {
           mod = (mod*mod)%p;
           temp<<=1;
       }
       if(mod!=p-1 && !(temp&1))
       return 0;
    }
    return 1;
}
 
int main()
{
    int t,i;
    ll n;
    scanf("%d",&t);
    while(t--)
    {
         //scanf("%llu",&n);
         n = inp();
         int f = 1;
         
         if( miller(n,8) && (n!=2) && (n!=17))
         f = 0;
         
         if(n==16 || n==2*17 || n==17*17)
         f = 0;
         
         if(f)
         printf("Mike\n");
         else
         printf("Tom\n");
         
    }
    //system("pause");
    return 0;
}