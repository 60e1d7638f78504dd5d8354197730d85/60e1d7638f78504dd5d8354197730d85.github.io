#include <bits/stdc++.h>
using namespace std;
const int MAX = 105;
string S[MAX];
bool A[1000005];
int main()
{
    int n, k, c;
    string a, b;
    vector<pair<int, string> >::iterator it;
    cin >> n >> k;
    assert(1 <= n and n <= 100);
    assert(1 <= k and k <= 100000);
    for(int i = 0;i < n;++i)
    {
        cin >> S[i];
        for(int j = 0;j < S[i].length();++j)
            assert('a' <= S[i][j] and S[i][j] <= 'z');
        assert(1 <= S[i].length() and S[i].length() <= 35);
    }
    sort(S, S + n);
    map<string, vector<pair<int, string> > > m;
    for(int i = 0;i < k;++i)
    {
        cin >> a >> b >> c;
        for(int j = 0;j < a.length();++j)
            assert('a' <= a[j] and a[j] <= 'z');
        for(int j = 0;j < b.length();++j)
            assert('a' <= b[j] and b[j] <= 'z');
        bool flag = true;
        for(int j = 0;j < n;++j)
            if(a == S[j])
            {
                flag = false;
                break;
            }
        assert(flag == false);
        assert(1 <= a.length() and a.length() <= 35);
        assert(1 <= b.length() and b.length() <= 35);
        assert(1 <= c and c <= 1000000);
        m[a].push_back(make_pair(c, b));
    }
    for(int i = 0;i < n;++i)
    {
        sort(m[S[i]].begin(), m[S[i]].end());
        memset(A, false, sizeof(A));
        cout << S[i] << endl;
        for(it = m[S[i]].begin();it != m[S[i]].end();++it)
        {
            cout << it->second << ' ' << it->first << endl;
            assert(A[it->first] == false);
            A[it->first] = true;
        }
    }
    return 0;
}