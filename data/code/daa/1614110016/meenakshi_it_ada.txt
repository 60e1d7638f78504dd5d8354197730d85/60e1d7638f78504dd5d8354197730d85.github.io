#include <bits/stdc++.h>
 
using namespace std;
 
#define INF 0x3f3f3f3f
#define N 100
 
int dp[N + 1][N + 1];
int a[N + 1];
int x;
 
int solve(int n, int k){
	if (k == 0){
		return 0;
	}
 
	if (n == 0){
		return INF;
	}
 
	if (dp[n][k] != -1){
		return dp[n][k];
	}
 
	if (a[n] < x){
		return dp[n][k] = min(solve(n - 1, k), solve(n - 1, k - 1) + 3 * (x - a[n]));
	}
	
	if (a[n] > x){
		return dp[n][k] = min(solve(n - 1, k), solve(n - 1, k - 1) + 5 * (a[n] - x));
	}
 
	return dp[n][k] = solve(n - 1, k - 1);
}
 
int main(){
	int t, n, k, ans, i;
 
	scanf("%d", &t);
 
	while (t--){
		scanf("%d%d", &n, &k);
 
		for (i = 1; i <= n; i++){
			scanf("%d", a + i);
		}
 
		ans = INF;
		
		for (x = 1; x <= 100; x++){
			memset(dp, -1, sizeof(dp));
			ans = min(ans, solve(n, k));
		}
 
		printf("%d\n", ans);
	}
 
	return 0;
}