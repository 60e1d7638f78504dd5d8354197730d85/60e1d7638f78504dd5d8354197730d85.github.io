#include <iostream>
#include <iosfwd>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cassert>
#include <cctype>
#include <climits>
#include <vector>
#include <bitset>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <deque>
#include <string>
#include <list>
#include <iterator>
#include <sstream>
#include <complex>
#include <fstream>
#include <functional>
#include <numeric>
#include <utility>
#include <algorithm>
#include <assert.h>
#include <unordered_map>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef pair <int, int> pii;
typedef vector <int> vii;
typedef complex <double> Point;
 
#define csl ios_base::sync_with_stdio(false); cin.tie(NULL)
#define mp make_pair
#define fst first
#define snd second
 
long long t, n, m, u, v, q, k;
const int N = 3e5 + 500;;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 61LL;
long long arr[N];
string str;
 
 
int G[N];
map <int, int> M;
priority_queue <int> Q;
map <int, int> res;
int main() {
  csl;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> G[i];
    if (G[i] == G[i - 1]) {
      M[G[i]]++;
    }
    res[G[i]]++;
  }
  int x = (n + 1) / 2;
  for (map <int, int> :: iterator i = M.begin(); i != M.end(); ++i) {
    Q.push(i -> snd);
  }
  for (map <int, int> :: iterator i = res.begin(); i != res.end(); ++i) {
    if (i -> snd > x) {
      cout << -1 << '\n';
      return 0;
    }
  }
  int res = 0;
  while (!Q.empty()) {
    int x = Q.top();
    Q.pop();
    res++;
    if (Q.empty()) {
      x--;
      if (x > 0) Q.push(x);
      continue;
    }
    int y = Q.top();
    Q.pop();
    x--, y--;
    if (x > 0) Q.push(x);
    if (y > 0) Q.push(y);
  }
  cout << res << '\n';
  return 0;
}