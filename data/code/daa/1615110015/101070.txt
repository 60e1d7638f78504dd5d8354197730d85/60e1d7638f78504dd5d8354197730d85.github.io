import java.util.*;
import java.io.*;
import java.math.*;
class TestClass{
    static long[] arr;
    static int n;
    static long[][] anso;
    public static void main(String[] args) throws Exception{
        InputReader in = new InputReader();
        OutputStream outputStream = System.out;
        PrintWriter out = new PrintWriter(outputStream);
        long mod = (long)1e9+7;
        int t = in.nextInt();
        int cas = 1;
        while(t-->0){
            n = in.nextInt();
            arr = new long[n];
            anso = new long[n][2];
            for(int i=0;i<n;i++)
                arr[i] = in.nextInt();
            long answer = Math.max(dp(0,true),dp(0,false));
            out.println("Case "+cas+": "+answer);
            cas++;
        }
        out.close();
    }
 
    static long dp(int index,boolean collect){
        if(index>=n)
            return 0;
        if(collect){
            if(anso[index][0]!=0)
                return anso[index][0];
            if(index==n-1)
                return arr[index];
            anso[index][0] = arr[index]+Math.max(dp(index+2,true),dp(index+2,false));
            return anso[index][0];
        }
        else{
            if(anso[index][1]!=0)
                return anso[index][1];
            if(index==n-1)
                return 0;
            anso[index][1] = Math.max(dp(index+1,true),dp(index+1,false));
            return anso[index][1];
        }
 
    }
 
    static class InputReader {
        BufferedReader br;
        StringTokenizer st;
 
        public InputReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }
 
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException  e) {
                    throw new RuntimeException();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
 
        long nextLong() {
            return Long.parseLong(next());
        }
 
        double nextDouble() {
            return Double.parseDouble(next());
        }
 
        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                throw new RuntimeException();
            }
            return str;
        }
    }
}