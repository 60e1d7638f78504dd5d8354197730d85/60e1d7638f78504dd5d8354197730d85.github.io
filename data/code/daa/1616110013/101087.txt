#include <bits/stdc++.h>
using namespace std;
#define ROW 20
#define COL 20
struct Point
{
	int x;
	int y;
};
struct queueNode
{
	Point pt; 
	int dist; 
};

bool isValid(int row, int col)
{
		return (row >= 0) && (row < ROW) &&
		(col >= 0) && (col < COL);
}
int rowNum[] = {-1, 0, 0, 1};
int colNum[] = {0, -1, 1, 0};
int BFS(int mat[][COL], Point src, Point dest)
{

	if (!mat[src.x][src.y] || !mat[dest.x][dest.y])
		return INT_MAX;

	bool visited[ROW][COL];
	memset(visited, false, sizeof visited);

	visited[src.x][src.y] = true;

	queue<queueNode> q;
	queueNode s = {src, 0};
	q.push(s);
	while (!q.empty())
	{
		queueNode curr = q.front();
		Point pt = curr.pt;

		if (pt.x == dest.x && pt.y == dest.y)
			return curr.dist;

		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int row = pt.x + rowNum[i];
			int col = pt.y + colNum[i];
	
			if (isValid(row, col) && mat[row][col] && 
			!visited[row][col])
			{
				visited[row][col] = true;
				queueNode Adjcell = { {row, col},
									curr.dist + 1 };
				q.push(Adjcell);
			}
		}
	}
	return INT_MAX;
}

int main()
{
  struct Point dest;
  int tc,i,j,k,source1,dest1,r,c,mat[ROW][COL];
  cin>>tc;
  for(i=0;i<tc;i++)
  {
  cin>>r>>c;
   for(j=0;j<r;j++)
   {
     for(k=0;k<c;k++)
     {
       cin>>mat[j][k];
     }
   }
    cin>>source1>>dest1;
	Point source = {0, 0};
    Point dest = {source1,dest1};
	int dist = BFS(mat, source, dest);

	if (dist != INT_MAX)
		cout <<dist<<endl;
	else
		cout << "-1"<<endl;
  }
	return 0;
}
