#include <bits/stdc++.h>
using namespace std;

vector<int> adj[27];
bool vis[27];
int tot_vis;

void dfs(int u){
    vis[u]=1;
    tot_vis++;
    
    for(int i=0;i<adj[u].size();i++){
        int v=adj[u][i];
        if(vis[v]!=1) dfs(v);
    }
}

// Basically we have to check two things here that if 
// 1. inDegree  = outDegree for each vertex
// 2. if graph is strongly connected or not, beacuse if it is then we can visit all ver. because of the loop


int main() {
	int t,n,i;
	cin>>t;
	while(t--){
	    map<int,int> in,out;
	    int tot_ver;
	    tot_ver=tot_vis=0;
	    memset(vis,0,sizeof(vis));
	    bool ver[27]={0};
	    cin>>n;
	    int st_vertex=100000;
	    string s;
	    for(i=0;i<n;i++){
	        cin>>s;
	        int len=s.length();
	        st_vertex=s[0]-'a';
	        //making a directed graph here
	        adj[s[0]-'a'].push_back(s[len-1]-'a');
	        in[s[len-1]-'a']++;
	        out[s[0]-'a']++;
	        if(ver[s[0]-'a']==0) {tot_ver++;ver[s[0]-'a']=1;}
	        if(ver[s[len-1]-'a']==0) {tot_ver++;ver[s[len-1]-'a']=1;}
	    }
	    bool fl=0;
	    //first cond is that out and in degree of each char should be same.
	    for(i='a';i<='z';i++){
	        if(in[i-'a']!=out[i-'a']) fl=1;
	    }
	    //cout<<fl<<" ";
	    if(fl) {
	        puts("0");
	        for(i=0;i<27;i++) adj[i].clear();    
	        continue;
	    }
	    dfs(st_vertex);
	    //cout<<tot_ver<<" "<<tot_vis<<" ";
	    if(tot_ver==tot_vis) puts("1");
	    else puts("0");
	    //clearing the adj list
	    for(i=0;i<27;i++) adj[i].clear();
	}
	return 0;
}
