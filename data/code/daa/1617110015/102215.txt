#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int V,E;
long long unsigned int res;
// a structure to represent a weighted edge in graph
struct Edge
{
	int src, dest;
        long unsigned int weight;
};
// a structure to represent a connected, undirected and weighted graph
struct Graph
{
        int V, E;
	// graph is represented as an array of edges
      	struct Edge* edge;
};
 
// Creates a graph with V vertices and E edges
struct Graph* createGraph(int V, int E)
{
	struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );
    	graph->V = V;
    	graph->E = E;
    	graph->edge = (struct Edge*) malloc( E * sizeof( struct Edge ) );
    	return graph;
}
 
// A structure to represent a subset for union-find
struct subset
{
    	int parent;
    	int rank;
};
 
// A utility function to find set of an element i
int find(struct subset subsets[], int i)
{
    	// find root and make root as parent of i (path compression)
    	if (subsets[i].parent != i)
    	subsets[i].parent = find(subsets, subsets[i].parent);
    	return subsets[i].parent;
}
 
// A function that does union of two sets of x and y
void Union(struct subset subsets[], int x, int y)
{
    	int xroot = find(subsets, x);
    	int yroot = find(subsets, y);
   	// Attach smaller rank tree under root of high rank tree
    	if (subsets[xroot].rank < subsets[yroot].rank)
    	subsets[xroot].parent = yroot;
    	else if (subsets[xroot].rank > subsets[yroot].rank)
	subsets[yroot].parent = xroot;
    	// its rank by one
    	else
    	{
    		subsets[yroot].parent = xroot;
    		subsets[xroot].rank++;
    	}
}
// Compare two edges according to their weights.
// Used in qsort() for sorting an array of edges
int myComp(const void* a, const void* b)
{
    	struct Edge* a1 = (struct Edge*)a;
    	struct Edge* b1 = (struct Edge*)b;
    	return a1->weight > b1->weight;
}
 
// The main function to construct MST using Kruskal's algorithm
void KruskalMST(struct Graph* graph)
{
    	int V = graph->V;
  	int v ;
    	struct Edge result[V];
    	int e = 0; // An index variable, used for result[]
    	int i = 0; // An index variable, used for sorted edges
    	//Sort all the edges in non-decreasing order of their weights
    	qsort(graph->edge, graph->E, sizeof(graph->edge[0]), myComp);
    	struct subset *subsets =
    	(struct subset*) malloc( V * sizeof(struct subset) );
    	// Create V subsets with single elements
    	for (v = 0; v < V; ++v)
     	{
                subsets[v].parent = v;
    		subsets[v].rank = 0;
    	}
	// Number of edges to be taken is equal to V-1
    	while (e < V - 1)
    	{
    		// Step 2: Pick the smallest edge. And increment the index
    		// for next iteration
    		struct Edge next_edge = graph->edge[i++];
    		int x = find(subsets, next_edge.src);
    		int y = find(subsets, next_edge.dest);
    		// If including this edge does't cause cycle, include it
    		// in result and increment the index of result for next edge
    		if (x != y)
    		{
    			result[e++] = next_edge;
    			res=(res*next_edge.weight)%1000000007;
    			Union(subsets, x, y);
    		}
    	}
        printf("%llu\n",res);
        return;
}
 
int main()
{
	int test,z;
	scanf("%d",&test);
	for(z=0;z<test;z++)
	{
    		res=1;      
    		int a,b,i;
    		long unsigned int c;
    		scanf("%d%d",&V,&E);
    		struct Graph* graph = createGraph(V, E);
    		for(i=0;i<E;i++)
    		{
    			scanf("%d%d%lu",&a,&b,&c);
    			graph->edge[i].src=--a;
    			graph->edge[i].dest=--b;
    			graph->edge[i].weight=c;
    		}
    		KruskalMST(graph);
	}
	return 0;
}