#include <iostream>
#include <cstring>
 
#define MAX_N 10
 
using namespace std;
 
bool G[MAX_N][MAX_N] = {{false}};
 
bool DP[1024][10] = {{false}};
 
bool has_hamil_path(int N) {
    for (int i = 0; i < N; i++) {
        DP[1 << i][i] = true;
    }
    
    int all = (1 << N) - 1;
    
    for (int s = 0; s <= all; s++) {
        for (int i = 0; i < N; i++) {
            if (s & (1 << i) == 0) {
                continue; // i not in s
            }
            
            for (int j = 0; j < N && !DP[s][i]; j++) {
                if (s & (1 << j) == 0 || j == i || !G[i][j]) {
                    continue;
                }
                
                int ss = s ^ (1 << i);
                if (DP[ss][j]) {
                    DP[s][i] = true;
                }
            }
        }
    }
    
    for (int i = 0; i < N; i++) {
        if (DP[all][i]) {
            return true;
        }
    }
    
    return false;
}
 
int main() {
    int T, N, M, X, Y;
    cin >> T;
    
    while (T-- > 0) {
        memset(G, false, sizeof(G));
        memset(DP, false, sizeof(DP));
        
        cin >> N >> M;
        while (M-- > 0) {
            cin >> X >> Y;
            X--;
            Y--;
            G[X][Y] = G[Y][X] = true;
        }
        
        if (has_hamil_path(N)) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
        }
    }
    
    return 0;
}