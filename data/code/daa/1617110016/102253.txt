#include<bits/stdc++.h>
#define nmax 10
using namespace std;
bool find_hamiltonian_paths(int adj[][nmax],int n)
{
	bool dp[nmax][1<<nmax]={0};
	int i,j,k;
	for(i=0;i<n;i++)
		dp[i][1<<i]=1;
	int limit=1<<n;
	for(i=0;i<limit;i++)
		for(j=0;j<n;j++)
			if(i & (1<<j))
				for(k=0;k<n;k++)
					if(k!=j && (i&(1<<k)) && adj[j][k] && dp[k][i^(1<<j)])
					{
						dp[j][i]=1;
						break;
					}
	for(i=0;i<n;i++)
		if(dp[i][limit-1])
			return 1;
	return 0;
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,m;
		scanf("%d%d",&n,&m);
		int i,adj[nmax][nmax]={0};
		for(i=0;i<m;i++)
		{
			int x,y;
			scanf("%d%d",&x,&y);
			adj[x-1][y-1]=adj[y-1][x-1]=1;
		}
		find_hamiltonian_paths(adj,n)?printf("Yes\n"):printf("No\n");
	}
	return 0;
}