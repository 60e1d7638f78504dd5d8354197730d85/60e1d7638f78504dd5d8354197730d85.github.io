#include<bits/stdc++.h>
#define nmax 15
using namespace std;
    int ans[nmax];
    void find_hamiltonian_paths(int adj[nmax][nmax],int n)
    {
    	bool dp[nmax][1<<nmax]={0};
    	int i,j,k;
    	for(i=0;i<n;i++)
    	{
    		dp[i][1<<i]=1;
    		ans[i]=0;
    	}
    	int limit=1<<n;
    	for(i=0;i<limit;i++)
    	{
    		int count=0,temp=i;
                    while(temp)
                    {
                            temp&=temp-1;
                            count++;
                    }
    		for(j=0;j<n;j++)
    		{
    			if(i & (1<<j))
    			{
    				for(k=0;k<n;k++)
    					if(k!=j && adj[k][j] && (i & (1<<k))  && dp[k][i^(1<<j)])
    					{
    						dp[j][i]=1;break;
    					}
    				if(dp[j][i])
    					ans[j]=max(ans[j],count-1);
    			}
    		}
    	}
    	for(i=0;i<n;i++)
    		printf("%d ",ans[i]);
    	printf("\n");
    }
    int main()
    {
    	int t;
    	scanf("%d",&t);
    	while(t--)
    	{
    		int n,m,i,adj[nmax][nmax]={0};
    		scanf("%d%d",&n,&m);
    		for(i=0;i<m;i++)
    		{
    			int x,y;
    			scanf("%d%d",&x,&y);
    			adj[x-1][y-1]=adj[y-1][x-1]=1;
    		}
    		find_hamiltonian_paths(adj,n);
    	}
    	return 0;
    }

