#include <stdio.h>
#include <stdlib.h>
 
#define N 100000
 
struct A {
 int i, a;
 long long k;
} aa[N];
 
int compare(const void *a, const void *b) {
 struct A *pa = (struct A *) a;
 struct A *pb = (struct A *) b;
 
 return pa->a - pb->a;
}
 
int binsearch(struct A *aa, int n, long long x) {
 int l = -1, r = n - 1;
 
 while (r - l > 1) {
  int m = (l + r) / 2;
 
  if (aa[m].k >= x)
   r = m;
  else
   l = m;
 }
 return r;
}
 
int ll[N], dsu[N], used[N];
 
int find(int x) {
 return dsu[x] < 0 ? x : (dsu[x] = find(dsu[x]));
}
 
void join(int x, int y) {
 x = find(x);
 y = find(y);
 if (x == y)
  return;
 if (dsu[x] < dsu[y])
  dsu[y] = x;
 else if (dsu[x] > dsu[y])
  dsu[x] = y;
 else {
  dsu[x]--;
  dsu[y] = x;
 }
}
 
long long count(int l) {
 return (long long) l * (l + 1) / 2;
}
 
long long join_(int x, int y) {
 int lx, ly, l; 
 
 x = find(x);
 y = find(y);
 lx = ll[x];
 ly = ll[y];
 l = ll[x] = ll[y] = (ll[x] + ll[y]);
 join(x, y);
 return count(l) - count(lx) - count(ly);
}
 
int main() {
 int t;
 
 scanf("%d", &t);
 while (t-- > 0) {
  int i, n, m;
  long long k, cnt;
 
  scanf("%d%d", &n, &m);
  for (i = 0; i < n; i++) {
   scanf("%d", &aa[i].a);
   aa[i].i = i;
  }
  qsort(aa, n, sizeof(*aa), compare);
  for (i = 0; i < n; i++) {
   dsu[i] = -1;
   ll[i] = 0;
  }
  k = 0;
  for (i = 0; i < n; i++) {
   int j = aa[i].i;
 
   k += 1;
   ll[j] = 1;
   if (j - 1 >= 0 && ll[j - 1] > 0)
    k += join_(j, j - 1);
   if (j + 1 < n && ll[j + 1] > 0)
    k += join_(j, j + 1);
   aa[i].k = k;
  }
  cnt = count(n);
  while (m-- > 0) {
   long long p;
 
   scanf("%lld", &p);
   i = binsearch(aa, n, cnt - p + 1);
   printf("%d\n", aa[i].a);
  }
 }
 return 0;
}
 