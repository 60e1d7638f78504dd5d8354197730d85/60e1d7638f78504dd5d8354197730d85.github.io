#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>

using namespace std;

#define FOR(i,a,b) for(int i = (a); i < (b); ++i)
#define RFOR(i,b,a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i,N) FOR(i, 0, N)
#define RREP(i,N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
//typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 64;
const int MAX2 = 1000000;
const int BASE = 1000000000;
const int CNT = 20;

#define MOD 1000000007

int R[32][8][1 << 7][2][2][32];

struct Test
{
    int n, k, b;
    Test(){}
    VI D;
    int solve()
    {
        D.clear();
        int t = n + 1;
        while (t > 0)
        {
            D.PB(t % 2);
            t /= 2;
        }
        reverse(ALL(D));
        FILL(R, 0);
        // [position of bit][mask][last digit][xor of current bit][sum of xors]
        R[0][0][(1 << k)-1][D[0]][0][0] = 1;
        FOR (pos,0,SZ(D))
        {
            FOR (cur,0,k)
                FOR (mask,0,(1 << k))
                    FOR (last,0,2)
                        FOR (p,0,2)
                            FOR (cnt,0,b+1)
                            {
                                int val = R[pos][cur][mask][last][p][cnt];
                                if (val == 0)
                                    continue;
                                FOR (next,0,2)
                                {
                                    int p2 = (p + next) % 2;
                                    int mask2 = mask;
                                    if ((mask & (1 << cur)) != 0)
                                    {
                                        if (next > last)
                                            continue;
                                        if (next < last)
                                            mask2 -= (1 << cur);
                                    }
                                    R[pos][cur+1][mask2][next][p2][cnt] += val;
                                    if (R[pos][cur+1][mask2][next][p2][cnt] >= MOD)
                                        R[pos][cur+1][mask2][next][p2][cnt] -= MOD;
                                }
                            }
            // transition to the next
            FOR (mask,0,(1 << k))
                FOR (last,0,2)
                    FOR (p,0,2)
                        FOR (cnt,0,b+1)
                        {
                            int val = R[pos][k][mask][last][p][cnt];
                            int cnt2 = cnt + p;
                            R[pos+1][0][mask][(pos+1 == SZ(D) ? 0 : D[pos+1])][0][cnt2] += val;
                            if (R[pos+1][0][mask][(pos+1 == SZ(D) ? 0 : D[pos+1])][0][cnt2] >= MOD)
                                R[pos+1][0][mask][(pos+1 == SZ(D) ? 0 : D[pos+1])][0][cnt2] -= MOD;
                        }
            }
        return R[SZ(D)][0][0][0][0][b];
    }

    void writeTest()
    {
        cout << n << k << b << endl;
    }
    void writeRes()
    {
        cout << solve() << endl;
    }
    void readTest()
    {
        cin >> n >> k >> b;
    }
};


int main()
{
    int cnt;
    cin >> cnt;
    FOR (i,0,cnt)
    {
        Test t;
        t.readTest();
        int a = t.solve();
        cout << a << endl;
    }



	return 0;
}



