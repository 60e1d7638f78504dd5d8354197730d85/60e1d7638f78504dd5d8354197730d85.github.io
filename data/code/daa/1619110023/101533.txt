#include<bits/stdc++.h>
 
using namespace std;
 
#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)
 
#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             1000000000
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>
 
 
#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))
 
#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())
 
 
#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
const LL MOD = 1e7 + 7;
LL cnt[2048];
LL ara[2048],n;
LL add[2048],x;
LL answer = 0;
void rec(LL pos,LL mask)
{
    if(pos == n){
        int need = mask ^ x;
        if(need < 2048)answer += cnt[need];
        answer %= MOD;
        return;
    }
    rec(pos + 1,mask ^ ara[pos]);
    rec(pos + 1,mask);
}
int main()
{
    cin >> n >> x;
    REP(i,n)cin >> ara[i];
    sort(ara, ara + n);
    
    cnt[0] = 1;
    for(int i = 0;i < n;i++){
        if(ara[i] < 2048){
            for(int j = 0;j < 2048;j++){
                add[j] = cnt[j ^ ara[i]];
            }
            for(int j = 0;j < 2048;j++){
                cnt[j] += add[j];
                cnt[j] %= MOD;
            }
        }else{
            rec(i,0);
            cout << answer << endl;
            return 0;
        }
    }
    rec(n,0);
    cout << answer << endl;
    
 
 
 
    
}