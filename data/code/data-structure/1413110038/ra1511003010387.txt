#include <iostream>
    #include <algorithm>
    #include <cmath>
    #include <cassert>
    using namespace std;
    int Size=0;
    long long int tri_num[2000005];
    void pre_cal()
    {
        long long int i;
        for(i=1;;i++){
            tri_num[i-1]=(i*(i+1))/2;
            if(tri_num[i-1]>1000000000000LL)
                break;
        }
        Size=i;
    }
    int UpperBound(int i,long long val)
    {
        int lb=i,ub=Size-1,mid;
        while(lb<ub)
        {
            mid=(lb+ub)/2;
            if(tri_num[mid]>val)
                ub=mid;
            else
                lb=mid+1;
        }   
        return ub;
    }
    int LowerBound(int i,long long val)
    {
        int lb=i,ub=Size-1,mid;
        while(lb<ub)
        {
            mid=(lb+ub)/2;
            if(tri_num[mid]<val)
                lb=mid+1;
            else
                ub=mid;
        }
        return lb;
    }
    int main()
    {
        pre_cal();
        int test,i;
        cin>>test;
        while(test--)
        {
            long long int L,R,Count=0;
            cin>>L>>R;
            assert(L<=R && L>=1 && L<=1000000000000LL && R>=1 && R<=1000000000000LL );
            for(i=0;i<Size && tri_num[i]<R;i++)
                Count=Count+(UpperBound(i,R-tri_num[i])-LowerBound(i,L-tri_num[i]));
            cout<<Count<<endl;
        
        }
        return 0;
    }
    