#include<bits/stdc++.h>
using namespace std;
 
// Search for the maximum length of required
// subarray.
int bsearch(int prefixsum[], int n, int k)
{
    int ans = -1;    // Initialize result
 
    // Do Binary Search for largest subarray size 
    int left = 1, right = n;
    while (left <= right)
    {
        int mid = (left + right)/2;
 
        // Check for all subarrays after mid
        int i;
        for (i = mid; i <= n; i++)
        {
            // Checking if all the subarrays of a size
            // is less than k.
            if (prefixsum[i] - prefixsum[i - mid] > k)
                break;
        }
 
        // All subarrays of size mid have sum less
        // than or equal to k
        if (i == n+1)
        {
            left = mid + 1;
            ans = mid;
        }
 
        // We found a subrray of size mid with sum
        // greater than k
        else
            right = mid -1;
    }
 
    return ans;
}
 
// Return the maximum subarray size, such that
// all subarray of that size have sum less than K.
int maxSize(int arr[], int n, int k)
{
    // Initialize prefix sum array as 0.
    int prefixsum[n+1];
    memset(prefixsum, 0, sizeof(prefixsum));
 
    // Finding prefix sum of the array.
    for (int i = 0; i < n; i++)
        prefixsum[i+1] = prefixsum[i] + arr[i];
 
    return bsearch(prefixsum, n, k);
}
 
// Driven Program
int main()
{
    int arr[20],n,i,k;
  cin>>n;
  for(i=0;i<n;i++)
    cin>>arr[i];
  cin>>k;
    cout << maxSize(arr, n, k) << endl;
    return 0;
}
