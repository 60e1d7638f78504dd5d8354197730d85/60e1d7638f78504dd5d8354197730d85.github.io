#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
 
#define MAXN 100000
#define INF -INT_MAX
typedef struct _Quest
{
	int time;
	int score;
}QUEST;
 
QUEST a[MAXN];
 
void merge(int p, int q, int r)
{
	QUEST *left, *right;
	int i, j, k;
 
	left = (QUEST *)malloc(sizeof(QUEST) * (q - p + 2));
	right = (QUEST *)malloc(sizeof(QUEST) * (r - q + 1));
 
	for (i = 0;i < q - p + 1;i++)
	{
		left[i] = a[p + i];
	}
	for (i = 0;i < r - q;i++)
	{
		right[i] = a[q + i + 1];
	}
 
	left[q-p+1].score = right[r-q].score = INF;
 
	i = j = 0;
 
	for (k = p;k <= r;k++)
	{
		if (left[i].score >= right[j].score)
		{
			a[k] = left[i];
			i++;
		}
		else
		{
			a[k] = right[j];
			j++;
		}
	}
		
	free(left);
	free(right);
}
 
void merge_sort(int p, int r)
{
	int q;
 
	if (p < r)
	{
		q = (p + r) / 2;
		merge_sort(p, q);
		merge_sort(q + 1, r);
		merge(p, q, r);
	}
}
 
int main()
 
{
	int N, Q, K, T;
	int i;
	
	T = 0;
 
	scanf("%d %d", &N, &Q);
	
	for (i = 0;i < N;i++)
		scanf("%d", &a[i].time);
	for (i = 0;i < N;i++)
		scanf("%d", &a[i].score);
 
	merge_sort(0, N);
 
	while(Q--)
	{
		scanf("%d", &K);
		if (K > N) return 0;
		for (i = 0;i < K;i++)
			T = T + a[i].time;
 
		printf("%d\n", T);
 
		T = 0;
	}
 
	return 0;
}