#include <stdio.h>
 void merge(int arr[], int l, int m, int r, int x)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
 
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; 
    while (i < n1 && j < n2)
    {
        if ((L[i]%x) <= (R[j]%x))
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there
       are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there
       are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r, int k)
{
    if (l < r)
    {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l+(r-l)/2;
 
        // Sort first and second halves
        mergeSort(arr, l, m,k);
        mergeSort(arr, m+1, r,k);
 
        merge(arr, l, m, r,k);
    }
}
 
int main(){
    int N,k,i;
    scanf("%d ", &N);
    scanf("%d\n", &k);
    
 
    int arr[N];
    int index[N];
    for(i = 0; i<N; i++)
        scanf("%d ", &arr[i]);
    mergeSort(arr, 0, N-1 ,k);
    for(i = 0; i<N;i++)
    
        printf("%d ", arr[i]);
  return 0;
    }
  
    
    
    
 