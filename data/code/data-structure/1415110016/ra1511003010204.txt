#include <stdio.h>
#include <stdlib.h>
//#include <malloc.h>

struct node
{ int visited;
  int num;
  struct node *link;
};
struct node *start=NULL;

struct node *insertion_end(struct node *);
int search(int);
 int search(int s)
{ int flag=0;
  struct node *ptr;
  ptr=start;
  while(ptr!=NULL)
  {
    if(ptr->num==s)
     {
      flag++;
      break;
    }
    else
      ptr=ptr->link;
  }
 if(flag>0)
  return 0;
 else
  return 1;
  
}
struct node *insertion_end(struct node *start)
{
  struct node *newnode,*ptr;
  newnode=(struct node *)malloc(sizeof(struct node));
  scanf("%d",&newnode->num);
  newnode->link=NULL;
   
  ptr=start;
  while(ptr->link!=NULL)
  {
    ptr=ptr->link;
  }
  ptr->link=newnode;
  return start;
}
int main()
{
  int n,s,i;
  scanf("%d",&n);
  struct node *newnode;
  
  for(i=0;i<n;i++)
  { if(start==NULL)
   { 
     newnode=(struct node *)malloc(sizeof(struct node));
     scanf("%d",&newnode->num);
    newnode->link=NULL;
    newnode->visited=0;
    start=newnode;
   }
   else
   {
     start=insertion_end(start);
   }
  }
  struct node *temp,*prev;
  temp=start;
  prev=start;
  int count=0,p;
    scanf("%d",&s);
printf("Linked list\n");
  while(temp->visited==0)
  {
    while(temp->link!=NULL && temp->link->visited == 0)
    {   count++;
     temp=temp->link;
     //count++;
     if(count==((n-s)))
     {
       p=temp->num;
     }
    }
    printf("-->%d",temp->num);
    temp->visited =1;
    temp=start;
  }  
  //scanf("%d",&s);
  if(s>n || s<=0)
  {
    printf("\nInvalid Index!");
  }
  else if(s<n && s>0)
  { 
    printf("\nNode at index=%d : %d",s,p);
  }
   
  return 0;
}