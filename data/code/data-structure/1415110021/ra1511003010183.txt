#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
 

struct Node
{
    int data;
    struct Node* next;
};
 
void MoveNode(struct Node** destRef, struct Node** sourceRef);

struct Node* SortedMerge(struct Node* a, struct Node* b)
{
    struct Node dummy;
 
    struct Node* tail = &dummy;
 
 
    dummy.next = NULL;
    while (1)
    {
        if (a == NULL)
        {
          
            tail->next = b;
            break;
        }
        else if (b == NULL)
        {
            tail->next = a;
            break;
        }
        if (a->data <= b->data)
            MoveNode(&(tail->next), &a);
        else
            MoveNode(&(tail->next), &b);
 
        tail = tail->next;
    }
    return(dummy.next);
}
 

void MoveNode(struct Node** destRef, struct Node** sourceRef)
{
    /* the front source node  */
    struct Node* newNode = *sourceRef;
    assert(newNode != NULL);
 
    /* Advance the source pointer */
    *sourceRef = newNode->next;
 
    /* Link the old dest off the new node */
    newNode->next = *destRef;
 
    /* Move dest to point to the new node */
    *destRef = newNode;
}
 

void push(struct Node** head_ref, int new_data)
{
    /* allocate node */
    struct Node* new_node =
        (struct Node*) malloc(sizeof(struct Node));
 
    /* put in the data  */
    new_node->data  = new_data;
 
    /* link the old list off the new node */
    new_node->next = (*head_ref);
 
    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}
 
/* Function to print nodes in a given linked list */
void printList(struct Node *node)
{
    while (node!=NULL)
    {
        printf("->%d", node->data);
        node = node->next;
    }
}
 
/* Drier program to test above functions*/
int main()
{
	int i,N1,N2;
	scanf("%d",&N1);
	scanf("%d",&N2);
	int a[N1];
	int b[N2];
    /* Start with the empty list */
    struct Node* res = NULL;
    struct Node* a1 = NULL;
    struct Node* b1 = NULL;
 
   for(i=0;i<N1;i++)
   scanf("%d",&a[i]);
  
   for(i=0;i<N2;i++)
   scanf("%d",&b[i]);
  
   for(i=N1-1;i>=0;i--)
    push(&a1,a[i]);
  
    for(i=N2-1;i>=0;i--)
    push(&b1,b[i]);
  printf("Class A\n");
  printList(a1);
  printf("\n");
  printf("Class B\n");
  printList(b1);
 
    /* Remove duplicates from linked list */
    res = SortedMerge(a1, b1);
    
 
    printf("\nJoint Class\n");
    printList(res);
 
    return 0;
}
