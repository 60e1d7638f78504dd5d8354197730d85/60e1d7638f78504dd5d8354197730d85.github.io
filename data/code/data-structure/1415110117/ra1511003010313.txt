#include<stdio.h>
#include<stdlib.h>
 
/* Link list node */
struct Node
{
    int data;
    struct Node* next;
};
 
/* Given a reference (pointer to pointer) to the head
  of a list and an int, push a new node on the front
  of the list. */
void push(struct Node** head_ref, int new_data)
{
    /* allocate node */
    struct Node* new_node =
            (struct Node*) malloc(sizeof(struct Node));
 
    /* put in the data  */
    new_node->data  = new_data;
 
    /* link the old list off the new node */
    new_node->next = (*head_ref);
 
    /* move the head to point to the new node */
    (*head_ref)    = new_node;
}
 
/* Counts the no. of occurences of a node
   (search_for) in a linked list (head)*/
int count(struct Node* head, int search_for)
{
    struct Node* current = head;
    int count = 0;
    while (current != NULL)
    {
        if (current->data == search_for)
           count++;
        current = current->next;
    }
    return count;
}

void printList(struct Node *head)
{
    struct Node *temp = head;
    while(temp != NULL)
    {
        printf("-->%d", temp->data);    
        temp = temp->next;  
    }
  printf("\n");
}
 
/* Drier program to test count function*/
int main()
{
    /* Start with the empty list */
    struct Node* head = NULL;
 

  int i,q;
  int size,g[100];
  scanf("%d",&size);
  for(i=0;i<size;i++)
  {scanf("%d",&g[i]);
   push(&head, g[i]);
  }
  int sea;
  scanf("%d",&sea);
  printf("Linked list\n");
  printList(head);
    /* Check the count function */
    printf("Count of %d=%d",sea, count(head, sea));
    return 0;
}