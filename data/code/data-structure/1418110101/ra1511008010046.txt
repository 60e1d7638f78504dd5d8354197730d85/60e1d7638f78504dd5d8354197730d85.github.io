// C program for different tree traversals
#include <stdio.h>
#include <stdlib.h>
struct node
{
     int data;
     struct node* left;
     struct node* right;
};
struct node* newNode(int data)
{
     struct node* node = (struct node*)
                                  malloc(sizeof(struct node));
     node->data = data;
     node->left = NULL;
     node->right = NULL;
     return(node);
}
void printPostorder(struct node* node)
{
     if (node == NULL)
        return;
     printPostorder(node->left);
     printPostorder(node->right);
     printf("%d ", node->data);
}
void printInorder(struct node* node)
{
     if (node == NULL)
          return;
     printInorder(node->left);
     printf("%d ", node->data);  
     printInorder(node->right);
}
void printPreorder(struct node* node)
{
     if (node == NULL)
          return;
     printf("%d ", node->data);  
     printPreorder(node->left);  
     printPreorder(node->right);
}    
int main()
{
	int t[5];
	int i;
	for(i=0;i<5;i++)scanf("%d",&t[i]);
     struct node *root  = newNode(t[0]);
     root->left             = newNode(t[1]);
     root->right           = newNode(t[2]);
     root->left->left     = newNode(t[3]);
     root->left->right   = newNode(t[4]); 
     printPreorder(root);
  printf("\n");
     printInorder(root);  
  printf("\n");
     printPostorder(root);
 
     getchar();
     return 0;
}