#include <stdio.h>
long int n,o[200000],L,order[200000],R[200001];
void io(long int r)
{
 if(R[r])
 {
    io(2*r);
    order[L]=R[r];
    o[L++]=R[r];
    io(2*r+1);
 }
};
void merge(long int l,long int mid,long int r)
{
    long int i,j,k;
    i=l;
    k=l;
    j=mid+1;
    while((i<=mid)&&(j<=r))
    {
         if(R[i]>R[j])
         {
            order[k]=R[j];
            j++;
         }
         else
         {
            order[k]=R[i];
            i++; 
         }
         k++;
    }
    while(i<=mid)
    {
        order[k]=R[i];
        i++;k++;
    }
    while(j<=r)
    {
        order[k]=R[j];
        j++;k++;
    }
};
void mergesort(long int l,long int r)
{
    if(l>=r)
    {
     return ;
    }
    long int mid,i;
    mid=(l+r)/2;
    mergesort(l,mid);
    mergesort(mid+1,r);
    for(i=l;i<=r;i++)
    {
     R[i]=order[i];
    }
    merge(l,mid,r);
};
long int binarysearch(long int l,long int r,long int val)
{
 long int mid=(l+r)/2;
 while(l<=r)
 {mid=(l+r)/2;
  if(order[mid]>val)
  {
   r=mid-1;
  }
  else if(order[mid]<val)
  {
      l=mid+1;
  }
  else
  {
     return mid;
  }
 }
};
int main()
{
    scanf("%ld",&n);
    long int i;
    for(i=1;i<=n;i++)
    {
        scanf("%ld",&R[i]);
    }
    L=0;
    io(1);
    mergesort(0,L-1);
    i=0;
    while(i<L)
    {
        R[i]=binarysearch(0,L-1,o[i]);
        i++;
    }
    long int terms=0,temp,pos1,pos2;
    for(i=0;i<L;i++)
    {
     while(i!=R[i]) 
     {
        terms++;
        pos1=R[i];
        temp=R[pos1];
        R[pos1]=pos1;
        R[i]=temp;
     }
    }
    printf("%ld",terms);
    return 0;
}