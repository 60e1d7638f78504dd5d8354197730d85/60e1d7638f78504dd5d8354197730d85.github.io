#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
typedef long long int ll;
ll max[100001];
int size;
int Int32_Get() {
  int num= 0, flag= 1;
  char c=getchar_unlocked();
 
  while(!((c>='0' & c<='9') || c == '-'))
    c= getchar_unlocked();
  if(c == '-') {
    flag= -1;
    c= getchar_unlocked();
  }
  while(c>='0' && c<='9') {
    num= (num<<1) + (num<<3) + c - '0';
    c= getchar_unlocked();
  }
	
	return num * flag;
}
int64_t Int64_Get() {
  int64_t num= 0, flag= 1;
  char c= getchar_unlocked();
 
  while(!((c>='0' & c<='9') || c == '-'))
    c= getchar_unlocked();
  if(c == '-') {
    flag= -1;
    c= getchar_unlocked();
  }
  while(c>='0' && c<='9') {
    num= (num<<1) + (num<<3) + c - '0';
    c= getchar_unlocked();
  }
 
  return num * flag;
}
ll magic(ll data)
{
	return floor((double)data/2);
}
void swap(int i,int j)
{
	ll temp=max[i];
	max[i]=max[j];
	max[j]=temp;
}
void max_heapify(int index)
{
	int largest;
	int left=2*index;
	int right=2*index+1;
	
	if(left<=size && (max[left] > max[index]))
	 largest=left;
	else
	 largest=index;
	
	if(right<=size && (max[right] > max[largest]))
	 largest=right;
	
	if(largest != index)
	{
		swap(largest,index);
		max_heapify(largest);
	}
}
void extract_max()
{
	swap(1,size);
	size=size-1;
	max_heapify(1);
}
void push(ll data)
{
	size=size+1;
	max[size]=data;
	int i=size;
	while(i>1 && (max[i/2] < max[i]))
	{
		swap(i,i/2);
		i=i/2;
	}
}
int main()
{
	//freopen("program.txt","r",stdin);
	int t;
	t=Int32_Get();
	while(t--)
	{
		size=0;
		int n,k;
		n=Int32_Get();
		k=Int32_Get();
		int i;
		ll j;
		for(i=0;i<n;i++)
		{
			j=Int64_Get();
			push(j);
		}
		ll sum=0;
		for(i=0;i<k;i++)
		{
			j=max[1];
			sum+=j;
			extract_max();
			j=magic(j);
			push(j);
		}
		printf("%lld\n",sum);
	}
}