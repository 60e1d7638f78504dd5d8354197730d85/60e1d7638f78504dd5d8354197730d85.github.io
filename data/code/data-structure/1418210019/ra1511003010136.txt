#include <bits/stdc++.h>
using namespace std;
long long int id[1000001];
int root(int x)
{
    while(id[x] != x)
    {
        id[x] = id[id[x]];
        x = id[x];
    }
    return x;
}
 
void union1(int x, int y)
{
    int p = root(x);
    int q = root(y);
    id[p] = id[q];
}
int bfs(vector<long long int>v[],int n)
{int flag[100];
    queue<long long int>q;
    flag[n+1] = {0};
    q.push(1);
    while(!q.empty())
    {
        long long int v1=q.front();
        q.pop();
        flag[v1]=1;
        for(int i=0;i<v[v1].size();i++)
        {
            if(flag[v[v1][i]]==0)
            {
              q.push(v[v1][i]);
              flag[v[v1][i]]=1;
            }
        }
    }
    for(int i=1;i<=n;i++)
    {
        if(flag[i]==0)
        return 0;
    }
    return 1;
}
int main()
{
    long long int n,m,k,a,b,c,i,x,y,wt,mincost=0;
    cin>>n>>m>>k;
    pair<long long int ,pair<long long int,long long int > >p[m+1];
    vector<long long int >v;
    vector<long long int >v1[n+1];
    for(i=1;i<=n;i++)
    {
        id[i]=i;
    }
    for(i=0;i<m;i++)
    {
        cin>>a>>b>>c;
        p[i]=make_pair(c,make_pair(a,b));
        v1[a].push_back(b);
        v1[b].push_back(a);
    }
    int flag=bfs(v1,n);
    if(flag==0)
    {
        cout<<"-1\n";
        return 0;
    }
    sort(p,p+m);
    //for(int i = 0; i < p.)
    for(i=0;i<m;i++)
    {
        int x=p[i].second.first;
        int y=p[i].second.second;
        int wt=p[i].first;
        if(root(x)!=root(y))
         {
             if(wt!=1)
             v.push_back(wt);
             mincost+=wt;
             union1(x,y);
         }
    }
    //for(i=0;i<v.size();i++)
    // cout<<v[i]<<" ";
    sort(v.begin(),v.end());
    long long count=0;
    for(i=v.size()-1;i>=0;i--)
    {
        if(mincost<=k)
        {
            break;
        }
        mincost-=v[i];
        mincost++;
        count++;
    }
    if(mincost<=k)
    cout<<count;
    else
    cout<<"-1";
    return 0;
}