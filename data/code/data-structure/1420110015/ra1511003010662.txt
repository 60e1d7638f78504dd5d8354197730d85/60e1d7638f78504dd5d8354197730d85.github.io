#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
 
typedef long long int lld;
 
 
#define iterate(n) for(i=0;i<n;i++)
#define Diterate(i,s,e) for(lld (i) = s ; (i)<=e ; i++)
#define getw getchar_unlocked
#define get(a) geta(&a)
#define print(a) printf("%lld\n",(lld)(a))
#define db(str,a) cout << str << " = " << a << endl
#define dbs(str,a,n) iterate(n) { cout << str << "[" << i << "] = " << a[i] << endl; }
#define pb push_back
#define forall(V) for_each(V.begin(),V.end(),func); //Define func for this macro
 
 
template < typename T >
inline void geta(T *a){
	T n=0,s=1;
	char p=getw();
	if(p=='-') s=-1;
	while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=getw();
	if(p=='-') s=-1,p=getw();
	while(p>='0'&&p<='9') { n = (n<< 3) + (n<< 1) + (p - '0'); p=getw(); }
	*a = n*s;
}
int main(){
	int i,t,k,p,q,n,m;
	int distances[1000001];
	int hash[50001] = {0};
	get(t);
	while(t--){
		int max = 0;
		get(n);
		iterate(n){
			get(k);
			hash[k]++;
			if(k>max) max = k;
		}
 
		int j = 0;
 
		for(i=0;i<=max;i++){
			while(hash[i]){
				distances[j++] = i;
				hash[i]--;
			}
		}
 
 
		lld k = 0; // k denote the zombie which is supposed to be killed
		bool flag = true;
		int bullets = 6;
		for(i=0;flag && k<n;i++){
			if(bullets == -1) bullets = 6;
			if( ((distances[k] - i) > 0) && (bullets > 0) ){
				// printf("This one...%lld\n",(distances[k] - i));
				k++;
				bullets--;
			}else if( bullets == 0){
				bullets--;
			}else{
				flag = false;
				break;
			}
		}
 
		if(flag){
			printf("Rick now go and save Carl and Judas\n");
		}else{
			printf("Goodbye Rick\n%lld\n",k);
		}		
 
	}
	return 0;
	
}