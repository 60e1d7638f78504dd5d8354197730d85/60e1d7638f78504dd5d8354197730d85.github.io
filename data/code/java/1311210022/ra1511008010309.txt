import java.io.*;
import java.util.StringTokenizer;
public class TestClass {
FastScanner in;
  PrintWriter out;
 
  public static void main(String args[]) {
    new TestClass().runIO();
  }
 
  void solve() {
    int tc = in.nextInt();
    for (int t = 0; t < tc; t++) {
      //out.print("Case #" + (t + 1) + ": ");
      int N = in.nextInt();
      int arr[] = new int[N];
      int timeGap[] = new int[N];
      int duration[] = new int[N];
 
      for (int i = 0; i < N; i++) {
        arr[i] = in.nextInt();
      }
 
      for (int i = 0; i < N; i++) {
        if (i == 0)
          timeGap[i] = arr[i];
        else
          timeGap[i] = arr[i] - arr[i - 1];
      }
 
      for (int i = 0; i < N; i++) {
        duration[i] = in.nextInt();
      }
 
      int cnt = 0;
      for (int i = 0; i < N; i++) {
        if (timeGap[i] >= duration[i])
          cnt++;
      }
      System.out.println(cnt);
    }
  }
 
  void run() {
    try {
      in = new FastScanner(new File("B.in"));
      out = new PrintWriter(new File("B.out"));
      solve();
      out.close();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }
 
  void runIO() {
    in = new FastScanner(System.in);
    out = new PrintWriter(System.out);
 
    solve();
 
    out.close();
  }
 
  class FastScanner {
 
    BufferedReader br;
    StringTokenizer st;
 
    public FastScanner(File f) {
      try {
        br = new BufferedReader(new FileReader(f));
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
    }
 
    public FastScanner(InputStream f) {
      br = new BufferedReader(new InputStreamReader(f));
    }
 
    String next() {
      while (st == null || !st.hasMoreTokens()) {
        String s = null;
        try {
          s = br.readLine();
        } catch (IOException e) {
          e.printStackTrace();
        }
        if (s == null)
          return null;
        st = new StringTokenizer(s);
      }
      return st.nextToken();
    }
 
    int nextInt() {
      return Integer.parseInt(next());
    }
 
    long nextLong() {
      return Long.parseLong(next());
    }
 
    double nextDouble() {
      return Double.parseDouble(next());
    }
  }
}