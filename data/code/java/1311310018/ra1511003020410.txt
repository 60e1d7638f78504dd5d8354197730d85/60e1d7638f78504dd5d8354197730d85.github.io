import java.io.ByteArrayInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.PrintWriter;
    import java.util.Arrays;
    import java.util.InputMismatchException;
     
    public class TestClass {
    	static InputStream is;
    	static PrintWriter out;
    	static String INPUT = "";
    	
    	static void solve()
    	{
    		int N = 1<<17;
    		for(int T = ni();T > 0;T--){
    			int n = ni(), K = ni();
    			int[] a = na(n);
    			for(int i = 0;i < n;i++){
    				a[i] = Math.min(a[i], 17);
    			}
    			int Z = 10;
    			int m = (n+1>>>6)+1;
    			int[] nim = new int[n];
    			long[][][] xs = new long[Z][1<<Z][m];
    			
    			int[] temp = new int[n];
    			for(int j = 0;j < Z;j++){
    				int mo = 0&(1<<j)-1;
    				xs[j][mo][(int)nim[0]>>>6] |= 1L<<nim[0];
    			}
    			for(int i = 1;i <= n-1;i++){
    				if(a[i] < Z){
    					int mo = i&(1<<a[i])-1;
    					int off = 0;
    					for(long v : xs[a[i]][mo]){
    						if(v != -1L){
    							off += Long.numberOfTrailingZeros(~v);
    							break;
    						}
    						off += 64;
    					}
    					nim[i] = off;
    				}else{
    					int p = 0;
    					for(int j = i-(1<<a[i]);j >= 0;j-=1<<a[i]){
    						temp[p++] = (int)nim[j];
    					}
    					Arrays.sort(temp, 0, p);
    					int cur = 0;
    					for(int j = 0;j < p;j++){
    						if(temp[j] == cur){
    							cur++;
    						}
    					}
    					nim[i] = cur;
    				}
    				
    				for(int j = 0;j < Z;j++){
    					int mo = i&(1<<j)-1;
    					xs[j][mo][(int)nim[i]>>>6] |= 1L<<nim[i];
    				}
    			}
    			
    			long[] nf = new long[N];
    			for(int i = 0;i < n;i++){
    				nf[nim[i]]++;
    			}
    			int mod = 1000000007;
    			long[] fn = fwht(nf, mod);
    			for(int i = 0;i < fn.length;i++)fn[i] = pow(fn[i], K, mod);
    			nf = fwht(fn, mod);
    			long ret = pow(n, K, mod) - nf[0]*invl(N, mod);
    			ret %= mod;
    			if(ret < 0)ret += mod;
    			out.println(ret);
    		}
    	}
    	
    	public static long invl(long a, long mod) {
    		long b = mod;
    		long p = 1, q = 0;
    		while (b > 0) {
    			long c = a / b;
    			long d;
    			d = a;
    			a = b;
    			b = d % b;
    			d = p;
    			p = q;
    			q = d - c * q;
    		}
    		return p < 0 ? p + mod : p;
    	}
     
    	
    	public static long pow(long a, long n, long mod) {

    		long ret = 1;
    		int x = 63 - Long.numberOfLeadingZeros(n);
    		for (; x >= 0; x--) {
    			ret = ret * ret % mod;
    			if (n << 63 - x < 0)
    				ret = ret * a % mod;
    		}
    		return ret;
    	}
     
    	
    	public static long[] fwht(long[] a, int mod)
    	{
    		int n = a.length;
    		assert (n&n-1) == 0;
    		a = Arrays.copyOf(a, n);
    		for(int w = Integer.numberOfTrailingZeros(n)-1;w >= 0;w--){
    			for(int i = 0;i < n;i++){
    				if(i<<~w>=0){
    					long nal = a[i]+a[i|1<<w];
    					long nar = a[i]-a[i|1<<w];
    					if(nal >= mod)nal -= mod;
    					if(nar < 0)nar += mod;
    					a[i] = nal; a[i|1<<w] = nar;
    				}
    			}
    		}
    		return a;
    	}
     
    	
    	public static void main(String[] args) throws Exception
    	{
    		long S = System.currentTimeMillis();
    		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
    		out = new PrintWriter(System.out);
    		
    		solve();
    		out.flush();
    		long G = System.currentTimeMillis();
    		tr(G-S+"ms");
    	}
    	
    	private static boolean eof()
    	{
    		if(lenbuf == -1)return true;
    		int lptr = ptrbuf;
    		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
    		
    		try {
    			is.mark(1000);
    			while(true){
    				int b = is.read();
    				if(b == -1){
    					is.reset();
    					return true;
    				}else if(!isSpaceChar(b)){
    					is.reset();
    					return false;
    				}
    			}
    		} catch (IOException e) {
    			return true;
    		}
    	}
    	
    	private static byte[] inbuf = new byte[1024];
    	static int lenbuf = 0, ptrbuf = 0;
    	
    	private static int readByte()
    	{
    		if(lenbuf == -1)throw new InputMismatchException();
    		if(ptrbuf >= lenbuf){
    			ptrbuf = 0;
    			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
    			if(lenbuf <= 0)return -1;
    		}
    		return inbuf[ptrbuf++];
    	}
    	
    	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
    	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
    	
    	private static double nd() { return Double.parseDouble(ns()); }
    	private static char nc() { return (char)skip(); }
    	
    	private static String ns()
    	{
    		int b = skip();
    		StringBuilder sb = new StringBuilder();
    		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
    			sb.appendCodePoint(b);
    			b = readByte();
    		}
    		return sb.toString();
    	}
    	
    	private static char[] ns(int n)
    	{
    		char[] buf = new char[n];
    		int b = skip(), p = 0;
    		while(p < n && !(isSpaceChar(b))){
    			buf[p++] = (char)b;
    			b = readByte();
    		}
    		return n == p ? buf : Arrays.copyOf(buf, p);
    	}
    	
    	private static char[][] nm(int n, int m)
    	{
    		char[][] map = new char[n][];
    		for(int i = 0;i < n;i++)map[i] = ns(m);
    		return map;
    	}
    	
    	private static int[] na(int n)
    	{
    		int[] a = new int[n];
    		for(int i = 0;i < n;i++)a[i] = ni();
    		return a;
    	}
    	
    	private static int ni()
    	{
    		int num = 0, b;
    		boolean minus = false;
    		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
    		if(b == '-'){
    			minus = true;
    			b = readByte();
    		}
    		
    		while(true){
    			if(b >= '0' && b <= '9'){
    				num = num * 10 + (b - '0');
    			}else{
    				return minus ? -num : num;
    			}
    			b = readByte();
    		}
    	}
    	
    	private static long nl()
    	{
    		long num = 0;
    		int b;
    		boolean minus = false;
    		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
    		if(b == '-'){
    			minus = true;
    			b = readByte();
    		}
    		
    		while(true){
    			if(b >= '0' && b <= '9'){
    				num = num * 10 + (b - '0');
    			}else{
    				return minus ? -num : num;
    			}
    			b = readByte();
    		}
    	}
    	
    	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
    } 