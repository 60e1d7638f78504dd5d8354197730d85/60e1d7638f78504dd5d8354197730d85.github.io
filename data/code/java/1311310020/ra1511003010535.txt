import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
 
class TestClass {
    static int[] ways = new int[] {9, 9, 8, 7, 6, 5, 4, 3, 2, 1};
 
    static char[][][] iso = new char[12][700000][];
 
    static long[][] isoValue = new long[12][700000];
    static int[][] usedDigits = new int[12][700000];
 
    static int[] isoCnt = new int[12];
    static char[] cur;
 
    static void go(int pos, int len, char max) {
        if (pos == len) {
            int pp = isoCnt[len]++;
            iso[len][pp] = cur.clone();
            char[] c = iso[len][pp];
            usedDigits[len][pp] = max - '0' + 1;
            for (int i=0; i<len; i++) {
                if (c[i] == '0') {
                    c[i] = '1';
                } else if (c[i] == '1') {
                    c[i] = '0';
                }
            }
            for (int i=0; i < len; i++) {
                isoValue[len][pp] = 10 * isoValue[len][pp] + (iso[len][pp][i] - '0');
            }
            return;
        }
 
        if (max == '0') {
            cur[pos] = '1';
            go(pos+1, len, '1');
            cur[pos] = '0';
            go(pos+1, len, '0');
            return;
        }
 
        cur[pos] = '1';
        go(pos+1, len, max);
        cur[pos] = '0';
        go(pos+1, len, max);
 
        for (cur[pos] = '2'; cur[pos] <= max; cur[pos]++) {
            go(pos + 1, len, max);
        }
 
        if (max < '9') {
            cur[pos] = (char)((int)max + 1);
            go(pos + 1, len, cur[pos]);
        }
    }
 
    static long N;
    static int M;
 
    static Map<String, Long> memo = new HashMap<String, Long>();
 
    static long[][] cnt = new long[12][700000];
 
    static void computeAnswer(char[] mask) {
        long res = 0;
 
        int totalLen = mask.length;
        int digitsLen = 0;
 
        char next = '0';
        char[] convMask = mask.clone();
        for (int i = 0; i < mask.length; i++) {
            if (convMask[i] == '?') {
                continue;
            }
 
            digitsLen = i + 1;
 
            boolean find = false;
            for (int j = 0; j < i; j++) {
                if (mask[i] == mask[j]) {
                    convMask[i] = convMask[j];
                    find = true;
                }
            }
            if (!find) {
                convMask[i] = next;
                next++;
            }
        }
 
        for (int i = 0; i < mask.length; i++) {
            if (convMask[i] == '0') {
                convMask[i] = '1';
            } else if (convMask[i] == '1') {
                convMask[i] = '0';
            }
        }
 
        int fixedDigits = next - '0';
 
        int start = 0;
        for (int pw = 19; pw >= 0; pw--) {
            if (start + (1<<pw) >= isoCnt[totalLen]) {
                continue;
            }
            int test = start + (1<<pw);
            boolean less = false;
            for (int j = 0; j < digitsLen; j++) {
                if (convMask[j] != iso[totalLen][test][j]) {
                    if (convMask[j] > iso[totalLen][test][j]) {
                        less = true;
                    }
                    break;
                }
            }
            if (less) {
                start += (1<<pw);
            }
        }
 
        for (int i = start; i < isoCnt[totalLen]; i++) {
            boolean ok = true, more = false;
            for (int j = 0; j < digitsLen; j++) {
                if (convMask[j] != iso[totalLen][i][j]) {
                    ok = false;
                    if (convMask[j] < iso[totalLen][i][j]) {
                        more = true;
                    }
                    break;
                }
            }
 
            if (more) {
                break;
            }
 
            if (ok) {
                cnt[totalLen][i] += prodMemo[fixedDigits][usedDigits[totalLen][i]];
            }
        }
    }
 
    static long[][] prodMemo;
 
    public static void main(String[] args) throws Exception {
        prodMemo = new long[11][11];
        for (int from = 0; from <= 10; from++) {
            for (int to = from; to <= 10; to++) {
                prodMemo[from][to] = 1;
                for (int i = from; i < to; i++) {
                    prodMemo[from][to] *= ways[i];
                }
            }
        }
 
        for (int len = 1; len <= 11; len++) {
            cur = new char[len];
            cur[0] = '0';
            go(1, len, '0');
        }
 
        Scanner sc = new Scanner(new InputStreamReader(System.in));
        int T = sc.nextInt();
        for (int t = 0; t < T; t++) {
            N = sc.nextLong();
            M = sc.nextInt();
 
            for (int i=1; i<=11; i++) {
                for (int j=0; j<isoCnt[i]; j++) {
                    cnt[i][j] = 0;
                }
            }
 
            long time = System.currentTimeMillis();
 
            long ans = 0;
 
            if (N == 100000000000L) {
                ans += N % M;
                N--;
            }
 
            String s = "" + N;
            char[] d = s.toCharArray();
 
            for (int len = 1; len < d.length; len++) {
                char[] mask = new char[len];
                Arrays.fill(mask, '?');
                computeAnswer(mask);
            }
 
            for (int pp = 0; pp < d.length; pp++) {
                for (char last = (pp == 0 ? '1' : '0'); last < (pp == d.length - 1 ? (char)((int)d[pp]+1) : d[pp]); last++) {
                    char[] mask = new char[d.length];
                    Arrays.fill(mask, '?');
                    for (int i = 0; i < pp; i++) {
                        mask[i] = d[i];
                    }
                    mask[pp] = last;
                    computeAnswer(mask);
                }
            }
 
            for (int i=1; i<=11; i++) {
                for (int j=0; j<isoCnt[i]; j++) {
                    if (cnt[i][j]>0) {
                        ans += cnt[i][j] * (isoValue[i][j]%M);
                    }
                }
            }
 
            System.out.println(ans);
 
            //System.out.println("time = " + (System.currentTimeMillis() - time));
        }
        sc.close();
    }
} 