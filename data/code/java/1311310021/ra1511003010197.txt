import java.io.*;
import java.util.*;
 
public class TestClass {
  private static InputReader in;
  private static PrintWriter out;
  public static int mod = 1000000007;
 
  public static void main(String[] args) throws IOException {
    in = new InputReader(System.in);
    out = new PrintWriter(System.out, true);
 
    int n = in.nextInt();
    int sum = 0;
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = in.nextInt();
      sum += arr[i];
    }
    boolean ok = 2*(n-1) == sum;
    for (int i = 0; ok && i < n; i++) {
      if (arr[i] <= 0 || arr[i] >= n)
        ok = false;
    }
 
    
    if (n == 1 && sum == 0) {
      out.println(1);
      out.close();
      System.exit(0);
    }
    
    if (!ok) {
      out.println(0);
      out.close();
      System.exit(0);
    }
    
    
    long[] inv = new long[n+1];
    inv[1] = 1;
    for (int i = 2; i <= n; i++) {
      inv[i] = (mod - mod / i) * inv[mod % i] % mod;
    }
 
    long[] fact = new long[n+1];
    long[] ifact = new long[n+1];
    fact[0] = ifact[0] = 1;
    for (int i = 1; i <= n; i++) {
      fact[i] = fact[i-1] * i % mod;
      ifact[i] = ifact[i-1] * inv[i] % mod;
    }
    
    int[] freq = new int[n];
    for (int i = 0; i < n; i++) freq[arr[i]]++;
    
    long res = 2 * fact[n] % mod * fact[n-1] % mod;
    for (int i = 0; i < n; i++) {
      res = res * ifact[freq[i]] % mod;
    }
    
    out.println(res % mod);
    out.close();
    System.exit(0);
  }
 
  static class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;
 
    public InputReader(InputStream stream) {
      reader = new BufferedReader(new InputStreamReader(stream), 32768);
      tokenizer = null;
    }
 
    public String next() {
      while (tokenizer == null || !tokenizer.hasMoreTokens()) {
        try {
          tokenizer = new StringTokenizer(reader.readLine());
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
      return tokenizer.nextToken();
    }
 
    public int nextInt() {
      return Integer.parseInt(next());
    }
  }
 
 
}
 