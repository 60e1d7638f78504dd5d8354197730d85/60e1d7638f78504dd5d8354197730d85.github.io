import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.List;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.Collections;
import java.io.InputStream;
 

public class TestClass {
  public static void main(String[] args) {
    InputStream inputStream = System.in;
    OutputStream outputStream = System.out;
    QuickScanner in = new QuickScanner(inputStream);
    QuickWriter out = new QuickWriter(outputStream);
    MINSHIFT solver = new MINSHIFT();
    solver.solve(1, in, out);
    out.close();
  }
 
  static class MINSHIFT {
    private static final int MAXL = 5;
    private char[] s;
    private NoWrapComparator noWrapComparator = new NoWrapComparator();
 
    public void solve(int testNumber, QuickScanner in, QuickWriter out) {
      s = in.next().toCharArray();
      IntervalTree<Integer, IntervalTreeNode> intervalTree = new IntervalTree<>(
          IntegerArrayUtils.range(s.length),
          (Integer n) -> new IntervalTreeNode[n],
          () -> new IntervalTreeNode());
      List<Integer> candidates = new ArrayList<>(MAXL + 1);
      for (int query = in.nextInt(); query > 0; --query) {
        int operation = in.nextInt();
        if (operation == 0) {
          int j = in.nextInt();
          s[j - 1] = in.next().charAt(0);
          intervalTree.update(Math.max(j - MAXL, 0), j);
        } else {
          int l = in.nextInt() - 1;
          int r = in.nextInt();
          candidates.clear();
          if (l < r - MAXL) {
            candidates.add(intervalTree.calc(l, r - MAXL).index);
          }
          for (int i = Math.max(l, r - MAXL); i < r; ++i) {
            candidates.add(i);
          }
          Collections.sort(candidates, new WrapComparator(l, r));
          int res = candidates.get(0) + in.nextInt() - 1;
          if (res >= r) {
            res = res - r + l;
          }
          out.println(s[res]);
        }
      }
    }
 
    public class NoWrapComparator implements Comparator<Integer> {
 
      public int compare(Integer o1, Integer o2) {
        int i = o1.intValue();
        int j = o2.intValue();
        if (i == j) return 0;
        for (; i < s.length && j < s.length; ++i, ++j) {
          if (s[i] < s[j]) {
            return -1;
          }
          if (s[i] > s[j]) {
            return 1;
          }
        }
        return i >= s.length ? -1 : 1;
      }
 
    }
 
    public class WrapComparator implements Comparator<Integer> {
      int fromIndex;
      int toIndex;
 
      public WrapComparator(int fromIndex, int toIndex) {
        this.fromIndex = fromIndex;
        this.toIndex = toIndex;
      }
 
 
      public int compare(Integer o1, Integer o2) {
        int i = o1.intValue();
        int j = o2.intValue();
        for (int k = fromIndex; k < toIndex; ++k) {
          if (s[i] < s[j]) {
            return -1;
          }
          if (s[i] > s[j]) {
            return 1;
          }
          i = i + 1 == toIndex ? fromIndex : i + 1;
          j = j + 1 == toIndex ? fromIndex : j + 1;
        }
        return 0;
      }
 
    }
 
    class IntervalTreeNode implements MINSHIFT.IntervalTreeNodeInterface<Integer, IntervalTreeNode> {
      int index;
 
 
      public void init() {
        index = -1;
      }
 
 
      public void init(Integer initialValue) {
        index = initialValue;
      }
 
 
      public void update(int updateValue) {
        index = updateValue;
      }
 
 
      public void append(IntervalTreeNode o) {
        if (index == -1) {
          index = o.index;
        } else {
          index = noWrapComparator.compare(index, o.index) < 0 ? index : o.index;
        }
      }
 
    }
 
    public class IntervalTree<INIT, NODE extends MINSHIFT.IntervalTreeNodeInterface<INIT, NODE>> {
      private int n;
      private NODE[] nodes;
      private Supplier<NODE> nodeFactory;
      private INIT[] initValues;
      private int fromIndex;
      private int left;
      private int right;
 
      public IntervalTree(INIT[] initValues, Function<Integer, NODE[]> nodeArrayFactory, Supplier<NODE> nodeFactory) {
        this(initValues, 0, initValues.length, nodeArrayFactory, nodeFactory);
      }
 
      public IntervalTree(
          INIT[] initValues,
          int fromIndex,
          int toIndex,
          Function<Integer, NODE[]> nodeArrayFactory,
          Supplier<NODE> nodeFactory) {
 
        this.n = toIndex - fromIndex;
        this.nodeFactory = nodeFactory;
        this.nodes = nodeArrayFactory.apply(n << 2);
        for (int i = 0; i < nodes.length; ++i) {
          nodes[i] = nodeFactory.get();
        }
        this.initValues = initValues;
        this.fromIndex = fromIndex;
        init(1, 0, n);
      }
 
      public void update(int left, int right) {
        this.left = left;
        this.right = right;
        update(1, 0, n);
      }
 
      public NODE calc(int left, int right) {
        NODE res = nodeFactory.get();
        res.init();
        this.left = left;
        this.right = right;
        calc(res, 1, 0, n);
        return res;
      }
 
      private void init(int nodeIndex, int lower, int upper) {
        if (lower + 1 == upper) {
          nodes[nodeIndex].init(initValues[fromIndex + lower]);
          return;
        }
        int medium = (lower + upper) >> 1;
        init(toLeft(nodeIndex), lower, medium);
        init(toRight(nodeIndex), medium, upper);
        merge(nodeIndex);
      }
 
      private void update(int nodeIndex, int lower, int upper) {
        if (right <= lower || upper <= left) {
          return;
        }
        if (lower + 1 == upper) {
          nodes[nodeIndex].update(lower);
          return;
        }
        int medium = (lower + upper) >> 1;
        update(toLeft(nodeIndex), lower, medium);
        update(toRight(nodeIndex), medium, upper);
        merge(nodeIndex);
      }
 
      private void calc(NODE res, int nodeIndex, int lower, int upper) {
        if (left <= lower && upper <= right) {
          res.append(nodes[nodeIndex]);
          return;
        }
        int medium = (lower + upper) >> 1;
        if (left < medium) {
          calc(res, toLeft(nodeIndex), lower, medium);
        }
        if (medium < right) {
          calc(res, toRight(nodeIndex), medium, upper);
        }
      }
 
      private void merge(int nodeIndex) {
        NODE node = nodes[nodeIndex];
        node.init();
        node.append(nodes[toLeft(nodeIndex)]);
        node.append(nodes[toRight(nodeIndex)]);
      }
 
      private int toLeft(int nodeIndex) {
        return nodeIndex << 1;
      }
 
      private int toRight(int nodeIndex) {
        return (nodeIndex << 1) | 1;
      }
 
    }
 
    public interface IntervalTreeNodeInterface<INIT, SELF extends MINSHIFT.IntervalTreeNodeInterface<INIT, SELF>> {
      void init();
 
      void init(INIT initialValue);
 
      void update(int updateValue);
 
      void append(SELF o);
 
    }
 
  }
 
  static class QuickWriter {
    private final PrintWriter writer;
 
    public QuickWriter(OutputStream outputStream) {
      this.writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
    }
 
    public QuickWriter(Writer writer) {
      this.writer = new PrintWriter(writer);
    }
 
    public void print(Object... objects) {
      for (Object object : objects) {
        writer.print(object);
      }
    }
 
    public void println(Object... objects) {
      print(objects);
      writer.print('\n');
    }
 
    public void close() {
      writer.close();
    }
 
  }
 
  static class QuickScanner {
    private static final int BUFFER_SIZE = 1024;
    private InputStream stream;
    private byte[] buffer;
    private int currentPostion;
    private int numberOfChars;
 
    public QuickScanner(InputStream stream) {
      this.stream = stream;
      this.buffer = new byte[BUFFER_SIZE];
      this.currentPostion = 0;
      this.numberOfChars = 0;
    }
 
    public String next() {
      int b = nextNonSpaceChar();
      StringBuilder res = new StringBuilder();
      do {
        res.appendCodePoint(b);
        b = nextChar();
      } while (!isSpaceChar(b));
      return res.toString();
    }
 
    public int nextInt() {
      int c = nextNonSpaceChar();
      boolean positive = true;
      if (c == '-') {
        positive = false;
        c = nextChar();
      }
      int res = 0;
      do {
        if (c < '0' || '9' < c) {
          throw new RuntimeException();
        }
        res = res * 10 + c - '0';
        c = nextChar();
      } while (!isSpaceChar(c));
      return positive ? res : -res;
    }
 
    public int nextNonSpaceChar() {
      int res = nextChar();
      for (; isSpaceChar(res) || res < 0; res = nextChar()) ;
      return res;
    }
 
    public int nextChar() {
      if (numberOfChars == -1) {
        throw new RuntimeException();
      }
      if (currentPostion >= numberOfChars) {
        currentPostion = 0;
        try {
          numberOfChars = stream.read(buffer);
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
        if (numberOfChars <= 0) {
          return -1;
        }
      }
      return buffer[currentPostion++];
    }
 
    public boolean isSpaceChar(int c) {
      return c == ' '
          || c == '\n'
          || c == '\r'
          || c == '\t'
          || c < 0;
    }
 
  }
 
  static class IntegerArrayUtils {
    public static Integer[] range(int to) {
      return range(0, to);
    }
 
    public static Integer[] range(int from, int to) {
      return range(from, to, 1);
    }
 
    public static Integer[] range(int from, int to, int step) {
      if (from >= to) return new Integer[0];
      Integer[] res = new Integer[(to - from + step - 1) / step];
      for (int i = 0, j = from; j < to; ++i, j += step) {
        res[i] = j;
      }
      return res;
    }
 
  }
} 