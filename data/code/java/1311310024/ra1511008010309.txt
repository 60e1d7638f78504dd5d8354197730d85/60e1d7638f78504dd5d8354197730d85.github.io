import java.io.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;
 
public class TestClass {
	InputStream is;
	PrintWriter out;
	String INPUT = "";
	
	void solve()
	{
		for(int T = ni();T > 0;T--){
			int n = ni(), m = ni(), K = ni();
			int[] from = new int[n - 1];
			int[] to = new int[n - 1];
			for (int i = 0; i < n - 1; i++) {
				from[i] = ni() - 1;
				to[i] = ni() - 1;
			}
			int[][] g = packU(n, from, to);
			int[][] pars = parents3(g, 0);
			int[] par = pars[0], ord = pars[1], dep = pars[2];
			
			int mod = 1000000007;
			if(K == 0){
				out.println(pow(m, n, mod));
			}else if(m < 23000){
				long[][] dp = new long[n][m];
				for(int i = n-1;i >= 0;i--){
					int cur = ord[i];
					Arrays.fill(dp[cur], 1);
					for(int e : g[cur]){
						if(par[cur] != e){
							long[] cum = new long[m+1];
							for(int j = 0;j < m;j++){
								cum[j+1] = cum[j] + dp[e][j];
								if(cum[j+1] >= mod)cum[j+1] -= mod;
							}
							for(int j = 0;j < m;j++){
								int l = Math.max(j-(K-1), 0);
								int r = Math.min(j+(K-1), m-1);
								long val = cum[m] - (cum[r+1]-cum[l]);
								if(val < 0)val += mod;
								dp[cur][j] = dp[cur][j] * val % mod;
							}
						}
					}
				}
				long all = 0;
				for(int j = 0;j < dp[0].length;j++){
					all += dp[0][j];
				}
				all %= mod;
				out.println(all);
			}else{
				long[][] dp = new long[n][];
				long[] cent = new long[n];
				for(int i = n-1;i >= 0;i--){
					int cur = ord[i];
					int margin = 0;
					for(int e : g[cur]){
						if(par[cur] != e){
							margin = Math.max(margin, dp[e].length+K-1);
						}
					}
					cent[cur] = 1;
					dp[cur] = new long[margin];
					Arrays.fill(dp[cur], 1);
					for(int e : g[cur]){
						if(par[cur] != e){
							long all = 0;
							long[] cum = new long[dp[e].length+1];
							for(int j = 0;j < dp[e].length;j++){
								cum[j+1] = cum[j] + dp[e][j];
								if(cum[j+1] >= mod)cum[j+1] -= mod;
							}
							all += cum[dp[e].length]*2 + cent[e]*(m-dp[e].length*2);
							all %= mod;
							long[] lmake = new long[dp[e].length+K-1];
							long mcent = 0;
							for(int j = 0;j < dp[e].length+K-1;j++){
								// max(j-(K-1), 0), j+K-1
								int l = Math.max(j-(K-1), 0);
								int r = Math.min(j+K-1, dp[e].length-1);
								int ex = (j+K-1)-r;
								long res = all-(cum[r+1]-cum[l])-cent[e]*ex;
								res %= mod;
								if(res < 0)res += mod;
								lmake[j] = res;
							}
							mcent = all-cent[e]*(2*K-1);
							mcent %= mod;
							if(mcent < 0)mcent += mod;
							cent[cur] = cent[cur] * mcent % mod;
							
							for(int j = 0;j < lmake.length;j++){
								dp[cur][j] = dp[cur][j] * lmake[j] % mod;
							}
							for(int j = lmake.length;j < margin;j++){
								dp[cur][j] = dp[cur][j] * mcent % mod;
							}
						}
					}
				}
				long all = 0;
				for(int j = 0;j < dp[0].length;j++){
					all += dp[0][j];
				}
				all *= 2;
				all += cent[0]*(m-dp[0].length*2);
				all %= mod;
				out.println(all);
			}
		}
	}
	
	public static long pow(long a, long n, long mod) {
		//		a %= mod;
		long ret = 1;
		int x = 63 - Long.numberOfLeadingZeros(n);
		for (; x >= 0; x--) {
			ret = ret * ret % mod;
			if (n << 63 - x < 0)
				ret = ret * a % mod;
		}
		return ret;
	}
 
	public static int[][] parents3(int[][] g, int root) {
		int n = g.length;
		int[] par = new int[n];
		Arrays.fill(par, -1);
 
		int[] depth = new int[n];
		depth[0] = 0;
 
		int[] q = new int[n];
		q[0] = root;
		for (int p = 0, r = 1; p < r; p++) {
			int cur = q[p];
			for (int nex : g[cur]) {
				if (par[cur] != nex) {
					q[r++] = nex;
					par[nex] = cur;
					depth[nex] = depth[cur] + 1;
				}
			}
		}
		return new int[][] { par, q, depth };
	}
 
	static int[][] packU(int n, int[] from, int[] to) {
		int[][] g = new int[n][];
		int[] p = new int[n];
		for (int f : from)
			p[f]++;
		for (int t : to)
			p[t]++;
		for (int i = 0; i < n; i++)
			g[i] = new int[p[i]];
		for (int i = 0; i < from.length; i++) {
			g[from[i]][--p[from[i]]] = to[i];
			g[to[i]][--p[to[i]]] = from[i];
		}
		return g;
	}
	
	void run() throws Exception
	{
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		long s = System.currentTimeMillis();
		solve();
		out.flush();
		if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+"ms");
	}
	
	public static void main(String[] args) throws Exception { new TestClass().run(); }
	
	private byte[] inbuf = new byte[1024];
	private int lenbuf = 0, ptrbuf = 0;
	
	private int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private double nd() { return Double.parseDouble(ns()); }
	private char nc() { return (char)skip(); }
	
	private String ns()
	{
		int b = skip();
		StringBuilder sb = new StringBuilder();
		while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}
	
	private char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}
	
	private int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private long nl()
	{
		long num = 0;
		int b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }
}