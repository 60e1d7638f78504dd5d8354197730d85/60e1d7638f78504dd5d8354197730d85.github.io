import java.io.*;
import java.util.*;

public class TestClass {
	 public static void main(String[] args) { 
		
	InputReader in = new InputReader(System.in);
		PrintWriter w = new PrintWriter(System.out);
		
		int t = in.nextInt();
		
		while(t-- > 0){
			int n = in.nextInt();
			int k = in.nextInt();
			int m = in.nextInt();
			
			long pow2[] = new long[(n + 1) * (n + 1)];
			pow2[0] = 1;
			for(int i=1;i<pow2.length;i++)
				pow2[i] = (pow2[i-1] * 2) % m; 
			
			long C[][] = new long[n + 1][n + 1];
			C[0][0] = 1;
			for(int i=1;i<=n;i++){
				C[i][0] = C[i][i] = 1;
				for(int j=1;j<i;j++){
					C[i][j] = C[i-1][j] + C[i-1][j-1];
					C[i][j] %= m;
				}
			}
			
			long dp[][] = new long[n + 1][n + 1];
			dp[0][0] = 1;
			dp[1][1] = 1;
			dp[1][0] = 0;
			
			for(int i=2;i<=n;i++){
				dp[i][1] = pow2[i * (i - 1) / 2];
				for(int j=2;j<=i;j++){
					for(int l=1;l<i;l++){
						dp[i][j] += dp[l][1] * ((dp[i - l][j - 1] * C[i - 1][l - 1]) % m);
						dp[i][j] %= m;
					}
					dp[i][1] -= dp[i][j];
					dp[i][1] += m;
					dp[i][1] %= m;
				}
			}
			
			long ans = dp[n][k];
			if(k == 1)
				ans--;
			ans %= m;
			ans += m;
			ans %= m;
			
			w.println(ans);
		}
		
		w.close();
	}
	
	static class InputReader {
 
		private InputStream stream;
		private byte[] buf = new byte[8192];
		private int curChar;
		private int snumChars;
		
		public InputReader(InputStream stream) {
			this.stream = stream;
		}
 
		public int snext() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}
 
		public int nextInt() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
 
			int res = 0;
 
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
 
			return res * sgn;
		}
		
		public long nextLong() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = snext();
			}
 
			long res = 0;
 
			do {
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = snext();
			} while (!isSpaceChar(c));
 
			return res * sgn;
		}
		
		public String readString() {
			int c = snext();
			while (isSpaceChar(c))
				c = snext();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = snext();
			} while (!isSpaceChar(c));
			return res.toString();
		}
 
		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
 
	}
 
}
 