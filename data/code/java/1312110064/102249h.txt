import java.io.*;
import java.util.*;
public class TestClass {
	 public static void main(String[] args)throws Exception { 
       InputReader in = new InputReader(System.in);
        PrintWriter out = new PrintWriter(System.out);
 
        JewelsAndStones solver = new JewelsAndStones();
        int testCases = in.readInt();
        for (int i = 1; i <= testCases; ++i)
            solver.solve(i, in, out);
 
        out.close();
    }
}
 
class JewelsAndStones {
    public void solve(int testNumber, InputReader in, PrintWriter out) {
        char[] jewels = in.readString().toCharArray();
        char[] stones = in.readString().toCharArray();
 
        boolean[] isJewel = new boolean[256];
        for (int i = 0; i < jewels.length; ++i)
            isJewel[jewels[i]] = true;
        int res = 0;
        for (int i = 0; i < stones.length; ++i)
            if (isJewel[stones[i]])
                ++res;
        
        out.println(res);
    }
}
 
class InputReader {
 
    private InputStream stream;
    private byte[] buf = new byte[1024];
    private int curChar;
    private int numChars;
 
    public InputReader(InputStream stream) {
        this.stream = stream;
    }
 
    public int read() {
        if (numChars == -1)
            throw new InputMismatchException();
        if (curChar >= numChars) {
            curChar = 0;
            try {
                numChars = stream.read(buf);
            } catch (IOException e) {
                throw new InputMismatchException();
            }
            if (numChars <= 0)
                return -1;
        }
        return buf[curChar++];
    }
 
    public int readInt() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        int sgn = 1;
        if (c == '-') {
            sgn = -1;
            c = read();
        }
        int res = 0;
        do {
            if (c < '0' || c > '9')
                throw new InputMismatchException();
            res *= 10;
            res += c - '0';
            c = read();
        } while (!isSpaceChar(c));
        return res * sgn;
    }
 
    public String readString() {
        int c = read();
        while (isSpaceChar(c))
            c = read();
        StringBuffer res = new StringBuffer();
        do {
            res.appendCodePoint(c);
            c = read();
        } while (!isSpaceChar(c));
        return res.toString();
    }
 
    public static boolean isSpaceChar(int c) {
        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }


}
