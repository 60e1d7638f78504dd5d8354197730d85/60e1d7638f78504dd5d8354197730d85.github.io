import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
 
public class TestClass {
	static int N;
	public static void main(String[] args) throws IOException {
		Reader sc=new  Reader();
		PrintStream ps=new PrintStream(System.out);
		int t=sc.nextInt();
		for(int i=0;i<t;i++){
			int n=sc.nextInt();
			int k=sc.nextInt();
			long[] a=new long[n];
			for(int j=0;j<n;j++)
				a[j]=sc.nextLong();
			heapify(a);
			long count=0;
			for(int j=0;j<k;j++){
				count+=a[0];
				a[0]=a[0]/2;
				MaxHeap(a,0);
			}
			ps.println(count);
		}
	}
	private static void heapify(long[] a) {
		N=a.length-1;
		for(int i=N/2;i>=0;i--)
			MaxHeap(a,i);
	}
	private static void MaxHeap(long[] a, int i) {
		int left=2*i;
		int right=2*i+1;
		int max=i;
		if(left<=N&&a[left]>a[max])
			max=left;
		if(right<=N&&a[right]>a[max])
			max=right;
		if(max!=i){
			long temp=a[i];
			a[i]=a[max];
			a[max]=temp;
			MaxHeap(a,max);
		}
	}
	static class Reader
	{
	    final private int BUFFER_SIZE = 1 << 16;
	    private DataInputStream din;
	    private byte[] buffer;
	    private int bufferPointer, bytesRead;
 
	    public Reader()
	    {
	        din = new DataInputStream(System.in);
	        buffer = new byte[BUFFER_SIZE];
	        bufferPointer = bytesRead = 0;
	    }
 
	    public Reader(String file_name) throws IOException
	    {
	        din = new DataInputStream(new FileInputStream(file_name));
	        buffer = new byte[BUFFER_SIZE];
	        bufferPointer = bytesRead = 0;
	    }
 
	    public String readLine() throws IOException
	    {
	        byte[] buf = new byte[64]; // line length
	        int cnt = 0, c;
	        while ((c = read()) != -1)
	        {
	            if (c == '\n')
	                break;
	            buf[cnt++] = (byte) c;
	        }
	        return new String(buf, 0, cnt);
	    }
 
	    public int nextInt() throws IOException
	    {
	        int ret = 0;
	        byte c = read();
	        while (c <= ' ')
	            c = read();
	        boolean neg = (c == '-');
	        if (neg)
	            c = read();
	        do
	        {
	            ret = ret * 10 + c - '0';
	        }  while ((c = read()) >= '0' && c <= '9');
 
	        if (neg)
	            return -ret;
	        return ret;
	    }
 
	    public long nextLong() throws IOException
	    {
	        long ret = 0;
	        byte c = read();
	        while (c <= ' ')
	            c = read();
	        boolean neg = (c == '-');
	        if (neg)
	            c = read();
	        do {
	            ret = ret * 10 + c - '0';
	        }
	        while ((c = read()) >= '0' && c <= '9');
	        if (neg)
	            return -ret;
	        return ret;
	    }
 
	    public double nextDouble() throws IOException
	    {
	        double ret = 0, div = 1;
	        byte c = read();
	        while (c <= ' ')
	            c = read();
	        boolean neg = (c == '-');
	        if (neg)
	            c = read();
 
	        do {
	            ret = ret * 10 + c - '0';
	        }
	        while ((c = read()) >= '0' && c <= '9');
 
	        if (c == '.')
	        {
	            while ((c = read()) >= '0' && c <= '9')
	            {
	                ret += (c - '0') / (div *= 10);
	            }
	        }
 
	        if (neg)
	            return -ret;
	        return ret;
	    }
 
	    private void fillBuffer() throws IOException
	    {
	        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
	        if (bytesRead == -1)
	            buffer[0] = -1;
	    }
 
	    private byte read() throws IOException
	    {
	        if (bufferPointer == bytesRead)
	            fillBuffer();
	        return buffer[bufferPointer++];
	    }
 
	    public void close() throws IOException
	    {
	        if (din == null)
	            return;
	        din.close();
	    }
	}
 
 
}