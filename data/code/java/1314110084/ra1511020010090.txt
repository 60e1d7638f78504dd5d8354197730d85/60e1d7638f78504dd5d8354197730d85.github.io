import java.io.*;
import java.util.*;
public class TestClass {
	 public static void main(String[] args) { 
		
       PrintWriter out = new PrintWriter(System.out);
		FastScanner scanner = new FastScanner();
		final int bigMod = 1000000007;
		int testCases = scanner.nextInt();
		int size;
		long score, num, op;
		
		int[] a = new int[100001];
		a[0] = 1;
		for(int i = 1; i < 100001; i++)
			a[i] = (a[i-1] * 2) % bigMod;
 
		while(testCases-- > 0){
			size = scanner.nextInt();
			
			num = scanner.nextLong();
			op = num * 2;
			score = 0;
 
			for(int i = 1; i <= size; i++)
			{
				num = scanner.nextLong();
				score = (score*2 + num*op) % bigMod;
				op = (op + num*a[i]) % bigMod;
			}
			out.println(score % bigMod);
		}
 
		out.flush();
		out.close();
	}
}

class FastScanner {
	private InputStream mIs;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
 
	public FastScanner() {
		this(System.in);
	}
 
	public FastScanner(InputStream is) {
		mIs = is;
	}
 
	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = mIs.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
	
	public int nextInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	public long nextLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	public boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
 
}  