import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Random;
 
public class TestClass {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		int d = ni(), T = ni();
		int N = 200001;
		int[] row = new int[N];
		BitSet fed = new BitSet();
		boolean[][] dead = new boolean[d][N];
		int[] minalive = new int[d];
		int min = 0;
		for(int i = 0;i < d;i++)minalive[i] = i;
		for(int j = 0;j < N;j++){
			if(j > 0 && row[j] > 0)continue;
			int jd = j%d;
			for(int i = fed.nextClearBit(Math.max(min, minalive[jd]+j/d*d));;i = fed.nextClearBit(i+1)){
				// (j,i)
				int id = i-j/d*d;
				if(!dead[jd][id]){
					dead[jd][id] = true;
					if(minalive[jd] == id){
						int u;
						for(u = minalive[jd]+1;dead[jd][u];u++);
						minalive[jd] = u;
					}
					row[j] = i;
					if(i < N)row[i] = j;
					fed.set(i);
					fed.set(j);
					if(min == i || min == j)min = fed.nextClearBit(min);
					break;
				}
			}
		}
		
		int[][] co = new int[T][4];
		int[][] q = new int[4*T][4];
		for(int i = 0;i < T;i++){
			for(int j = 0;j < 4;j++){
				co[i][j] = ni()-1;
			}
			q[4*i][0] = co[i][2];
			q[4*i][1] = co[i][3];
			q[4*i][2] = i;
			q[4*i][3] = 1;
			q[4*i+1][0] = co[i][2];
			q[4*i+1][1] = co[i][1]-1;
			q[4*i+1][2] = i;
			q[4*i+1][3] = -1;
			q[4*i+2][0] = co[i][0]-1;
			q[4*i+2][1] = co[i][3];
			q[4*i+2][2] = i;
			q[4*i+2][3] = -1;
			q[4*i+3][0] = co[i][0]-1;
			q[4*i+3][1] = co[i][1]-1;
			q[4*i+3][2] = i;
			q[4*i+3][3] = 1;
		}
		
		Arrays.sort(q, new Comparator<int[]>(){
			public int compare(int[] a, int[] b){
				return a[0] - b[0];
			}
		});
		
		int[] num = new int[T];
		int[] ft = new int[N+1];
		int x = 0;
		for(int i = 0;i < q.length;i++){
			while(x <= q[i][0]){
				addFenwick(ft, row[x], 1);
				x++;
			}
			num[q[i][2]] += q[i][3]*sumFenwick(ft, q[i][1]);
		}
		
		for(int i = 0;i < T;i++){
			if(num[i] == 0){
				out.println("0/1");
			}else{
				long den = (long)(co[i][2]-co[i][0]+1)*(co[i][3]-co[i][1]+1);
				long g = gcd(num[i], den);
				num[i] /= g;
				den /= g;
				out.println(num[i] + "/" + den);
			}
		}
	}
	
	public static long gcd(long a, long b)
	{
		while(b > 0){
			long c = a; a = b; b = c % b;
		}
		return a;
	}
	
	
	public static int sumFenwick(int[] ft, int i)
	{
		int sum = 0;
		for(i++;i > 0;i -= i&-i)sum += ft[i];
		return sum;
	}
	
	public static void addFenwick(int[] ft, int i, int v)
	{
		int n = ft.length;
		for(i++;i < n;i += i&-i)ft[i] += v;
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	static boolean eof()
	{
		try {
			is.mark(1000);
			int b;
			while((b = is.read()) != -1 && (b == ' ' || b == '\t' || b == '\r' || b == '\n'));
			is.reset();
			if(b == -1){
				return true;
			}else{
				return false;
			}
		} catch (IOException e) {
		}
		return true;
	}
		
	static int ni()
	{
		try {
			int num = 0;
			boolean minus = false;
			while((num = is.read()) != -1 && !((num >= '0' && num <= '9') || num == '-'));
			if(num == '-'){
				num = 0;
				minus = true;
			}else{
				num -= '0';
			}
			
			while(true){
				int b = is.read();
				if(b == -1)return minus ? -num : num;
				if(b >= '0' && b <= '9'){
					num = num * 10 + (b - '0');
				}else{
					return minus ? -num : num;
				}
			}
		} catch (IOException e) {
		}
		return -1;
	}
	
	static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
