import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InputMismatchException;
 
public class TestClass {
	static InputStream is;
	static PrintWriter out;
	static String INPUT = "";
	
	static void solve()
	{
		for(int T = ni();T >= 1;T--){
			long n = ni(), m = ni();
			long sr = ni()-1, sc = ni()-1;
			long tr = ni()-1, tc = ni()-1;
			
//			ved = new boolean[(int)n][(int)m];
//			nved = 0;
//			hist = new int[(int)n][(int)m];
//			dfs((int)n, (int)m, (int)sr, (int)sc, (int)tr, (int)tc);
//			for(int[] row : hist){
//				tr(row);
//			}
			
			if(n == 1){
				if(tc >= sc){
					out.println(tc-sc+1);
				}else{
					out.println(m-tc);
				}
			}else if(sr < n-1){
				if(tr == sr && tc >= sc){
					out.println(tc-sc+1);
				}else if(tc == m-1 && tr >= sr){
					out.println(m-1-sc+1+tr-sr);
				}else if(tr > sr){
					long rb = m-1-sc+n-1-sr+1;
					if((n-1-tr)%2 == 0){
						out.println((n-1-tr)*(m-1)+1+m-2-tc+rb);
					}else{
						out.println((n-1-tr)*(m-1)+1+tc+rb);
					}
				}else{
					if(sc == 0){
						if((sr-tr)%2 == 0){
							out.println((n-1-tr)*m+tc+1);
						}else{
							out.println((n-1-tr)*m+m-tc);
						}
					}else if((n-1-sr)%2 == 0){
						if((n-1-tr)%2 == 0){
							out.println((n-1-tr)*m+1+m-1-tc);
						}else{
							out.println((n-1-tr)*m+1+tc);
						}
					}else{
						if(sr == tr){
							out.println((n-tr)*m-sc+1+tc);
						}else if(sr % 2 == 1 && sc-2-(sr-1-tr)/2*2 >= 0 && tr == 0){
							long C = sc-1-(sr-1-tr)/2*2;
							if(tc >= C){
								out.println((n-1-tr)*m+tc-C+1);
							}else{
								out.println((n-tr)*m-tc);
							}
						}else{
							long ph = (sr-1-tr)/2;
							// 2*m*(ph+1)
							// 2*m*ph+1
							long C = sc-2-ph*2;
							long base = m*(n-sr);
							if(C >= 0){
								if((sr-1-tr)%2 == 0){
									if(tc <= C){
										out.println(base+2*m*(ph+1)-2*C+(C-tc));
									}else{
										out.println(base+2*m*ph+1+tc-(C+1));
									}
								}else{
									if(tc < C){
										out.println(base+2*m*(ph+1)-C+1+tc);
									}else{
										out.println(base+2*m*ph+1+(m-1-C)+(m-1-tc));
									}
								}
							}else{
								if((sr-1-tr)%2 == 0){
									out.println(base+2*m*ph+1+tc);
								}else{
									out.println(base+(2*ph+1)*m+1+m-1-tc);
								}
							}
						}
					}
				}
			}else if(sr == n-1){
				if(sc == m-1){
					long ph = (n-1-tr)/2;
					if((n-1-tr)%2 == 1){
						out.println((2*ph+1)*m+1+tc);
					}else{
						out.println((2*ph)*m+1+m-1-tc);
					}
				}else{
					long ph = (n-1-tr)/2;
					// 2*m*(ph+1)
					// 2*m*ph+1
					long C = sc-1-ph*2;
					if(n % 2 == 1 && tr == 0 && C+1 >= 0){
						if(tc >= C+1){
							out.println((n-1-tr)*m+tc-(C+1)+1);
						}else{
							out.println((n-tr)*m-tc);
						}
					}else if(C >= 0){
						if((n-1-tr)%2 == 0){
							if(tc <= C){
								out.println(2*m*(ph+1)-2*C+(C-tc));
							}else{
								out.println(2*m*ph+1+tc-(C+1));
							}
						}else{
							if(tc < C){
								out.println(2*m*(ph+1)-C+1+tc);
							}else{
								out.println(2*m*ph+1+(m-1-C)+(m-1-tc));
							}
						}
					}else{
						if((n-1-tr)%2 == 0){
							out.println(2*m*ph+1+tc);
						}else{
							out.println((2*ph+1)*m+1+m-1-tc);
						}
					}
				}
			}
		}
	}
	
 
	static boolean[][] ved;
	static int[][] hist;
	static int nved = 0;
	static int[] dr = { 0, 1, 0, -1 };
	static int[] dc = { 1, 0, -1, 0 };
	static void dfs(int n, int m, int r, int c, int tr, int tc)
	{
	nved++;
	hist[r][c] = nved;
	ved[r][c] = true;
//	if(r == tr && c == tc)out.println(nved);
	for(int k = 0;k < 4;k++){
		int nr = r + dr[k], nc = c + dc[k];
		if(nr >= 0 && nr < n && nc >= 0 && nc < m && !ved[nr][nc]){
			dfs(n, m, nr, nc, tr, tc);
		}
	}
	}
	
	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}