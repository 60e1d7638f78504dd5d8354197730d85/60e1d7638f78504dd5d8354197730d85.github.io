import java.util.*;
import java.util.Scanner;
import java.io.*;
class TestClass {
  public static int ladderLength(String start, String end, HashSet<String> dict) {
    if (dict.size() == 0)
        return 0;
 
    dict.add(end);
 
    LinkedList<String> wordQueue = new LinkedList<String>();
    LinkedList<Integer> distanceQueue = new LinkedList<Integer>();
 
    wordQueue.add(start);
    distanceQueue.add(1);
 
    //track the shortest path
    int result = Integer.MAX_VALUE;
    while (!wordQueue.isEmpty()) {
        String currWord = wordQueue.pop();
        Integer currDistance = distanceQueue.pop();
 
        if (currWord.equals(end)) {
            result = Math.min(result, currDistance);
        }
 
        for (int i = 0; i < currWord.length(); i++) {
            char[] currCharArr = currWord.toCharArray();
            for (char c = 'a'; c <= 'z'; c++) {
                currCharArr[i] = c;
 
                String newWord = new String(currCharArr);
                if (dict.contains(newWord)) {
                    wordQueue.add(newWord);
                    distanceQueue.add(currDistance + 1);
                    dict.remove(newWord);
                }
            }
        }
    }
 
    if (result < Integer.MAX_VALUE)
        return result;
    else
        return 0;
}
  
  
   public static void main(String[] args) {
  HashSet<String> dictionary = new HashSet<String>();
  
   Scanner sc = new Scanner(System.in);
     dictionary.clear();
   String startWord =  sc.next();
  String endWord = sc.next();
   
     while(sc.hasNext())
     { String str= sc.next();
    
       dictionary.add(str);
     }
   
     System.out.println(ladderLength(startWord, endWord, dictionary));

   }  
}