import java.util.*;
public class TestClass
{
	public static void main(String[] ar)
	{
		Scanner sc=new Scanner(System.in);
		String str=sc.nextLine();
		String input="";
		int col=0;
		for(char c:str.toCharArray()) 
		{
			if(c!=' ')
			{
				input+=c;
				col=col+1;
			}
			else
				col=0;
		}
		//System.out.println(input);
		int row=input.length()/col;
		char[][] brd=new char[row][col];
		int temp=0;
		for(int i=0;i<row;i++)
		{
			brd[i]=input.substring(temp,temp+4).toCharArray();
			temp=temp+4;
		}
		String strSearch=sc.nextLine();
		String strar[]=strSearch.split(" ");
		for(int i=0;i<strar.length;i++)
		{
			if(exist(brd,strar[i]))
			{
				System.out.println(strar[i]+" -true");
			}
			else
			{
				System.out.println(strar[i]+" -false");
			}
		}
		
	}
    public static boolean exist(char[][] board, String word) 
    {
	        if (board == null || word == null) {
	            return true;
	        }
	         
	        if (board.length == 0 && word.length() == 0) {
	            return true;
	        }
	         
	        int rows = board.length;
	        int cols = board[0].length;
	        boolean[][] visited = new boolean[rows][cols];
	         
	        for (int i = 0; i < rows; i++) {
	            for (int j = 0; j < cols; j++) {
	                if (existHelper(board, word, 0, i, j, visited)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	     
	    private static boolean existHelper(char[][] board, String word, int start, int row, int col, boolean[][] visited) 
	    {
	        if (start == word.length()) {
	            return true;
	        }
	         
	        if (row < 0 || col < 0 || row >= board.length || col >= board[0].length) {
	            return false;
	        }
	         
	        if (visited[row][col]) {
	            return false;
	        }
	         
	        if (board[row][col] != word.charAt(start)) {
	            return false;
	        }
	         
	        visited[row][col] = true;
	        boolean result = existHelper(board, word, start + 1, row - 1, col, visited) ||
	                         existHelper(board, word, start + 1, row + 1, col, visited) ||
	                         existHelper(board, word, start + 1, row, col - 1, visited) ||
	                         existHelper(board, word, start + 1, row, col + 1, visited);
	        visited[row][col] = false;
	         
	        return result;
	    }
	}

