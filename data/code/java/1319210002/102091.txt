import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.InputMismatchException;
import java.io.IOException;
import java.io.InputStream;

public class TestClass{
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        FLIPCOIN solver = new FLIPCOIN();
        solver.solve(1, in, out);
        out.close();
    }
 
    static class FLIPCOIN {
        public int[] tree;
        public int[] lazy;
 
        public FLIPCOIN() {
            tree = new int[2621450];
            lazy = new int[2621450];
        }
 
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int n = in.readInt();
            int q = in.readInt();
            for (int i = 0; i < q; i++) {
                int ch = in.readInt();
                int a = in.readInt();
                int b = in.readInt();
                if (ch == 0)
                    update(1, 0, n - 1, a, b);
                else out.println(query(1, 0, n - 1, a, b));
            }
        }
 
        public void update(int node, int start, int end, int l, int r) {
            if (lazy[node] != 0) {
                tree[node] = end - start + 1 - tree[node];
                if (start != end) {
                    lazy[node << 1] = 1 - lazy[node << 1];
                    lazy[node << 1 | 1] = 1 - lazy[node << 1 | 1];
                }
                lazy[node] = 0;
            }
            if (r < start || l > end) return;
            if (l <= start && end <= r) {
                tree[node] = end - start + 1 - tree[node];
                if (start != end) {
                    lazy[node << 1] = 1 - lazy[node << 1];
                    lazy[node << 1 | 1] = 1 - lazy[node << 1 | 1];
                }
                return;
            }
            int mid = (start + end) / 2;
            update(node << 1, start, mid, l, r);
            update(node << 1 | 1, mid + 1, end, l, r);
            tree[node] = tree[node << 1] + tree[node << 1 | 1];
        }
 
        public int query(int node, int start, int end, int l, int r) {
            if (r < start || l > end) return 0;
            if (lazy[node] != 0) {
                tree[node] = end - start + 1 - tree[node];
                if (start != end) {
                    lazy[node << 1] = 1 - lazy[node << 1];
                    lazy[node << 1 | 1] = 1 - lazy[node << 1 | 1];
                }
                lazy[node] = 0;
            }
            if (l <= start && end <= r) return tree[node];
            int mid = (start + end) / 2;
            int x = query(node << 1, start, mid, l, r);
            int y = query(node << 1 | 1, mid + 1, end, l, r);
            return x + y;
        }
 
    }
 
    static class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
 
        public InputReader(InputStream stream) {
            this.stream = stream;
        }
 
        private int read() {
            try {
                if (curChar >= numChars) {
                    curChar = 0;
                    numChars = stream.read(buf);
                    if (numChars <= 0)
                        return -1;
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return buf[curChar++];
        }
 
        public int readInt() {
            return (int) readLong();
        }
 
        public long readLong() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new RuntimeException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9') throw new InputMismatchException();
                res *= 10;
                res += (c - '0');
                c = read();
            } while (!isSpaceChar(c));
            return negative ? (-res) : (res);
        }
 
        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
 
    }
}
 
 