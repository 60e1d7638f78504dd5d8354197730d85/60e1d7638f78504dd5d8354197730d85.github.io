import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.BufferedWriter;
import java.util.Set;
import java.util.InputMismatchException;
import java.io.IOException;
import java.util.HashSet;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.io.InputStream;
 
/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 *
 * @author Egor Kulikov (egor@egork.net)
 */
public class TestClass {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        OutputWriter out = new OutputWriter(outputStream);
        SumPP solver = new SumPP();
        solver.solve(1, in, out);
        out.close();
    }
 
    static class SumPP {
        public void solve(int testNumber, InputReader in, OutputWriter out) {
            int n = in.readInt();
            int m = in.readInt();
            int k = in.readInt();
            int[][] a = IOUtils.readIntTable(in, n, m);
            SumPP.Polymino[] polyminos = generate(k);
            long answer = 1;
            for (SumPP.Polymino polymino : polyminos) {
                for (int i = 0; i <= n - polymino.height; i++) {
                    for (int j = 0; j <= m - polymino.width; j++) {
                        long current = 0;
                        for (int l = 0; l < polymino.height; l++) {
                            for (int o = 0; o < polymino.width; o++) {
                                if ((polymino.mask[l] >> o & 1) == 1) {
                                    current += a[i + l][j + o];
                                }
                            }
                        }
                        answer *= current;
                        answer %= MiscUtils.MOD7;
                    }
                }
            }
            out.printLine(answer);
        }
 
        private SumPP.Polymino[] generate(int k) {
            if (k == 1) {
                SumPP.Polymino polymino = new SumPP.Polymino();
                polymino.height = 1;
                polymino.width = 1;
                polymino.mask = new int[1];
                polymino.mask[0] = 1;
                return new SumPP.Polymino[]{polymino};
            }
            SumPP.Polymino[] base = generate(k - 1);
            Set<SumPP.Polymino> polyminos = new HashSet<>();
            for (SumPP.Polymino polymino : base) {
                for (int i = 0; i < polymino.height; i++) {
                    for (int j = 0; j < polymino.width; j++) {
                        if ((polymino.mask[i] >> j & 1) == 1) {
                            continue;
                        }
                        boolean good = false;
                        if (i > 0 && (polymino.mask[i - 1] >> j & 1) == 1) {
                            good = true;
                        }
                        if (i + 1 < polymino.height && (polymino.mask[i + 1] >> j & 1) == 1) {
                            good = true;
                        }
                        if (j > 0 && (polymino.mask[i] >> (j - 1) & 1) == 1) {
                            good = true;
                        }
                        if (j + 1 < polymino.width && (polymino.mask[i] >> (j + 1) & 1) == 1) {
                            good = true;
                        }
                        if (good) {
                            SumPP.Polymino nPol = new SumPP.Polymino();
                            nPol.width = polymino.width;
                            nPol.height = polymino.height;
                            nPol.mask = polymino.mask.clone();
                            nPol.mask[i] += 1 << j;
                            polyminos.add(nPol);
                        }
                    }
                }
                for (int i = 0; i < polymino.height; i++) {
                    if ((polymino.mask[i] & 1) == 1) {
                        SumPP.Polymino nPol = new SumPP.Polymino();
                        nPol.width = polymino.width + 1;
                        nPol.height = polymino.height;
                        nPol.mask = polymino.mask.clone();
                        for (int j = 0; j < nPol.height; j++) {
                            nPol.mask[j] *= 2;
                        }
                        nPol.mask[i]++;
                        polyminos.add(nPol);
                    }
                    if ((polymino.mask[i] >> (polymino.width - 1) & 1) == 1) {
                        SumPP.Polymino nPol = new SumPP.Polymino();
                        nPol.width = polymino.width + 1;
                        nPol.height = polymino.height;
                        nPol.mask = polymino.mask.clone();
                        nPol.mask[i] += 1 << polymino.width;
                        polyminos.add(nPol);
                    }
                }
                for (int i = 0; i < polymino.width; i++) {
                    if ((polymino.mask[0] >> i & 1) == 1) {
                        SumPP.Polymino nPol = new SumPP.Polymino();
                        nPol.width = polymino.width;
                        nPol.height = polymino.height + 1;
                        nPol.mask = ArrayUtils.concatenate(new int[1], polymino.mask);
                        nPol.mask[0] = 1 << i;
                        polyminos.add(nPol);
                    }
                    if ((polymino.mask[polymino.height - 1] >> i & 1) == 1) {
                        SumPP.Polymino nPol = new SumPP.Polymino();
                        nPol.width = polymino.width;
                        nPol.height = polymino.height + 1;
                        nPol.mask = MathArrays.copyOf(polymino.mask, polymino.height + 1);
                        nPol.mask[polymino.height] = 1 << i;
                        polyminos.add(nPol);
                    }
                }
            }
            return polyminos.toArray(new SumPP.Polymino[0]);
        }
 
        static class Polymino {
            int height;
            int width;
            int[] mask;
 
 
            public boolean equals(Object o) {
                if (this == o) {
                    return true;
                }
                if (o == null || getClass() != o.getClass()) {
                    return false;
                }
 
                SumPP.Polymino polymino = (SumPP.Polymino) o;
 
                if (height != polymino.height) {
                    return false;
                }
                if (width != polymino.width) {
                    return false;
                }
                return Arrays.equals(mask, polymino.mask);
 
            }
 
 
            public int hashCode() {
                int result = height;
                result = 31 * result + width;
                result = 31 * result + Arrays.hashCode(mask);
                return result;
            }
 
        }
 
    }
 
    static class OutputWriter {
        private final PrintWriter writer;
 
        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }
 
        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }
 
        public void close() {
            writer.close();
        }
 
        public void printLine(long i) {
            writer.println(i);
        }
 
    }
 
    static class ArrayUtils {
        public static int[] concatenate(int[] arr1, int[] arr2) {
            int[] result = Arrays.copyOf(arr1, arr1.length + arr2.length);
            System.arraycopy(arr2, 0, result, arr1.length, arr2.length);
            return result;
        }
 
    }
 
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;
 
        public InputReader(InputStream stream) {
            this.stream = stream;
        }
 
        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }
 
        public int readInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }
 
        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }
 
        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
 
        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
 
        }
 
    }
 
    static class MiscUtils {
        public static final int MOD7 = (int) (1e9 + 7);
 
    }
 
    static class MathArrays {
        private MathArrays() {
        }
 
        public static int[] copyOf(int[] source, int len) {
            final int[] output = new int[len];
            System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
            return output;
        }
 
    }
 
    static class FastMath {
        private FastMath() {
        }
 
        public static int min(final int a, final int b) {
            return (a <= b) ? a : b;
        }
 
    }
 
    static class IOUtils {
        public static int[] readIntArray(InputReader in, int size) {
            int[] array = new int[size];
            for (int i = 0; i < size; i++) {
                array[i] = in.readInt();
            }
            return array;
        }
 
        public static int[][] readIntTable(InputReader in, int rowCount, int columnCount) {
            int[][] table = new int[rowCount][];
            for (int i = 0; i < rowCount; i++) {
                table[i] = readIntArray(in, columnCount);
            }
            return table;
        }
 
    }
}
 
 