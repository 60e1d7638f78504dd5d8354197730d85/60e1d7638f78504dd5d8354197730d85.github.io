{"Q_ID": "1212310006", "S_NAME": "Control Statements", "Q_NAME": "Ambiguous Permutations", "Q_DESC": "Some programming contest problems are really tricky: not only do they require a different output format from what you might have expected, but also the sample output does not show the difference. For an example, let us look at permutations.\nA permutation of the integers 1 to n is an ordering of these integers. So the natural way to represent a permutation is to list the integers in this order. With n = 5, a permutation might look like 2, 3, 4, 5, 1. \nHowever, there is another possibility of representing a permutation: You create a list of numbers where the i-th number is the position of the integer i in the permutation. Let us call this second possibility an inverse permutation. The inverse permutation for the sequence above is 5, 1, 2, 3, 4. \nAn ambiguous permutation is a permutation which cannot be distinguished from its inverse permutation. The permutation 1, 4, 3, 2 for example is ambiguous, because its inverse permutation is the same. To get rid of such annoying sample test cases, you have to write a program which detects if a given permutation is ambiguous or not.\nInput Specification\nThe input contains several test cases.\nThe first line of each test case contains an integer n (1  n  100000). Then a permutation of the integers 1 to n follows in the next line. There is exactly one space character between consecutive integers. You can assume that every integer between 1and n appears exactly once in the permutation. \nThe last test case is followed by a zero.\nOutput Specification\nFor each test case output whether the permutation is ambiguous or not. Adhere to the format shown in the sample output.\n\n", "TESTCASE_1": "4\n1 4 3 2\n5\n2 3 4 5 1\n1\n1\n0\n###---###SEPERATOR---###---\nambiguous\nnot ambiguous\nambiguous", "TESTCASE_2": "4\n2 4 8 7\n5\n1 3 4 5 2\n1\n1\n0\n###---###SEPERATOR---###---\nnot ambiguous\nnot ambiguous\nambiguous", "TESTCASE_3": "2\n8 8\n4\n5 6 4 3\n2\n4 5\n0\n###---###SEPERATOR---###---\nnot ambiguous\nnot ambiguous\nnot ambiguous", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}