{"Q_ID": "1612110006", "S_NAME": "Sorting Techniques", "Q_NAME": "Insertion sort", "Q_DESC": "Sorting \nOne common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms.\n\nInsertion Sort \nThese challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with an already sorted list.\n\nInsert element into sorted list \n\nGiven a sorted list with an unsorted number  in the rightmost cell, can you write some simple code to insert  into the array so that it remains sorted?\n\nPrint the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort.\n\nGuideline: You can copy the value of e to a variable and consider its cell empty. Since this leaves an extra cell empty on the right, you can shift everything over until v can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace it with e .\n\nInput Format \n\nThere will be two lines of input:\nsize - the size of the array\nArr - the unsorted array of integers\n\nOutput Format \nOn each line, output the entire array every time an item is shifted in it.\n\nConstraints                              \n\n1=size=1000                       \n-10000=e=10000, e belongs to arr", "TESTCASE_1": "5\n2 4 6 8 3\n###---###SEPERATOR---###---\n2 4 6 8 3 \n2 4 6 8 3 \n2 4 6 8 3 \n2 3 4 6 8", "TESTCASE_2": "5\n1 0 0 0 2\n###---###SEPERATOR---###---\n0 1 0 0 2 \n0 0 1 0 2 \n0 0 0 1 2 \n0 0 0 1 2 ", "TESTCASE_3": "5\n8 9 3 1 6\n###---###SEPERATOR---###---\n8 9 3 1 6 \n3 8 9 1 6 \n1 3 8 9 6 \n1 3 6 8 9 ", "TESTCASE_4": "5\n4 3 2 5 3\n###---###SEPERATOR---###---\n3 4 2 5 3 \n2 3 4 5 3 \n2 3 4 5 3 \n2 3 3 4 5 ", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}