{"Q_ID": "1612210006", "S_NAME": "Sorting Techniques", "Q_NAME": "Insertion sort 2", "Q_DESC": "Insertion Sort  is a simple sorting technique which was covered in previous challenges. Sometimes, arrays may be too large for us to wait around for insertion sort to finish. Is there some other way we can calculate the number of times Insertion Sort shifts each elements when sorting an array?\n\nIf ki  is the number of ith elements over which the  element of the array has to shift, then the total number of shifts will be k1+k2+....+kn  .\n\nInput Format\n\nThe first line contains a single integer,T , denoting the number of queries to perform. The 2T  subsequent lines describe each query over two lines:\n\nThe first line contains an integer,N , denoting the number of elements to be sorted.\nThe second line contains  N space-separated integers describing the respective values of a[1],a[2],.....a[n]\nConstraints                              1=T=15                                1=N=10000                          1=a[i]=10000000                           \n\nOutput Format\n\nPrint N  lines containing the required answer for each query.", "TESTCASE_1": "2  \n5  \n1 1 1 2 2  \n5  \n2 1 3 1 2\n###---###SEPERATOR---###---\n0  \n4  ", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}