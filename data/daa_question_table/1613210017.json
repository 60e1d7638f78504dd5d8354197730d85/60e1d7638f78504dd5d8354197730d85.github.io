{"Q_ID": "1613210017", "S_NAME": "Divide and Conquer", "Q_NAME": "Xsquare And Number List", "Q_DESC": "Xsquare loves to play with numbers a lot. Today, he has a multi set S consisting of N integer elements. At first, he has listed all the subsets of his multi set S and later replaced all the subsets with the maximum element present in the respective subset.\n\nFor example :\n\nConsider the following multi set consisting of 3 elements S = {1,2,3}.\nList of all subsets:\n1.  { } or ,  the empty set, sometimes called the \"null\" set.\n2.  {1}\n3.  {2}\n4.  {3}\n5.  {1,2}\n6.  {1,3}\n7.  {2,3}\n8.  {1,2,3} \n\nFinal List:\n{0}\n{1}\n{2}\n{3}\n{2}\n{3}\n{3}\n{3}\n\n\n\nNow, Xsquare wonders that given an integer K how many elements in the final list are greater than ( > ) , less than ( < ) or equals to ( == ) K.\n\nTo make this problem a bit more interesting, Xsquare decided to add Q queries to this problem. Each of the queries has one of the following type.\n\n> K : Count the number of elements X in the final list such that X > K.\n< K : Count the number of elements X in the final list such that X < K.\n= K : Count the number of elements X in the final list such that X == K.\nNote:\n\nAnswer to a particular query can be very large. Therefore, Print the required answer modulo 109+7.\nAn empty subset is replaced by an integer 0.\nInput\n\nFirst line of input contains two space separated integers N and Q denoting the size of multiset S and number of queries respectively. Next line of input contains N space separated integers denoting elements of multi set S. Next Q lines of input contains Q queries each having one of the mentioned types.\n\nOutput\n\nFor each query, print the required answer modulo 109+7.\n\nConstraints:\n\n1  N,Q  5*10^5\n1  K,Si  10^9\nquery_type = { < , > , = }\nWarning :\n\nPrefer to use printf / scanf instead of cin / cout.", "TESTCASE_1": "3 5\n1 2 3\n< 1\n> 1\n= 3\n= 2\n> 3\n###---###SEPERATOR---###---\n1\n6\n4\n2\n0", "TESTCASE_2": "2 5\n2 4\n< 1\n> 1\n= 3\n= 2\n> 3\n###---###SEPERATOR---###---\n1\n3\n0\n1\n2", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}