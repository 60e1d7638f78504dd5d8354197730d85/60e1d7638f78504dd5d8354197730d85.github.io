{"Q_ID": "1614310002", "S_NAME": "Greedy Algorithm", "Q_NAME": "GREEDY REVERSE SHUFFLE MERGE", "Q_DESC": "Given a string, , we define some operations on the string as follows:\n\na. reverse(S) denotes the string obtained by reversing string . E.g.: reverse(\"abc\") = \"cba\"\n\nb. shuffle(S) denotes any string that's a permutation of string . E.g.: shuffle(\"god\")  ['god', 'gdo', 'ogd', 'odg', 'dgo', 'dog']\n\nc. merge(S1,S2) denotes any string that's obtained by interspersing the two strings & , maintaining the order of characters in both.\nE.g.: S1 = \"abc\" & S2 = \"def\", one possible result of merge(S1,S2) could be \"abcdef\", another could be \"abdecf\", another could be \"adbecf\" and so on.\n\nGiven a string such that merge(reverse(A), shuffle(A)), for some string , can you find the lexicographically smallest ?", "TESTCASE_1": "eggegg\n###---###SEPERATOR---###---\negg", "TESTCASE_2": "ehhehhe\n###---###SEPERATOR---###---\nehh", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}