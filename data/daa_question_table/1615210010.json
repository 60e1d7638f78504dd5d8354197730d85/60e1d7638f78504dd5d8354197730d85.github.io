{"Q_ID": "1615210010", "S_NAME": "Dynamic Programming", "Q_NAME": "Phoebe's Melody", "Q_DESC": "Phoebe enjoys playing music. She especially enjoys playing it for her friends.\n\nPhoebe has made a new musical instrument. The instrument is very much like a piano. It has N keys arranged in a straight line, numbered from 1 to N. The ith key has volume Vi. No two keys have the same volume and 1  Vi  N. It takes |i-j| time to move from the ith key to the jth key on the instrument. Phoebe has a unique way of playing music. Immediately after playing key i, she can play only a key j such that:\n\nj is not closer than K positions from key i (i.e. j should not be in the range [ i-K+1, i+K-1 ]).\n\nVj  Vi.\n\nEach key may have 0 or more keys that can be played immediately after it.\n\nPhoebe wants to find the summation of time required to go from each key i to the closest key that can be played after it. If there is no next playable key for a key i, then consider its time taken as 0.\n\nInput:\n\nThe first line of the input contains T, the number of test cases.\nThe first line of each test case contains N and K. The second line of each test case contains N integers of the array V.\n\nOutput:\n\nFor each test case, output a single number denoting the summation of time taken to move from each key i to the closest next playable key after i.\n\nConstraints:\n\n1 = T = 10\n1 = N = 2 * 10^5\n1 = K,V[i] = N", "TESTCASE_1": "3\n2 1\n1 2 \n5 1\n3 5 4 2 1 \n5 4\n1 2 3 4 5\n###---###SEPERATOR---###---\n1\n6\n4", "TESTCASE_2": "9\n2 1\n1 2 \n5 1\n3 5 4 2 1 \n1 1\n1 \n2 1\n1 2 \n2 1\n2 1 \n5 1\n1 2 3 4 5 \n5 1\n4 3 5 1 2 \n5 5\n1 2 3 4 5\n5 4\n1 2 3 4 5\n###---###SEPERATOR---###---\n1\n6\n0\n1\n1\n4\n5\n0\n4\n", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}