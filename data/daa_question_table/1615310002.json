{"Q_ID": "1615310002", "S_NAME": "Dynamic Programming", "Q_NAME": "AltF4 and HackerEarth's Problem Setting", "Q_DESC": "There are lots of contest coming up on HackerEarth and it is in urgent need of lots of problems. So it calls a meeting of all the problem setters in the team.\n\nThere are N problem setters in HackerEarth. Everybody has a fixed price for preparing a problem. This is given by the array prices[ ] and all elements of the array are distinct. Obviously the higher charged setters are more experienced and can easily do the task assigned to its lower charged setters.\n\nThe contest moderator AltF4, assigns a certain number of tasks to each of the setter. This is given by the array tasks[ ]. The finance team calculates the total cost to the company as sum of price[i] * tasks[i] for all i.\n\nThis was simple. But the setters have now grown greedy. They need extra incentives to meet their busy schedule, transportation and accommodation costs. So everybody decides that if HackerEarth needs them and invites them to create problems, they would charge for extra K tasks to meet these surcharges.\n\nFor example if N = 2, prices of the setters are {10, 50} and AltF4 needs tasks from both as {10, 20} the cost to company would have been 10 x 10 + 50 x 20 = 1100. With the new law of surcharges with K = 10, there are 2 possibilities.\n\n1st setter does 10 tasks and 2nd setter does 20 tasks. Cost is 10 x 20 + 50 x 30 = 1700.\n2nd setter does all 30 tasks. Cost is 50 x 40 = 2000.\nIn this case it is better to invite both the setters and do their tasks. Note that 1st setter cannot do the tasks of the 2nd setter because he is not that much experienced (lesser price).\nHowever, if K would have been 50, then analyzing the two possiblities:\n\n1st setter does 10 tasks and 2nd setter does 20 tasks. Cost is 10 x 60 + 50 x 70 = 4100.\n2nd setter does all 30 tasks. Cost is 50 x 80 = 4000.\nIn this case it is better to invite only the 2nd setter and let him do the tasks of the 1st setter as well.\nGiven the N, K, and the arrays prices[ ] and tasks[ ], your job is the help the finance team calculate the minimum cost possible for the company for doing all tasks.\n\nInput  Output:\n\nThe first line contains the number of test cases T. The first line of every test case contains two integers N K separated by space. The next two lines contains the arrays prices and tasks respectively. All numbers are space separated.\n\nFor each test case, output the minimum possible cost to the company and help the finance team.\n\nConstraints:\nT  25\n1  N, prices[i], tasks[i]  2000\n0  K  2000", "TESTCASE_1": "2\n2 10\n10 50\n10 20\n2 50\n10 50\n10 20\n###---###SEPERATOR---###---\n1700\n4000\n", "TESTCASE_2": "3\n2 30\n10 50\n10 20\n2 10\n10 50\n10 20\n2 50\n10 50\n10 20\n###---###SEPERATOR---###---\n2900\n1700\n4000", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}