{"Q_ID": "1615310003", "S_NAME": "Dynamic Programming", "Q_NAME": "String's Awesomeness", "Q_DESC": "Vivek likes strings a lot but moreover he likes Awesome strings. Vivek calls a string str Awesome if zero or more letters of the string str can be rearranged to form the string HackerEarth (case insensitive). For eg : strings HackerEarth , Earthhacker , haeackerrth are all Awesome strings whereas strings HE, Mycareerstack , hackerrearth are not Awesome at all. \n\nToday, Vivek has a special string consisting of both lower case and upper case alphabets letters only. Vivek wants to query this string for the number of Awesome strings. \n\nEach of Vivek's query has the following form L R. For a given query, Vivek wants to count the number of Awesome strings such that starting index S and ending index E of the string follows L=SE=R. \n\nNOTE \n\nTwo strings are considered to be different if either S1 != S2 or E1 != E2 where S1,E1 and S2,E2 are the starting and ending index of string 1 and string 2 respectively. \n\nHelp Vivek accomplishing this task. \n\nInput \n\nFirst line of the input contains a string S denoting the Vivek's special string. Next line of the input contains a single integer Q denoting the number of Vivek's queries. Next Q lines of the input contains two integers denoting L and R respectively. \n\nOutput \n\nFor each Vivek's query, print the required answer. \n\nConstraints \n\n1 = |S| = 5x10^5 \n1 = Q = 5x10^5 \n1 = L = R = |S| \nS belongs to the set of both lower case and upper case alphabets letters only. \n\n\nSubtask: \n\nsubtask 1 : 1 = N,Q = 10000 : 20 points \nsubtask 2 : 1 = N,Q = 10^5 : 20 points \nsubtask 3 : 1 = N,Q = 5x10^5 : 60 points \n\n\nNOTE \n\nlarge input / output data sets, be careful with some languages.", "TESTCASE_1": "HackerEarthhACKEReARTH\n5\n1 11\n2 15\n5 15\n7 20\n7 22\n###---###SEPERATOR---###---\n1\n4\n1\n4\n6", "TESTCASE_2": "eHARcRahKeTATRkaChHReeArRhCThAKEEWaeKAhRR\n6\n1 11\n2 15\n5 15\n7 20\n7 22\n8 99\n###---###SEPERATOR---###---\n1\n0\n0\n0\n1\n-1\n", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}