{"Q_ID": "1615310004", "S_NAME": "Dynamic Programming", "Q_NAME": "Bear and Climbing", "Q_DESC": "Limak is a brown bear. Brown bears often climb trees and so does Limak. As you probably know, bears use ropes to move between tops of trees.\n\nThere are N trees in a row. i-th of them grows at coordinate X[i] and has height H[i]. A further tree is always higher - it's guaranteed that X[i] < X[i+1] and H[i] < H[i+1].\n\nLimak is currently at the top of the first tree and he has a rope of length L. He wants to be at the top of the last tree. He can move from a-th to b-th tree if and only if all tree conditions are fulfilled:\n1) a < b\n2) (X[b]-X[a])^2 + (H[b]-H[a])^2 <= L - rope must be long enough\n3) H[b]-H[a] < X[b]-X[a] - it's not safe to go very uphill\n\nNote that there is no square root in the second condition. The reason is that bears calculate distances a bit different than people.\n\nLimak doesn't know if his rope is long enough. Could you help him and calculate the minimum L for which he can get from the first tree to the last one? Print -1 instead if there is no L for which Limak would reach the last tree.\n\nInput format:\n\nThe first line contains one integer number N, denoting number of trees. i-th of the next N lines contains two integer numbers X[i] and H[i], describing i-th tree.\n\nOutput format:\n\nIn the single line print the minimum possible L for which Limak would be able to get from the first to the last tree. If there is no such L, print -1 instead.\n\nConstraints:\n\n2 <= N <= 10^6\n1 <= X[i], H[i] <= 10^7\nX[i] < X[i+1]\nH[i] < H[i+1]", "TESTCASE_1": "4\n3 2\n4 3\n13 4\n15 5\n###---###SEPERATOR---###---\n104", "TESTCASE_2": "5\n1 2\n3 4\n4 2\n11 4\n13 5\n###---###SEPERATOR---###---\n53", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}