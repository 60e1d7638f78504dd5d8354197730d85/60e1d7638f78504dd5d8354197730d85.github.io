{"Q_ID": "1616110008", "S_NAME": "Backtracking", "Q_NAME": "Word Boggle", "Q_DESC": "\n\nGiven a dictionary, a method to do lookup in dictionary and a M x N board where every cell has one character. Find all possible words that can be formed by a sequence of adjacent characters. \n\nNote that we can move to any of 8 adjacent characters, but a word should not have multiple instances of same cell.\n\nExample:\n\nInput: dictionary[] = {GEEKS, FOR, QUIZ, GO};\n       boggle[][]   = {{'G','I','Z'},\n                       {'U','E','K'},\n                       {'Q','S','E'}};\n\nOutput:  Following words of dictionary are present GEEKS, QUIZ\n\nInput:\nThe first line of input contains an integer T denoting the no of test cases . Then T test cases follow. Each test case contains an integer x denoting the no of words in the dictionary. \n\nThen in the next line are x space separated strings denoting the contents of the dictionary. In the next line are two integers N and M denoting the size of the boggle. The last line of each test case contains NxM space separated values of the boggle.\n\nOutput:\nFor each test case in a new line print the space separated sorted distinct words of the dictionary which could be formed from the boggle. If no word can be formed print -1.\n\nConstraints:\n1=T=10\n1=x=10\n1=n,m=7\n\n\n", "TESTCASE_1": "1\n4\nGEEKS FOR QUIZ GO\n3 3\nG I Z U E K Q S E\n###---###SEPERATOR---###---\nGEEKS QUIZ", "TESTCASE_2": "1\n4\nSRM UNIV KTR CSE\n3 3\nU S N R V M I\n###---###SEPERATOR---###---\nSRM UNIV ", "TESTCASE_3": "1\n5\nLEMON COST IS COSTLY TODAY\n3 3\nD C Y T O A O T S\n\n###---###SEPERATOR---###---\nCOST TODAY ", "TESTCASE_4": "1\n3\nTODAY HEAVY RAIN\n3 3\nY A R O I T D A N\n###---###SEPERATOR---###---\nRAIN TODAY ", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}