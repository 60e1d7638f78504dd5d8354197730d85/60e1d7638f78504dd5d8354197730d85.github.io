{"Q_ID": "1617310003", "S_NAME": "Graph Colouring", "Q_NAME": "Connecting Nodes graph", "Q_DESC": "Given a graph containing N nodes and M bi-directional edges, where each edge connects two different nodes. Find out the minimum number of new edges to be constructed such that you can start from node 1 and visit all the edges and return to node 1, and in this process you should not traverse any edge more than once. Remember that there can be multiple edges between two nodes and the graph can have disconnected components, and it should also be ensured that all the nodes in the graph are visited.\n\nInput\nThe first line of the input consists of a single integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case consists of two space separated integers N and M, denoting the number of nodes and the number of edges respectively. The Second line of each test case contains 2*M space separated integers denoting the edges as u1 v1 u2 v2 u3 v3....\n\nOutput: For each test case, output a single line containing an integer, denoting the minimum number of new edges required to be constructed.\n\nConstraints :\n1  T  5       \n1  N,M  10^5\n1  u,v  N", "TESTCASE_1": "1\n4 3               \n1 2 2 3 3 4\n###---###SEPERATOR---###---\n1", "TESTCASE_2": "1\n4 3               \n1 1 1 1 1 1\n###---###SEPERATOR---###---\n4", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}