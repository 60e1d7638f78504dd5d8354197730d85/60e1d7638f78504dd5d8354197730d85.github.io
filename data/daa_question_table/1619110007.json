{"Q_ID": "1619110007", "S_NAME": "Sum of Subsets", "Q_NAME": "Possible Permutations", "Q_DESC": "Let us have a set of n elements; the objective is to find all the possible permutations of this set. For example if we have a set of four elements viz. {a, b, c} then we need to print all the permutation of a, b and c as give below:\n\n1)      { a, b, c}\n2)      { a, c , b}\n3)      { b, a, c}\n4)      { b, c, a}\n5)      { c, a, b}\n6)      { c, b, a}\n\nClearly for a set of n elements there exists n! different permutations.  One way to generate permutations is to iterate through n nested loops but that will be hardcoded approach as n may vary from time to time.  So one flexible approach is to generate the permutation recursively.  Let us have a set of three elements {a, b, c,} now to generate permutation follow these steps:\n\n1) Fix a and generate permutation of { b, c }\n2) Fix b and generate permutation of { a, c }\n3) Fix c and generate permutation of { a, b }\n", "TESTCASE_1": "2\n2\n3\n###---###SEPERATOR---###---\n2 3 \n3 2 ", "TESTCASE_2": "3\n2\n6\n3\n###---###SEPERATOR---###---\n2 6 3 \n2 3 6 \n6 2 3 \n6 3 2 \n3 6 2 \n3 2 6 ", "TESTCASE_3": "3\n2\n4\n2\n3\n3\n###---###SEPERATOR---###---\n2 4 2 \n2 2 4 \n4 2 2 \n4 2 2 \n2 4 2 \n2 2 4 ", "TESTCASE_4": "3\n2\n3\n6\n###---###SEPERATOR---###---\n2 3 6 \n2 6 3 \n3 2 6 \n3 6 2 \n6 3 2 \n6 2 3 ", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}