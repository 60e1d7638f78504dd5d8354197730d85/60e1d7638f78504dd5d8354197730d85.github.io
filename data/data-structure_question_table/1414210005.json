{"Q_ID": "1414210005", "S_NAME": "Sorting Techniques", "Q_NAME": "Monk and Modulo Based Sorting", "Q_DESC": "Monk likes to experiment with algorithms. His one such experiment is using modulo in sorting.He describes an array modulo sorted as:\nGiven an integer k, we need to sort the values in the array according to their modulo with k. That is, if there are two integers a and b, and a%kb%k then a would come before b in the sorted array. If a%k=b%k , then the integer which comes first in the given array remains first in the sorted array.\nGiven an initial array, you need to print modulo sorted array.\n\nInput:\nThe first line consists of two integers N and k, N being the number of elements in the array and k is the number with which we need to take the modulo.\nThe next line consists of N space separated integers , denoting the elements of the array A.\n\nOutput:\nPrint the modulo sorted array of the given array.\n\nConstraints:\n 1N10^4\n 1k10^9\n1A[i]10^9; \n1iN", "TESTCASE_1": "10 10\n84 87 78 16 94 36 87 93 50 22\n###---###SEPERATOR---###---\n50 22 93 84 94 16 36 87 87 78", "TESTCASE_2": "10 20\n384 387 278 416 294 336 387 493 150 422\n###---###SEPERATOR---###---\n422 384 387 387 150 493 294 416 336 278", "TESTCASE_3": "100 1000\n9384 887 2778 6916 7794 8336 5387 493 6650 1422 2363 28 8691 60 7764 3927 541 3427 9173 5737 5212 5369 2568 6430 5783 1531 2863 5124 4068 3136 3930 9803 4023 3059 3070 8168 1394 8457 5012 8043 6230 7374 4422 4920 3785 8538 5199 4325 8316 4371 6414 3527 6092 8981 9957 1874 6863 9171 6997 7282 2306 926 7085 6328 337 6506 847 1730 1314 5858 6125 3896 9583 546 8815 3368 5435 365 4044 3751 1088 6809 7277 7179 5789 3585 5404 2652 2755 2400 9933 5061 9677 3369 7740 13 6227 8587 8095 7540\n###---###SEPERATOR---###---\n5012 13 4023 28 8043 4044 3059 60 5061 4068 3070 7085 1088 6092 8095 5124 6125 3136 8168 9171 9173 7179 5199 5212 6227 6230 7277 7282 2306 1314 8316 4325 6328 8336 337 2363 365 3368 5369 3369 4371 7374 9384 5387 1394 2400 5404 6414 1422 4422 3427 6430 5435 8457 493 6506 3527 1531 8538 7540 541 546 2568 9583 3585 8587 6650 2652 9677 8691 1730 5737 7740 3751 2755 7764 2778 5783 3785 5789 7794 9803 6809 8815 847 5858 2863 6863 1874 887 3896 6916 4920 926 3927 3930 9933 9957 8981 6997", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}