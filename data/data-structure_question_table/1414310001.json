{"Q_ID": "1414310001", "S_NAME": "Sorting Techniques", "Q_NAME": "Monk and Sorting Algorithm ", "Q_DESC": "Monk recently taught Fredo about sorting. Now, he wants to check whether he understood the concept or not. So, he gave him the following algorithm and asked to implement it:\n\nAssumptions:\nWe consider the rightmost digit of each number to be at index 1, second last at index 2 and so on till the leftmost digit of the number. Meaning of ith chunk: This chunk consists of digits from position 5i to 1+5(i1) in the given number.If there is no digit at some position in the number, take the digit to be 0. Initially, i is 1. Construct the ith chunk, for all of the integers in the array. Let's call the value of this chunk to be the weight of respective integer in the array. If weight of all the integers of the array is 0 , then STOP Sort the array according to the weights of integers. If two integers have same weight, then the one which appeared earlier should be positioned earlier after the sorting is done. The array changes to this sorted array. Increment i by 1 and repeat from STEP 1 See the sample explanation for a better understanding. So, Fredo understood the concept and coded it. Now, Monk asks you to write the code for the algorithm to verify Fredo's answer.\n\nInput:\nThe first line of the input contains N denoting the number of elements in the array to be sorted.\nThe next line contains N single space separated integers denoting the array elements.\n\nOutput:\nYou need to print the new array in each step of the algorithm.\n\nConstraints:\n 1N10^6\n1A[i]10^18\n A[] is the input array\nSize of integers (number of digits in integer) in A may not be same.", "TESTCASE_1": "5\n65 41 25 95 11\n###---###SEPERATOR---###---\n11 25 41 65 95 ", "TESTCASE_2": "10\n40 74 35 7 99 64 57 51 63 68\n###---###SEPERATOR---###---\n7 35 40 51 57 63 64 68 74 99", "TESTCASE_3": "20\n26 70 19 21 19 2 65 51 58 58 60 52 71 96 58 58 73 41 50 48\n###---###SEPERATOR---###---\n2 19 19 21 26 41 48 50 51 52 58 58 58 58 60 65 70 71 73 96", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}