{"Q_ID": "1416110005", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 5", "Q_DESC": "This is a C Program to implement stack using queue. The idea is pretty simple. We start with an empty queue. For the push operation we simply insert the value to be pushed into the queue. The pop operation needs some manipulation. When we need to pop from the stack (simulated with a queue), first we get the number of elements in the queue, say n, and remove (n-1) elements from the queue and keep on inserting in the queue one by one. That is, we remove the front element from the queue, and immediately insert into the queue in the rear, then we remove the front element from the queue and then immediately insert into the rear, thus we continue upto (n-1) elements. Then we will perform a remove operation, which will actually remove the nth element of the original state of the queue, and return. Note that the nth element in the queue is the one which was inserted last, and we are returning it first, therefore it works like a pop operation (Last in First Out).\n\nINPUT \n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nQutting.\n\neither 1 ,2 or 0 must be the first line of the input and if 1 is the first line input then it should be followed in next line by the value to be pushed into the stack . a pop choice also must be given at least once to see the LIFO in action . The input MUST be terminated by a 0 or else it will\nthrow a buffer value exceeded error.", "TESTCASE_1": "1\n12\n1\n75\n1\n24\n1\n67\n1\n13\n2\n0\n###---###SEPERATOR---###---\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[12], \nPushed Value: 12\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[12], [75], \nPushed Value: 75\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[12], [75], [24], \nPushed Value: 24\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[12], [75], [24], [67], \nPushed Value: 67\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[12], [75], [24], [67], [13], \nPushed Value: 13\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nCurrent Queue:\n[12], [75], [24], [67], \nPopped Value: 13\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nExiting.", "TESTCASE_2": "1\n2\n1\n4\n1\n6\n2\n1\n0\n0\n###---###SEPERATOR---###---\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[2], \nPushed Value: 2\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[2], [4], \nPushed Value: 4\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[2], [4], [6], \nPushed Value: 6\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nCurrent Queue:\n[2], [4], \nPopped Value: 6\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nEnter value to Push:\nCurrent Queue:\n[2], [4], [0], \nPushed Value: 0\n\n[1] Push\n[2] Pop\n[0] Exit\nChoice: \nExiting.", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}