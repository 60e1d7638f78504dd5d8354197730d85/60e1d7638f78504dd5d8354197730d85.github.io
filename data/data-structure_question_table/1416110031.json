{"Q_ID": "1416110031", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 30", "Q_DESC": "Iterative Preorder Traversal\nGiven a Binary Tree, write an iterative function to print Preorder traversal of the given binary tree.\n\nRefer this for recursive preorder traversal of Binary Tree. To convert an inherently recursive procedures to iterative, we need an explicit stack. Following is a simple stack based iterative process to print Preorder traversal.\n1) Create an empty stack nodeStack and push root node to stack.\n2) Do following while nodeStack is not empty.\n.a) Pop an item from stack and print it.\n.b) Push right child of popped item to stack\n.c) Push left child of popped item to stack\n\nRight child is pushed before left child to make sure that left subtree is processed first.\n\nINPUT: The first and only input line must contain the number from which the set of numbers for various node values can be generated by summing that particular number with an offset value for each and every node value in the tree.", "TESTCASE_1": "3\n###---###SEPERATOR---###---\n3 4 6 7 5 8", "TESTCASE_2": "5\n###---###SEPERATOR---###---\n5 6 8 9 7 10", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}