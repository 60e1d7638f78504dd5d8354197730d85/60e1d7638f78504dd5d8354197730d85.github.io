{"Q_ID": "1416210009", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 39", "Q_DESC": "NICEBTRE - Nice Binary Trees \n \n\nFor example, the following tree is nice,but the following tree is not.The leaves of a nice binary tree are labeled by the letter l, and other nodes are labeled by the letter n.Given the pre-order traversal of a nice binary tree, you are required to find the depth of the tree.Notes : 1. The depth of a tree is defined as the length of the longest path with one end at the root.2. The pre-order traversal of the tree in the first image above produces the string nlnnlll.\nBinary trees can sometimes be very difficult to work with. Fortunately, there is a class of trees with some really nice properties. A rooted binary tree is called nice, if every node is either a leaf, or has exactly two children.\n\nThe leaves of a nice binary tree are labeled by the letter l, and other nodes are labeled by the letter n.\n\nGiven the pre-order traversal of a nice binary tree, you are required to find the depth of the tree.\n\nNotes : \n\n1. The depth of a tree is defined as the length of the longest path with one end at the root.\n\n2. The pre-order traversal of the tree in the first image above produces the string nlnnlll.\n\n \n\nInput\n\nThe first line contains the number of test cases T. T lines follow. Each line contains a string, which represents the pre-order traversal of a nice binary tree. Leaves are represented by the letter l and other nodes by the letter n. The input is guaranteed to be the preorder traversal of a nice binary tree.\n\n \n\nOutput\n\nOutput one line for each test case, containing a single integer, the depth of tree.\n\n \n\nConstraints\n\n0 < T < 20\n\nLength of the input string in each test case is at most 10000.", "TESTCASE_1": "3\nl\nnlnll\nnlnnlll\n\n###---###SEPERATOR---###---\n0\n2\n3", "TESTCASE_2": "4\nnn\nlnlnl\nnnnlnl\nnln\n\n###---###SEPERATOR---###---\n0\n0\n4\n1", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}