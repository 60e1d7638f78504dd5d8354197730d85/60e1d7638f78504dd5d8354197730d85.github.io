{"Q_ID": "1416210014", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 44", "Q_DESC": "Breadth First Traversal or BFS for a Graph\nBreadth First Traversal (or Search) for a graph is similar to Breadth First Traversal of a tree (See method 2 of this post). The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. For simplicity, it is assumed that all vertices are reachable from the starting vertex.\nFor example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we dont mark visited vertices, then 2 will be processed again and it will become a non-terminating process. A Breadth First Traversal of the following graph is 2, 0, 3, 1.\nINPUT:\nmention the vertex on the graph from which the traversal is to be initiated\nOUTPUT:\ndisplay the breadth first traversal sequence .", "TESTCASE_1": "2\n###---###SEPERATOR---###---\nFollowing is Breadth First Traversal (starting from the input vertex ) \n2 0 3 1", "TESTCASE_2": "1\n###---###SEPERATOR---###---\nFollowing is Breadth First Traversal (starting from the input vertex ) \n1 2 0 3\n\n", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}