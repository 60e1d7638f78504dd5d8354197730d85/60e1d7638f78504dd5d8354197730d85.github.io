{"Q_ID": "1416310013", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 56", "Q_DESC": "Design and Implement Special Stack Data Structure | Added Space Optimized Version\nQuestion: Design a Data Structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return minimum element from the SpecialStack. All these operations of SpecialStack must be O(1). To implement SpecialStack, you should only use standard Stack data structure and no other data structure like arrays, list, .. etc.\n\nExample:\n\nConsider the following SpecialStack\n16  -- TOP\n15\n29\n19\n18\n\nWhen getMin() is called it should return 15, which is the minimum \nelement in the current stack. \n\nIf we do pop two times on stack, the stack becomes\n29  -- TOP\n19\n18\n\nWhen getMin() is called, it should return 18 which is the minimum \nin the current stack.\nUse two stacks: one to store actual stack elements and other as an auxiliary stack to store minimum values. The idea is to do push() and pop() operations in such a way that the top of auxiliary stack is always the minimum. Let us see how push() and pop() operations work.\n\nPush(int x) // inserts an element x to Special Stack \n1) push x to the first stack (the stack with actual elements)\n2) compare x with the top element of the second stack (the auxiliary stack). Let the top element be y.\n..a) If x is smaller than y then push x to the auxiliary stack.\n..b) If x is greater than y then push y to the auxiliary stack.\n\nint Pop() // removes an element from Special Stack and return the removed element \n1) pop the top element from the auxiliary stack.\n2) pop the top element from the actual stack and return it.\n\nThe step 1 is necessary to make sure that the auxiliary stack is also updated for future operations.\n\nint getMin() // returns the minimum element from Special Stack \n1) Return the top element of auxiliary stack.\nINPUT:\nThe first line must consist of the no. of  elements that you want to push into the stack\nThe second line must contain the elements to be pushed into the stack\nOUTPUT:\nReturns the top element of the auxillary stack.", "TESTCASE_1": "4\n10\n20 \n30\n5\n###---###SEPERATOR---###---\n5", "TESTCASE_2": "5\n23\n32\n12\n4\n7\n###---###SEPERATOR---###---\n4", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}