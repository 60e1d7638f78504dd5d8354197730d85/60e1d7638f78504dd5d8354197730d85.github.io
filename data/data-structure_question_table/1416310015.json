{"Q_ID": "1416310015", "S_NAME": "Stack Implementation", "Q_NAME": "Stack 58", "Q_DESC": "Topological Sorting\nTopological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.\nFor example, a topological sorting of the following graph is 5 4 2 3 1 0. There can be more than one topological sorting for a graph. For example, another topological sorting of the following graph is 4 5 2 3 1 0. The first vertex in topological sorting is always a vertex with in-degree as 0 (a vertex with no in-coming edges).\n\n\nTopological Sorting vs Depth First Traversal (DFS):\nIn DFS, we print a vertex and then recursively call DFS for its adjacent vertices. In topological sorting, we need to print a vertex before its adjacent vertices. For example, in the given graph, the vertex 5 should be printed before vertex 0, but unlike DFS, the vertex 4 should also be printed before vertex 0. So Topological sorting is different from DFS. .\nINPUT:\nenter no. of graph edges connections\nenter the 2 node values at the ends of a particular edge and do so for all such edges\nOUTPUT:\nThe topological sort of the graph sequence is obtained", "TESTCASE_1": "6\n5 2\n5 0\n4 0\n4 1\n2  3\n3 1\n###---###SEPERATOR---###---\nFollowing is a Topological Sort of the given graph \n5 4 2 3 1 0", "TESTCASE_2": "6\n3 5\n1 3\n1 4\n2 4\n5 4\n2 3\n###---###SEPERATOR---###---\nFollowing is a Topological Sort of the given graph \n2 1 3 5 4 0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}