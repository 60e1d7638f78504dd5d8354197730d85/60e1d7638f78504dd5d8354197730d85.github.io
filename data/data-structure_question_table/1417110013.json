{"Q_ID": "1417110013", "S_NAME": "Queue  Implementation", "Q_NAME": "Queue using Two Stacks", "Q_DESC": "A queue is an abstract data type that maintains the order in which elements were added to it, allowing the oldest elements to be removed from the front and new elements to be added to the rear. \n\nA queue has the following operations:\n\nEnqueue: add a new element to the end of the queue.\nDequeue: remove the element from the front of the queue and return it.\n\nIn this challenge, you must first implement a queue using two stacks. Then process Q queries, where each query is one of the following types:\n\n1: Enqueue element X into the end of the queue.\n2: Dequeue the element at the front of the queue.\n3: Print the element at the front of the queue.\n\nINPUT:\n\nThe first line contains a single integer, Q denoting the number of queries. \nEach line of the subsequent lines contains a single query in the form described in the problem statement above. All three queries start with an integer denoting the query, but only query type 1 is followed by an additional space-separated value, denoting the value X to be enqueued into queue.\n\nOUTPUT:\nFor each query of type 3 , print the value of the element at the front of the queue on a new line.", "TESTCASE_1": "10\n1 42\n2\n1 14\n3\n1 28\n3\n1 60\n1 78\n2\n2\n###---###SEPERATOR---###---\n14\n14", "TESTCASE_2": "10\n1 24\n2\n1 12\n3\n1 20\n1 60\n2\n1 78\n2\n3\n###---###SEPERATOR---###---\n12\n60", "TESTCASE_3": "7\n1 24\n2\n1 12\n3\n1 20\n2\n3\n###---###SEPERATOR---###---\n12\n20", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}