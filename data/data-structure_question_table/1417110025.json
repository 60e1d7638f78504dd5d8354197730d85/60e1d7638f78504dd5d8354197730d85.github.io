{"Q_ID": "1417110025", "S_NAME": "Queue  Implementation", "Q_NAME": "Castle on the Grid using BFS", "Q_DESC": "You are given a grid with both sides equal to N. Rows and columns are numbered from 0 to N-1.There is a castle on the intersection of the Ath row and the Bth column.\n\nYour task is to calculate the minimum number of steps it would take to move the castle from its initial position to the goal position (C,D).It is guaranteed that it is possible to reach the goal position from the initial position.\n\nNote: You can move the castle from cell (A,B) to any (X,Y) in a single step if there is a straight horizontal line or a straight vertical line between (A,B) and (X,Y) that does not contain any forbidden cell. Here, \"X\" denotes a forbidden cell.A graph from the grid can be constructed by going up, down, left and right from a point (i, j) in the grid till we get a forbidden cell. For every point (p,q) which can be visited from (i, j) we add an edge from (i, j) to (p,q).  After adding the edges, perform a breadth first search using queue.\n\nINPUT:\n\nThe first line contains an integer N,the size of the grid.\nThe following N lines contains a string of length  that consists of one of the following characters: \"X\" or \".\" Here, \"X\" denotes a forbidden cell, and \".\" denotes an allowed cell.\nThe last line contains A,B, denoting the initial position of the castle at (A,B), and C,D, denoting the goal position at (C,D). Here,A,B,C and D are space separated.\n\nOUTPUT:\n\nThe integer denoting the minimum number of steps required to move the castle to the goal position should be printed.\n\nEXPLANATION:\nConsider the Input:\n3\n.X.\n.X.\n...\n0 0 0 2\nThe source is (0,0) & goal position is(0,2) and the grid is of size 3.\nHere,a path that one could follow in order to reach the destination in steps:\n(0,0) ----> (2,0)---->(2,2)---->(0,2).\nHence,output should be 3.", "TESTCASE_1": "3\n.X.\n.X.\n...\n0 0 0 2\n###---###SEPERATOR---###---\n3", "TESTCASE_2": "3\n...\nX..\n...\n0 0 1 2\n###---###SEPERATOR---###---\n2", "TESTCASE_3": "4\n....\nXX..\n...X\n.X..\n0 0 3 0\n###---###SEPERATOR---###---\n4", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}