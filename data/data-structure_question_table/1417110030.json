{"Q_ID": "1417110030", "S_NAME": "Queue  Implementation", "Q_NAME": "Roy and Trending Topics using Priority queue", "Q_DESC": "Roy is trying to develop a widget that shows Trending Topics on the home page of E-Lab website. He has gathered a list of N Topics (their IDs) and their popularity score (say z-score) from the database. Now z-score changes everyday according to the following rules:\nWhen a topic is mentioned in a 'Post', its z-score is increased by 50.\n-A 'Like' on such a Post, increases the z-score by 5.\n-A 'Comment' increases z-score by 10.\n-A 'Share' causes an increment of 20.\nNow the Trending Topics are decided according to the change in z-score. One with the highest increment comes on top and list follows.\nRoy seeks your help to write an algorithm to find the top 5 Trending Topics.\nIf change in z-score for any two topics is same, then rank them according to their ID (one with higher ID gets priority). It is guaranteed that IDs will be unique.\n\nINPUT:\nFirst line contains integer N\nN lines follow\nEach contains 6 space separated numbers representing Topic ID, current z-score - Z, Posts - P, Likes - L, Comments - C, Shares - S\n\nOUTPUT:\nPrint top 5 Topics each in a new line.\nEach line should contain two space separated integers, Topic ID and new z-score of the topic.\n\nEXPLANATION:\nConsider the input,\n8\n1003 100 4 0 0 0    (new Z- score = 200, change = 100)\n1002 200 6 0 0 0    (new Z- score = 300, change = 100)\n1001 300 8 0 0 0    (new Z- score = 400, change = 100)\n1004 100 3 0 0 0    (new Z- score = 150, change = 50)\n1005 200 3 0 0 0    (new Z- score = 150, change = -50)\n1006 300 5 0 0 0    (new Z- score = 250, change = -50)\n1007 100 3 0 0 0    (new Z- score =150, change =  50)\n 999 100 4 0 0 0     (new Z- score = 200, change = 100)\nNow sort them according to the change in z-score. Change in z-score for IDs 999, 1001, 1002, 1003 is 100, so sort them according to their ID (one with the higher ID gets priority). Similarly proceed further.After you get the top 5 list of Topic IDs according to the above criteria, find the new z-score from the table for each ID. Hence, the output will be,\n1003 200\n1002 300\n1001 400\n999 200\n1007 150", "TESTCASE_1": "8\n1003 100 4 0 0 0\n1002 200 6 0 0 0\n1001 300 8 0 0 0\n1004 100 3 0 0 0\n1005 200 3 0 0 0\n1006 300 5 0 0 0\n1007 100 3 0 0 0\n999 100 4 0 0 0\n###---###SEPERATOR---###---\n1003 200\n1002 300\n1001 400\n999 200\n1007 150", "TESTCASE_2": "6\n1001 150 2 1 2 4\n1004 100 6 5 1 0\n1003 250 8 8 10 1\n1000 100 3 1 2 0\n1002 200 3 2 7 1\n1005 300 5 5 6 2\n###---###SEPERATOR---###---\n1003 560\n1004 335\n1005 375\n1000 175\n1001 205", "TESTCASE_3": "10\n1001 150 2 1 2 4\n1006 200 2 1 0 0\n1004 100 6 5 1 0\n1003 250 8 8 10 1\n1000 100 3 1 2 0\n1002 200 3 2 7 1\n1005 300 5 5 6 2\n1007 800 5 1 2 3\n1008 500 5 5 7 8\n1009 200 6 7 10 10\n###---###SEPERATOR---###---\n1009 635\n1003 560\n1004 335\n1005 375\n1000 175", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}