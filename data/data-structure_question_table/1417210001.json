{"Q_ID": "1417210001", "S_NAME": "Queue  Implementation", "Q_NAME": "Breadth First Traversal for a Graph", "Q_DESC": "Given a graph with N nodes and E edges, perform a Breadth First Search for a graph from a vertex V.Graphs may contain cycles, so we may come to the same node again.We have to traverse only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex.For example, in the following graph, with 4 nodes and 6 edges with (0 1),(0 2),(1 2),(2 0),(2 3),(3 3)we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0.A Breadth First Traversal of the following graph is 2, 0, 3, 1Using queues perform the BFS operation on the graph from vertex V.\nINPUT:\nThe first line of input is N (number of nodes in the graph) and next line is E(number of edges in the graph).Next E lines, each contain the edge vertices x,y seperated by spaces.The last line of input contains the starting vertex V feom which BFS is done.\n\nOUTPUT:\nThe breadth first Traversal of the graph starting from vertex V.", "TESTCASE_1": "4\n6\n0 1\n0 2\n1 2\n2 0\n2 3\n3 3\n2\n###---###SEPERATOR---###---\n2 0 3 1", "TESTCASE_2": "5\n7\n0 1\n0 4\n1 2\n2 4\n2 1\n3 2\n4 1\n3\n###---###SEPERATOR---###---\n3 2 4 1", "TESTCASE_3": "5\n8\n0 1\n1 0\n0 4\n1 2\n2 4\n2 1\n3 2\n4 1\n4\n###---###SEPERATOR---###---\n4 1 0 2", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}