{"Q_ID": "1417210008", "S_NAME": "Queue  Implementation", "Q_NAME": "Minimum Spanning Tree using priority queues", "Q_DESC": "Given an undirected and connected graph G=(V,E), a spanning tree of the graph G is a tree that spans G (that is, it includes every vertex of G) and is a subgraph of G (every edge in the tree belongs to G)\nIn Prims Algorithm we grow the spanning tree from a starting position.Select the cheapest vertex that is connected to the growing spanning tree and is not in the growing spanning tree and add it into the growing spanning tree. This can be done using Priority Queues. Insert the vertices, that are connected to growing spanning tree, into the Priority Queue.Check for cycles in the graph and find the Minimum spanning tree of the graph.\nGiven a weighted undirected graph. Find the sum of weights of edges of a Minimum Spanning Tree.\nINPUT:\nGiven 2 integers N and M. N represents the number of vertices in the graph. M represents the number of edges between any 2 vertices.\nThen,M lines follow, each line has 3 space separated integers ai , bi, wi where ai and bi represents an edge from a vertex ai to vertex bi and wi respresents the weight of that edge.\n\nOUTPUT:\nPrint the summation of edges weights in the MST.", "TESTCASE_1": "4 5\n1 2 7\n1 4 6\n4 2 9\n4 3 8\n2 3 6\n###---###SEPERATOR---###---\n19", "TESTCASE_2": "5 7\n1 2 8\n1 4 5\n3 5 7\n5 4 2\n4 2 7\n5 3 3\n2 3 6\n###---###SEPERATOR---###---\n16", "TESTCASE_3": "6 11\n1 2 8\n1 4 5\n1 5 10\n1 6 11\n5 4 2\n4 2 7\n5 3 3\n5 6 1\n6 3 4\n2 6 12\n2 3 6\n\n###---###SEPERATOR---###---\n17", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}