{"Q_ID": "1417210010", "S_NAME": "Queue Implementation", "Q_NAME": "Huffman coding using Priority Queue", "Q_DESC": "Huffman coding is a lossless data compression algorithm. The idea is to assign variable-legth codes to input characters, lengths of the assigned codes are based on the frequencies of corresponding characters. The most frequent character gets the smallest code and the least frequent character gets the largest code.\nLet us understand prefix codes with a counter example. Let there be four characters a, b, c and d, and their corresponding variable length codes be 00, 01, 0 and 1. This coding leads to ambiguity because code assigned to c is prefix of codes assigned to a and b. If the compressed bit stream is 0001, the de-compressed output may be cccd or ccb or acd or ab.You are given a string and the frequency of its characters in an integer array.Using min heap implemented as priority queue, print the Huffman code from the Huffman tree.\n\nINPUT:\nThe first line of input N is the number of elements in the character array.The next line consists of N characters (Ci) and is followed by their respective integer frequencies(fi).\n\nOUTPUT:\nThe huffman coding corresponding to the characters (ci) along with characters (Ci) seperated with spaces and each code is printed in new line( printed according to huffman tree from root node to leaf nodes).", "TESTCASE_1": "6\na b c d e f\n15 19 21 31 36 45\n###---###SEPERATOR---###---\na 000\nb 001\ne 01\nf 10\nc 110\nd 111", "TESTCASE_2": "7\na b c d e f g\n5 16 20 37 39 47 51\n###---###SEPERATOR---###---\nc 000\na 0010\nb 0011\nf 01\ng 10\nd 110\ne 111", "TESTCASE_3": "10\na b c d e f g h i j\n7 16 19 24 28 34 39 44 48 56\n###---###SEPERATOR---###---\nj 00\nf 010\ng 011\nc 1000\na 10010\nb 10011\nh 101\ni 110\nd 1110\ne 1111", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}