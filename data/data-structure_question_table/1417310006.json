{"Q_ID": "1417310006", "S_NAME": "Queue Implementation", "Q_NAME": "Chess Knight Problem", "Q_DESC": "Given any source point and destination point on a chess board, we need to find whether Knight can move to the destination or not. Note that a knight cannot go out of the board.Find whether Knight can move to the destination or not;If yes, then what would be the minimum number of steps for the knight to move to the said point.\nIf knight can not move from the source point to the destination point, then return -1.Use BFS by queues,as it is a Shortest Path problem.\nFor example, if the current location is (x, y), we can move to (x + row[k], y + col[k]) for 0 = k =7 using below array.\nrow[] = [ 2, 2, -2, -2, 1, 1, -1, -1 ]\ncol[] = [ -1, 1, 1, -1, 2, -2, 2, -2 ]\n\nSo, from position (x, y) Knights can move to:\n(x + 2, y  1)\n(x + 2, y + 1)\n(x  2, y + 1)\n(x  2, y  1)\n(x + 1, y + 2)\n(x + 1, y  2)\n(x  1, y + 2)\n(x  1, y  2)\n\nNote that in BFS, all cells having shortest path as 1 are visited first, followed by their adjacent cells having shortest path as 1 + 1 = 2 and so on.. so if we reach any node in BFS, its shortest path = shortest path of parent + 1. So, the first occurrence of the destination cell gives us the result and we can stop our search there. It is not possible that the shortest path exists from some other cell for which we havent reached the given node yet. If any such path was possible, we would have already explored it.\n\nINPUT:\nN, M, x1, y1, x2, y2\nwhere N and M are size of chess board\nx1, y1  coordinates of source point\nx2, y2  coordinates of destination point\n\nOUTPUT:\nIt should contain the value of Minimum moves or -1 if not possible.\n\nExample:\nInput : 8 8 1 1 8 8\nOutput :  6", "TESTCASE_1": "8 8 1 1 8 8\n###---###SEPERATOR---###---\n6", "TESTCASE_2": "6 6 1 1 4 1\n###---###SEPERATOR---###---\n3", "TESTCASE_3": "10 10 1 7 9 9\n###---###SEPERATOR---###---\n4", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}