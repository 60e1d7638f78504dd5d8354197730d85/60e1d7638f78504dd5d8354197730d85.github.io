{"Q_ID": "1420310014", "S_NAME": "Hashing", "Q_NAME": "Hary has an Idea", "Q_DESC": "Toru proposes an idea(a bad one!) for the hackathon coming up.Hary being smart, gives Toru a long nonsense game so that he stops bothering her about it.\n\nHary gives him a string and \nQ queries.\n\nFor each query there are two integers \nl and \nr\nToru is supposed to create a new string of 26 characters for each query using following rules:\n\nHe needs to count the occurrence of each alphabet from l to r\n\nThe 1st position in the new string is for occurrence of a , second for b and so on.\n\nIf a occurs x times in the range l to r , the first position in the string will be the x%26 +1, character of the english alphabet.\n\nFor each query, Toru needs to determine the longest prefix which is also the suffix of newly created string.\n\nINPUT\n\nThe first line of input contains two integers \nN\nN and \nQ\nQ denoting length of the string and total number of queries.\n\nThe second line contains the string.\n\nQ\nQ lines, one for each query follows\n\nFor each query, two integers are provided \nl\nl and \nr\nr \n0\n<\nl\n\nr\n\nN\n0<lrN\nOUTPUT\n\nFor each query, print the longest prefix which is also a suffix of newly created string. Print Q lines , one for each query. If no such prefix exist, print \"None\" for that query.\n\nCONSTRAINTS\n\n0\n<\nl\n\nr\n\nN\n0<lrN\nString contains only lowercase English alphabets.", "TESTCASE_1": "26 1\nabcdefghijklmnopqrstuvwxyz\n1 26\n###---###SEPERATOR---###---\nbbbbbbbbbbbbbbbbbbbbbbbbb", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}