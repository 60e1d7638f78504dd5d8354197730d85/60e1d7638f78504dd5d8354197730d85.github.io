{"Q_ID": "1420310022", "S_NAME": "Hashing", "Q_NAME": "Alex and the Number Theory", "Q_DESC": "Alex is playing with a Tree \nT rooted at node \n1 consisting of \nN nodes. Each node has a digit written on it ranging from \n0 to \n9 inclusive. He has an interesting task for you as follows:\n\nYou are given a prime number \nK that is co-prime to \n10 and \nQ queries to answer. In each query, you shall be given \n2 numbers \ni and \nj. It is guaranteed that for each query, node \ni shall be an ancestor of node \nj or i=j. Now, you need to report if the number formed by writing out the the digits from left to right of each node on the path from \ni to j inclusive, is divisible by \nK.\n\nWriting out the digits from left to right implies that the digit written on node \ni shall be the most significant digit of the number thus formed, and the one written on node \nj shall be the least significant one. For more, refer to the sample explanation.\n\nCan you do it ?\n\nInput Format :\n\nThe first line contains \n3 space separated integers denoting \nN, \nK and Q\n\n\nThe next line contains \nN space separated integers. where the \n\nith integer is \nA[i] and denotes the digit written on node \ni.\n\nThe next line contains \nN1 space separated integers, where the \n\nith integer denotes the parent of node \ni+1.\n\nEach of the next \n\nQ lines contains \n2 space separated integers, denoting the parameters of the \nith query.\n\nOutput Format :\n\nFor the \nith query, print \"YES\" (without quotes) if the number formed by the parameters of the \nith is divisible by \nK, else print \"NO\" (without quotes).\n\nConstraints :\n\n\n1N210^5\n2K210^7. It is guaranteed that \nK\nK is a prime number and is co-prime to \n10.\n0A[i]9\n1Q210^5\n1parent[i]<i\n\nNote :\n\nThe number thus formed may contain leading zeros.", "TESTCASE_1": "7 7 3\n3 4 4 3 4 5 9\n1 2 2 1 5 5\n1 3\n1 4\n5 7\n###---###SEPERATOR---###---\nNO\nYES\nYES", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}