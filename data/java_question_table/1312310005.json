{"Q_ID": "1312310005", "S_NAME": "Data types and Operators", "Q_NAME": "Little Elephant and Swapping", "Q_DESC": "A Little Elephant from the Zoo of Lviv likes lucky strings, i.e., the strings that consist only of the lucky digits 4 and 7.\n\nHe is now studying some special transformation defined on the set of the lucky strings. The lucky string T is called a swap permutation of the lucky string S with |S| = N if it can be derived from S by the following process.\nChoose some integers L and R such that 1  L  R  N.\nDenote by A the substring S[L, R] and by B the concatenation S[1, L - 1] + S[R + 1, N].\nChoose some integer K such that 0  K  |B|.\nPut T = B[1, K] + A + B[K + 1, |B|].\n\nIn other words, T is a swap permutation of S if it can be obtained from S by deleting some non-empty substring from S and then inserting it back into any position of S. Note that S is always a swap permutation of itself.\n\nDenote by F(S) the length of the longest non-decreasing subsequence of S. In other words, this subsequence should have one of the following forms: 444...444, 777...777, 444...444777...777.\n\nThe Little Elephant has the lucky string S and as an experienced theoretical scientist he is interested in some quite theoretical problem. Namely, he wants to find the maximal value of F(T) if T can be an arbitrary swap permutation of S. Help him and find this value.\n\nNotes.\n\nLet S be some lucky string. Then\n|S| denotes the length of the string S;\nS[i] (1  i  |S|) denotes the ith character of S (the numeration of characters starts from 1);\nS[L, R] (1  L  R  |S|) denotes the string with the following sequence of characters: S[L], S[L + 1], ..., S[R], and is called a substring of S. For L > R we mean by S[L, R] an empty string.\n\nFor any two lucky strings S and T their concatenation is defined as the sequence of characters in S followed by the sequence of characters in T, and is denoted by S + T.\n\nThe string T is called a subsequence of the string S if T can be derived from S by deleting some (possibly zero) number of characters without changing the order of the remaining characters. For example, T = 474 is a subsequence of S = 74477747 since after deleting characters at positions 1, 2, 5, 6, 8 from S we obtain T. Note that, the empty string and the string S itself are always the subsequences of S.\n\nInput\n\nThe first line of the input file contains a single integer T, the number of test cases. Each of the following T lines contains one string, the string S for the corresponding test case. The input file does not contain any whitespaces.\n\nOutput\n\nFor each test case, output a single line containing the answer for this test case, that is, max{F(T) : T is a swap permutation of S}.\n\nConstraints\n\n1  T  10\n\n1  |S|  100000\n\nS consists only of the lucky digits 4 and 7.", "TESTCASE_1": "5\n7474\n47\n47744\n7744\n474747447444474\n###---###SEPERATOR---###---\n3\n2\n5\n4\n11", "TESTCASE_2": "3\n777777\n444444\n747474\n###---###SEPERATOR---###---\n6\n\n6\n\n4", "TESTCASE_3": "2\n74774\n44744\n###---###SEPERATOR---###---\n4\n\n5", "TESTCASE_4": "1\n77774444\n###---###SEPERATOR---###---\n8", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}