{"Q_ID": "1312310017", "S_NAME": "Data types and Operators", "Q_NAME": "Lucky Sum", "Q_DESC": "Chef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nChef also use term \"lucky sum\". Lucky sum is an operation between two integers. Let the first integer is A, A[i] equals i-th digit of A (0-base numeration, from right to left) and the second integer is B, B[i] equals to i-th digit of B. Then the lucky sum of A and B is equal to C, C[i] = max(A[i], B[i]). If i is greater than or equal to size of integer, the i-th digit is equal to 0. For example, the lucky sum of 47 and 729 equals 749, the lucky sum of 74 and 92 and 477 equals 497.\n\nChef has an array W of integers. Find a number of non-empty subsequences of W such that the lucky sum of integers in that subsequences is a lucky number.\n\nSubsequence of W is created by erasing some number (probably zero) elements from W.\n\nInput\n\nFirst line contains one number T, number of test cases. Each test is formed as follows: first line contains integer n - number of integers in W, next line contains n integers - array W for corresponding test.\n\nOutput\n\nFor each T test cases print one integer - result for the corresponding test.\n\nConstraints\n\n1 <= T <= 10\n\n1 <= n <= 50\n\n1 <= Wi < 10^9", "TESTCASE_1": "2\n2\n4 7\n3\n43 87 44\n###---###SEPERATOR---###---\n3\n2", "TESTCASE_2": "4\n4\n1 2 3 4\n3\n4 5 6\n6\n1 6 3 88 22 90\n2\n1 7\n###---###SEPERATOR---###---\n8\n\n1\n\n0\n\n2", "TESTCASE_3": "1\n6\n3 5 9 4 2 1\n###---###SEPERATOR---###---\n8", "TESTCASE_4": "2\n2\n15 4\n3\n1 6 44\n###---###SEPERATOR---###---\n1\n\n2", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}