{"Q_ID": "1313310027", "S_NAME": "Control and Looping", "Q_NAME": "create a Binary Heap", "Q_DESC": "To create a Binary Heap and Perform various operation\t\"class BinaryHeap {\n \n private int nodes[];\n private int size;\n private int capacity;\n  \n \n public BinaryHeap(int capacity) {\n  this.size = 0;\n  this.capacity = capacity;\n  this.nodes = new int[capacity + 1];\n }\n \n public int size() {\n  return size;\n }\n \n public int findMin() {\n  if (size <= 0) {\n   throw new RuntimeException(\"\"Empty Heap is empty.\"\");\n  }\n  return nodes[1];\n }\n \n public void insert(int e) {\n  if (size >= capacity) {\n   throw new RuntimeException(\"\"Heap overflow.\"\");\n  }\n \n  size++;\n  nodes[size] = e;\n  percolateUp();\n }\n \n public int deleteMin() {\n  if (size <= 0) {\n   throw new RuntimeException(\"\"Empty Heap is empty.\"\");\n  }\n  int min = findMin();\n  nodes[1] = nodes[size];\n  size--;\n  percolateDown();\n  return min;\n }\n \n private void percolateDown() {\n  int index = 1;\n  while (true) {\n   int child = index * 2;\n   if (child > size)\n    break;\n   if (child + 1 <= size) {\n    // if there are two children -> take the smallest or\n    // if they are equal take the left one\n    child = findMin(child, child + 1);\n   }\n   if (nodes[index] <= nodes[child])\n    break;\n   swap(index, child);\n   index = child;\n  }\n }\n \n private void percolateUp() {\n  int index = size();\n  while (index > 1) {\n   int parent = index / 2;\n   if (nodes[index] >= nodes[parent])\n    break;\n   swap(index, parent);\n   index = parent;\n  }\n }\n \n private void swap(int i, int j) {\n  int temp = nodes[i];\n  nodes[i] = nodes[j];\n  nodes[j] = temp;\n }\n \n private int findMin(int leftChild, int rightChild) {\n  if (nodes[leftChild] <= nodes[rightChild]) {\n   return leftChild;\n  } else {\n   return rightChild;\n  }\n }\n  \n public static void main(String[] args) {\n  BinaryHeap bh = new BinaryHeap(10);\n  bh.insert(7);\n  bh.insert(5);\n  bh.insert(9);\n  bh.insert(6);\n  bh.insert(4);\n  bh.insert(8);\n  bh.insert(10);\n  bh.insert(1);\n  bh.insert(3);\n  bh.insert(2);\n   \n  System.out.println(\"\"Size of Binary Heap is : \"\" + bh.size());\n \n  System.out.println(\"\"Delete min from Binary Heap : \"\" + bh.deleteMin());\n  System.out.println(\"\"Size of Binary Heap is : \"\" + bh.size());\n \n  System.out.println(\"\"Delete min from Binary Heap : \"\" + bh.deleteMin());\n  System.out.println(\"\"Size of Binary Heap is : \"\" + bh.size());\n }\n  \n}\n\"\t", "TESTCASE_1": "\\\"binary heap\n\\\"\t\\\"Size of Binary Heap is : 10\nDelete min from Binary Heap : 1\nSize of Binary Heap is : 9\nDelete min from Binary Heap : 2\nSize of Binary Heap is : 8\n\\\"\t0\t0\tbinary heap\t\\\"Size of Binary Heap is : 10\nDelete min from Binary Heap : 1\nSize of Binary Heap is : 9\nDelete min from Binary Heap : 2\nSize of Binary Heap is : 8\n\\\"\n###---###SEPERATOR---###---\n0", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}