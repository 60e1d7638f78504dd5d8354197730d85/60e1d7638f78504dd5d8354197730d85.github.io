{"Q_ID": "1314210002", "S_NAME": "Arrays", "Q_NAME": "Insertion Sort", "Q_DESC": "One common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms.\nInsertion Sort \nThese challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with an already sorted list.\nInsert element into sorted list \nGiven a sorted list with an unsorted number e in the rightmost cell, can you write some simple code to insert  into the array so that it remains sorted?\nPrint the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort.\nGuideline: You can copy the value of e to a variable and consider its cell empty. Since this leaves an extra cell empty on the right, you can shift everything over until V can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace it with e.\nInput Format \nThere will be two lines of input:\n Size - the size of the array\n  Arr- the unsorted array of integers\nOutput Format \nOn each line, output the entire array every time an item is shifted in it.\n", "TESTCASE_1": "5\n2 4 6 8 3\n###---###SEPERATOR---###---\n2 4 6 8 8 \n2 4 6 6 8 \n2 4 4 6 8 \n2 3 4 6 8 ", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}