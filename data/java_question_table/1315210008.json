{"Q_ID": "1315210008", "S_NAME": "Classes and Objects", "Q_NAME": "Digit Longest Increasing Subsequences 2", "Q_DESC": "Recently Chef learned about Longest Increasing Subsequence. To be precise, he means longest strictly increasing subsequence, when he talks of longest increasing subsequence. To check his understanding, he took his favorite n-digit number and for each of its n digits, he computed the length of the longest increasing subsequence of digits ending with that digit. Then he stored these lengths in an array named LIS.\n\nFor example, let us say that Chef's favourite 4-digit number is 1531, then the LIS array would be [1, 2, 2, 1]. The length of longest increasing subsequence ending at first digit is 1 (the digit 1 itself) and at the second digit is 2 ([1, 5]), at third digit is also 2 ([1, 3]), and at the 4th digit is 1 (the digit 1 itself).\n\nNow Chef wants to give you a challenge. He has a valid LIS array with him, and wants you to find any n-digit number having exactly the same LIS array? You are guaranteed that Chef's LIS array is valid, i.e. there exists at least one n-digit number corresponding to the given LIS array.\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\n\nFor each test case, the first line contains an integer n denoting the number of digits in Chef's favourite number.\n\nThe second line will contain n space separated integers denoting LIS array, i.e. LIS1, LIS2, ..., LISn.\n\nOutput\n\nFor each test case, output a single n-digit number (without leading zeroes) having exactly the given LIS array. If there are multiple n-digit numbers satisfying this requirement, any of them will be accepted.\n\nConstraints\n\n1  T  30 000\n1  n  9\nIt is guaranteed that at least one n-digit number having the given LIS array exists", "TESTCASE_1": "5\n1 \n1\n2 \n1 2\n2 \n1 1\n4\n1 2 2 1\n7 \n1 2 2 1 3 2 4\n###---###SEPERATOR---###---\n1\n12\n11\n1221\n1221324", "TESTCASE_2": "5\n1 \n1\n2 \n1 2\n2 \n1 1\n4\n1 2 2 1\n5 \n1 3\n###---###SEPERATOR---###---\n2 1 3 2 4\n1\n12\n11\n1221\n13213", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}