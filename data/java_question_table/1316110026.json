{"Q_ID": "1316110026", "S_NAME": "Methods", "Q_NAME": "Equal or Unequal", "Q_DESC": "Override equals method to compare two complex numbers are equal or not.\nInput Format : two complex numbers\nOutput Format : print \"Equal\" if they are equal otherwise \"Not Equal\". \n\nMandatory:\n\n1.Create a Class named \"Complex\" \n2.Then create a method with the following details to get real and imaginary part of the complex number.\n\nMethod name = Complex\nArguments = Two arguments of type double\nAccess specifier - public\n\npublic Complex(double re, double im)\n\nMethod name = equals\nArguments = One argument (Instance variable \"o\" of type Object)\nReturn type - boolean\nAccess specifier - public\n\n public boolean equals(Object o)\n\n3.Override the method equals to compare two complex objects\n              Conditions to check inside the equals method \n                         If the variable \"o\" is an instance of  itself and return true\n                         if the variable \"o\" is a instance of complex or null return false\n\n4.Typecast \"o\" to compare two data members\n       Complex c = (Complex) o;\n\n5.Compare the data members and return accordingly\n               return Double.compare(re, c.re) == 0 && Double.compare(im, c.im) == 0;\n\n6. Get four inputs from the user in the main method with variable names as \"a\" , \"b\", \"x\" and \"y\" of type integer\n\n7. Create two object named c1 and c2 for the class Complex from the main method of the main class(TestClass) to get two complex numbers.\n\n8.Then compare two complex numbers.If it is equal then print \"Equal\" else print \"Not Equal\" \n", "TESTCASE_1": "45 90\n45 90\n###---###SEPERATOR---###---\nEqual", "TESTCASE_2": "89 76\n89 67\n###---###SEPERATOR---###---\nNot Equal", "TESTCASE_3": "71 56\n71 56\n###---###SEPERATOR---###---\nEqual", "TESTCASE_4": "17 63\n19 42\n###---###SEPERATOR---###---\nNot Equal", "TESTCASE_5": "public boolean equals\n###---###SEPERATOR---###---\npublic Complex(double re, double im)"}