{"Q_ID": "1317110061", "S_NAME": "Strings", "Q_NAME": "Valid Username or Not", "Q_DESC": "A username is considered valid if all the following constraints are satisfied:\nThe username consists of 8 to 30 characters inclusive, i.e., if the username consists of less than 8 or greater than 30 characters, then it is invalid username.\nThe username must contain alphanumeric characters, and underscores (_) only. Alphanumeric characters describe the character set consisting of lowercase characters [a-z] , uppercase characters [A-Z] , and digits [0-9] .\nThe first character of the username must be an alphabetic character, i.e., either lowercase character [a-z]   or uppercase character[A-Z] .\nFor example:\nJulia is invalid user name because it contains less than 8  characters.\n Samantha is valid as it satisfies all the three constraints for a valid username.\nSamantha_21 is valid as it satisfies all the three constraints for a valid username.\n 1Samanthais invalid as the first character must be alphabetic.\nSamantha?10_2A is invalid as it contains the ? which does not belong to any of the allowed characters set.\nUpdate the value of regularExpression field in the UsernameValidator class so that the regular expression only matches with valid usernames.\nInput Format\nThe first line of input contains an integer n, describing the total number of usernames. Each of the next n lines contains a string describing the username. The locked stub code reads the inputs and validates the username.\nConstraints\nn value ranges from 1 to 100\nThe username consists of any printable characters.\nOutput Format\nFor each of the usernames, the locked stub code prints Valid if the username is valid; otherwise Invalid each on a new line.\n", "TESTCASE_1": "2\nJulia\nSamantha\n###---###SEPERATOR---###---\nInvalid\nValid", "TESTCASE_2": "2\nSamantha_21\n1Samantha\n###---###SEPERATOR---###---\nValid\nInvalid", "TESTCASE_3": "2\nSamantha?10_2A\nJuliaZ007\n###---###SEPERATOR---###---\nInvalid\nValid", "TESTCASE_4": "2\nJulia@007\n_Julia007\n###---###SEPERATOR---###---\nInvalid\nInvalid", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}