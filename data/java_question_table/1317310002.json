{"Q_ID": "1317310002", "S_NAME": "Strings", "Q_NAME": "STRING ENCODING", "Q_DESC": "Encoding Three Strings:  Anand was assigned the task of coming up with an encoding mechanism for any given three strings. He has come up with the below plan.\nStep One: Given any three strings, break each string into 3 parts each.\nFor Example  If the three strings are as below \nInput1=John\nInput2=Johny\nInput3=Janardhan\nJohn should be split into J, oh,n as the FRONT,MIDDLE and END parts respectively.\nJohny should be split into Jo, h,ny as the FRONT,MIDDLE and END parts respectively.\nJanardhan should be split into Jan, ard,han as the FRONT, MIDDLE and END parts respectively.\ni.e. if the no. of characters in the string are in multiples of 3, then each split-part will contain equal no. of characters, as seen in the example of Janardhan\nIf the no. of characters in the string are NOT in multiples of 3, and if there is one character more than multiple of 3, then the middle part will get the extra character, as seen in the example of John\nIf the no. of characters in the string are NOT in multiples of 3, and if there are two characters more than multiple of 3, then the FRONT and END parts will get one extra character each, as seen in the example of Johny\nSTEP TWO: Concatenate (join) the FORNT, MIDDLE and END parts of the strings as per the below specified concatenation-rule to form three Output Strings.\nOutput1= MIDDLE part of input1+FIRST part of Input2+END part of Input3\nOutput2= END part of input1+MIDDLE part of Input2+FRONT part of Input3\nOutput3= FRONT part of input1+END part of Input2+MIDDLE part of Input3\nFor example, for the above specified example strings,\nOutput 1 : ohJohan\nOutput 2:  nhJan\nOutput 3:  Jnyard\nSTEP THREE: Process the resulting output strings based on the output-processing rule.\nAfter the above, we will now have three output strings. Further processing is required only for the third output string as per below rule-\nToggle the case of each character in the string, i.e in the third output string, all lower-case characters should be made upper-case and vice versa.\nFor example, for the above example strings, Output3 is Jnyard, so after applying the toggle rule Output3 should become jNYARD.\nFINAL RESULT  The three output strings after applying the above three steps is the final result. i.e. for the above example,\nOutput 1 : ohJohan\nOutput 2:  nhJan\nOutput 3:   jNYARD\nAnand approaches you to help him write a program that would do the above mentioned processing on any given three strings and generate the resulting three output strings.\nExample 1 :\nInput1=John   J, oh,n\nInput2=Johny   Jo, h,ny\nInput3=Janardhan  Jan,ard,han\nOutput 1 : ohJohan\nOutput 2:  nhJan\nOutput 3:  jNYL \n", "TESTCASE_1": "hello\nworld\njava\n###---###SEPERATOR---###---\nlwoa\nlorj\nHELDAV", "TESTCASE_2": "java\nis\nlife\n###---###SEPERATOR---###---\navie\nal\nJSIF", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}