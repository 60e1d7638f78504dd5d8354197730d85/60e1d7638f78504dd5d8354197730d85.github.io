{"Q_ID": "1319310006", "S_NAME": "Exceptional Handling", "Q_NAME": "Peaceful Calculator", "Q_DESC": "In the 1920's a mad scientist by the name Exor invented a notation for evaluating complex mathematical expressions. This notation popularly goes by the name \"Zenfix\" notation. In more formal terms, Zenfix expression is an expression which consists of tokens. Each token is either an operation from the list { ! , ^ , / , * , + , - } or an integer.\n\nAll arithmetic operation here are 32-bit operations. They are defined through auxiliary unary operation 32-bit residue as follows (please read this carefully, some definitions are non-standard):\n\n32-bit residue of A is defined as the unique integer X in the range [-231, 231) for which the usual difference of A and X is divisible by 232.\n32-bit difference A - B is defined as a 32-bit residue of the usual difference of A and B.\n32-bit sum A + B is defined as a 32-bit residue of the usual sum of A and B.\n32-bit product A * B is defined as a 32-bit residue of the usual product of A and B.\n32-bit quotient A / B is defined as the smallest integer C in the range [-231, 231) such that B * C = A (note the B * C here is a 32-bit product of B and C). If no such integer C exists then result of division is undefined, which means that error occurs during the calculation.\n32-bit power A ^ B is defined as follows. For B > 0 we define A ^ B = A * A * ... * A, where A repeats B times (here * is a 32-bit multiplication). For B = 0 we define A ^ 0 = 1. Finally, for B < 0 we define A ^ B = 1 / (A ^ (-B)), where A ^ (-B) is defined above (-B is the usual negation of B) and / is a 32-bit division operation. If result of division here is undefined it means that error occurs during the calculation.\n32-bit factorial A! is defined as follows. For A > 0 we define A! = 1 * 2 * 3 * ... * A (here * is a 32-bit multiplication). For A = 0 we define 0! = 1. Finally, for A < 0 we define A! = (-1) * (-2) * (-3) * ... * A (here again * is a 32-bit multiplication and -X for X = 1, 2, 3, ... means usual negation).\nEach operation has its own priority defined by its index in this list: the smaller the index the higher the priority. Therefore,\n\nthe most priority operation is factorial (!),\nthe second most priority operation is exponentiation (^),\nthe third most priority operation is division (/),\nthe fourth most priority operation is multiplication (*),\nthe fifth most priority operation is addition (+),\nand, finally, the less priority operation is subtraction (-).\nWe could abbreviate the list of operations sorted by priority as FEDMAS (the first letter of the title of each operation was chosen).\n\nThe evaluation of a Zenfix expression goes as follows:\n\nIf expression contains a factorial sign (!) followed by an integer then we choose the leftmost such occurrence and perform the factorial operation which will be defined below. Namely, we replace the integer that follows the factorial sign by its factorial value and delete the factorial sign from the expression.\nOtherwise, if there exists an operation followed by at least 3 integers we at first choose the first operation in EDMAS with this property (that is, among operations followed by at least three integers we choose the operation with the highest priority). Then we choose the leftmost occurrence of such a case with this operation and perform calculation. Namely, we replace the operation and two following integers by the result of this operation applied to these integers. If error occurs during this calculation then you should stop evaluation of expression.\nOtherwise, if there exists an operation followed by exactly 2 integers we proceed exactly as in the previous rule.\nWe repeat the first three steps until we can no longer repeat them or error occurs during some calculation.\nAt the end of this evaluation, if we are left with a single integer, the expression is called correct, otherwise it is called incorrect. In particular, if error occurs during some calculation, the expression is incorrect.\nYour task is for the given Zenfix expression check whether it is correct or not by modeling process of its evaluation and output each intermediate calculation that occurs.", "TESTCASE_1": "4\n5\n- 5 * 6 7\n15\n- * / 15 - 7 + 1 1 3 + 2 + 1 1\n16\n+ 2 3 4 * 1 2 3 4 ^ 6 7 * 5 6 7\n21\n! -3 + * 167 164 - 257 + 190 ! 6 - / 272 0 ^ 341 12 18 !\n\n\n\n###---###SEPERATOR---###---\n3 * 6 7 42\n1 - 5 42 -37\nOK\n7 + 1 1 2\n5 - 7 2 5\n3 / 15 5 3\n2 * 3 3 9\n5 + 1 1 2\n3 + 2 2 4\n1 - 9 4 5\nOK\n5 * 1 2 2\n11 * 5 6 30\n8 ^ 6 7 279936\n1 + 2 3 5\nNOT OK\n1 ! -3 -1 -6\n10 ! 6 -1 720\n15 ^ 341 12 2062435601\nNOT OK\n", "TESTCASE_2": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_3": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_4": "0\n###---###SEPERATOR---###---\n0", "TESTCASE_5": "0\n###---###SEPERATOR---###---\n0"}